/**
  充电站与后台通信协议 protocol buffer源文件，适用于protoc 3
  消息及数据类型定义

  版本记录
  V1.0.2 2018-3-28 mooney_yuan@qq.com
  1. 增加MessageID，ID_HeartbeatReq和ID_HeartbeatConf用于充电站和服务器对时

  V1.0.1 2018-3-13 mooney_yuan@qq.com
  1. 修改计费模版价格分辨率为0.1分，并去掉timescale字段
  2. 修改消息名SystemTelemetryReq为TelemetryReq

  V1.0.0 2018-3-1 mooney_yuan@qq.com
*/
syntax = "proto3";

package evsepb;

option go_package = "github.com/zhuoqingbin/pbs/evsepb";


// import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/zhuoqingbin/pbs/evsepb/types.proto";

/**
 MessageID
 消息代码定义
 所有的消息（请求和应答）都定义了消息代码。请求消息的消息代码小于0x80；
 消息代码加上0x80就是对应消息的应答消息代码；错误应答消息代码为0xff。
*/
enum MessageID {
    ID_None = 0;
    ID_BootNotificationReq = 0x01;               //启动通知.请求
    ID_BootNotificationConf = 0x81;              //启动通知.应答

    ID_HeartbeatReq = 0x02;                      //心跳.请求
    ID_HeartbeatConf = 0x82;                     //心跳.应答

    ID_SetConfigReq = 0x03;            //远程设置参数.请求
    ID_SetConfigConf = 0x83;           //远程设置参数.应答

    ID_GetConfigReq = 0x04;               //获取设备参数.请求
    ID_GetConfigConf = 0x84;              //获取设备参数.应答

    ID_RemoteControlReq = 0x05;                  //远程控制.请求
    ID_RemoteControlConf = 0x85;                 //远程控制.应答

    ID_OTAReq = 0x06;                   //远程升级.请求
    ID_OTAConf = 0x86;                  //升级固件.应答

    // ID_FirmwareStatusNotificationReq = 0x07;     //远程升级状态通知.请求
    // ID_FirmwareStatusNotificationConf = 0x87;    //远程升级状态通知.应答

    // ID_GetDiagnosticsReq = 0x08;                 //获取设备诊断日志.请求
    // ID_GetDiagnosticsConf = 0x88;                //获取设备诊断日志.应答
    // ID_DiagnosticsStatusNotificationReq = 0x09;  //诊断日志状态通知.请求
    
    // ID_DeviceRegistrationReq = 0x0A;			 //注册请求
    // ID_DeviceRegistrationConf = 0x8A;            //注册请求.应答

    ID_RemoteStartReq = 0x10;         //远程启动充电.请求
    ID_RemoteStartConf = 0x90;         //远程启动充电.应答

    // ID_RemoteStopTransactionReq = 0x11;          // 远程停止充电.请求
    // ID_RemoteStopTransactionConf = 0x91;          //远程停止充电.应答

    ID_StartTransactionReq = 0x12;               //充电开始通知.请求
    ID_StartTransactionConf = 0x92;              //充电开始通知.应答

    // ID_StopTransactionReq = 0x13;                //充电结束通知.请求
    // ID_StopTransactionConf = 0x93;                //充电结束通知.应答

    // ID_AuthorizeReq = 0x14;                      //鉴权.请求
    // ID_AuthorizeConf = 0x94;                      //鉴权.应答

    // ID_ReserveNowReq = 0x15;                     //预约充电.请求
    // ID_ReserveNowConf = 0x95;                    //预约充电.应答

    // ID_CancelReservationReq = 0x16;              //取消预约.请求
    // ID_CancelReservationConf = 0x96;              //取消预约.应答

    // ID_UpdateIdCardCacheReq = 0x1A;              //更新用户卡桩端缓存.请求
    // ID_UpdateIdCardCacheConf = 0x9A;              //更新用户卡桩端缓存.应答

    ID_TelemetryReq = 0x21;                      //遥测.请求
    // ID_ChargingInfoReq = 0x23;                   //充电过程信息.请求
    // ID_TriggerMessageReq = 0x24;                 //触发消息重发.请求

    // ID_GetTransactionsReq = 0x30;                //获取订单 .请求
    // ID_GetTransactionsConf = 0xB0;                //获取订单 .应答

    ID_TransactionReq = 0x31;                    //上报订单 .请求
    ID_TransactionConf = 0xB1;                    //上报订单 .应答
    
    // ID_GetWarningReq = 0x32;                     //获取告警记录.请求
    // ID_GetWarningConf = 0xB2;                     //获取告警记录.应答

    ID_WarningReq = 0x33;                        //上报告警记录.请求
    ID_WarningConf = 0xB3;                        //上报告警记录.应答

    // ID_SetTariffReq = 0x34;                      //设置计费模版.请求
    // ID_SetTariffConf = 0xB4;                      //设置计费模版.应答

    // ID_GetBaseReportReq = 0x35;                  //获取报告.请求
    // ID_GetBaseReportConf = 0xB5;                  //获取报告.应答

    // ID_NotifyReportReq = 0x36;                   //上报报告.请求
    // ID_NotifyReportConf = 0xB6;                   //上报报告.应答

    // ID_SetVariablesReq = 0x37;                   //设置变量.请求
    // ID_SetVariablesConf = 0xB7;                   //设置变量.应答

    // ID_GetLogReq = 0x38;                         //获取日志.请求
    // ID_GetLogConf = 0xB8;                         //获取日志.应答

    // ID_LogStatusNotificationReq = 0x39;          //日志上报状态.请求
    // ID_LogStatusNotificationConf = 0xB9;          //日志上报状态.应答

    // ID_SendLocalAuthorizationListReq = 0x40;     //设置本地授权列表.请求
    // ID_SendLocalAuthorizationListConf = 0xBA;     //设置本地鉴权列表.应答

    // ID_GetTariffReq = 0x41;                      //获取计费策略.请求
    // ID_GetTariffConf = 0xC1;                      //获取计费策略.应答


    // ID_MessageError = 0xFF;                       //错误
}

// APDU 消息报文定义
message APDU {
    string sn = 1;              // 设备编号
    int32 timestamp = 2;        // 消息unix时间戳
    uint64 sequence_id = 3;     // 定义消息的唯一ID，应答报文中此字段必须与请求报文中的一致，用来匹配请求和应答
    MessageID message_id = 4;   // 消息代码,参考 MessageID 定义
    bytes payload = 5;          // 消息经protocol buffer序列化后的数据，实际的消息内容
    Extrend extrend = 6;        // 扩展字段
}


// 扩展信息
message Extrend {
    bool no_need_reply = 1; // 不需要回复
    string pass_back = 2;   // 回传信息, 直接回传
}


// DeviceRegistrationReq 注册请求
// Deprecated: 设备注册，统一在后台注册，取消这里的自动注册接口。 改调用GRPC接口注册
message DeviceRegistrationReq {
    string part_number = 1;              // 设备型号（用于区分不同类型的桩）
    string serial_number = 2;            // 设备序列号（由工厂生产时烧录）
    string vendor_id = 3;                // 供应商代码
    string registration_code = 4;        // 注册码（由运营后台生成，分配给工厂，烧录到设备中）
    bool need_to_encode_evse_id = 5;    // 是否需要转码设备ID
    string topic_prefix = 6;            // topic的前缀
    string product_id = 7;               // 产品型号
    int32 connector_number = 8;          // 充电接口数量
    repeated int32 connector_type = 9;   // 充电接口类型列表，列表第1项为接口1类型，第2项为接口2类型，依次类推
                                    //类型定义如下：1-交流充电插座，2-交流充电枪，3-直流充电枪，4-三角插座
}

// 注册应答
message DeviceRegistrationConf {
    int32 status = 1;           //返回中心平台注册状态
    string device_code = 2;      //中心平台分配的设备识别码
    string mqtt_username = 3;    //mqtt的用户名
    string mqtt_password = 4;    //mqtt的密码
    string qrcode_host = 5;     //QRcode host
    repeated string qrcodes = 6;  //二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
}



// BootNotificationReq
// 启动通知请求消息定义
message BootNotificationReq {
    EvseModel evse_model = 1;
    string firmware_version = 2; // 固件版本号
	string protocol_version = 3; // 通讯版本号
    EvseProtocolVendor protocol_vendor =4;  // 协议厂家
    int32  connector_number = 5;            // 充电接口数量
    string iccid = 6;                       // SIM卡识别号(ICCID (21Bytes)/ TMSI 16(Bytes))
    string mac = 7; // mac地址
    
    repeated EvseFunction  functions = 18; // 功能开关
}


// BootNotificationConf
// 启动通知应答消息定义
message BootNotificationConf {
    int32 interval = 1;         // 心跳时间间隔（秒）
    int32 status = 2;          // 返回中心平台登录状态
    repeated string qrcodes = 3;  // 二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
}



// HeartbeatResp
// 心跳请求
message HeartbeatReq {
}

// HeartbeatResp
// 心跳回复
message HeartbeatResp {
}


// SampledValue 遥测项
message SampledValue {
    Measurand measurand = 1;       // 遥测变量代码
    int32 value = 2;               // 遥测值
}

// TelemetryReq 遥测.请求
message TelemetryReq {
    int32 connector_no = 1;     //充电接口，若测量组件属于某个充电接口，如某个接口的电表，填对应的充电接口号
    string record_id = 7;        //跟订单相关的遥测信息，才有recordId相关联充电订单号
    repeated SampledValue values = 5;   //遥测值集合
}


// SetEvseConfigReq 远程设置参数请求消息定义
message SetEvseConfigReq {
    repeated EvseConfigKV configu_key  = 1; //设置参数列表
}

// SetEvseConfigConf 远程设置参数应答消息定义
message SetEvseConfigConf {
    SetConfigurationStatus status = 1; //设置参数返回值
}

// GetConfigurationReq 获取设备参数请求消息定义
message GetEvseConfigReq {
    repeated EvseConfigKV keys  = 1;  //获取参数列表，协议标准参数通过KeyValue对象的key域指定
}

// GetConfigurationConf 获取设备参数请求消息定义
message GetEvseConfigConf {
    repeated EvseConfigKV values = 1; //获取参数返回值列表，当获取的参数不存在时，KeyValue对象的value域为空
}


// RemoteControlReq 远程控制请求消息定义
message RemoteControlReq {
    EvseCtrlFunction function = 1;  //远程控制功能，协议标准功能参考远程控制功能列表
    uint32 cno = 2; // 枪头号，0 表示设备
    string parameter = 3; // 附加参数, json格式
}

// RemoteControlConf 远程控制应答消息定义
message RemoteControlConf {
    int32 status = 1; //远程控制返回状态
}

// 远程控制时
message RemoteControlStartParam {
    uint32 user_id = 1;
    int32 current = 2;
}


// TransactionReq 上报订单请求 消息上报充电记录定义
message TransactionReq {
    string record_id = 1;        // 充电桩充电记录号
    string transaction_id = 2;   // 中心平台生成的充电交易号
    int32 connector_no = 3;      // 充电接口号
    AuthorizationMode auth_mode = 4; //授权启动充电方式
    string auth_id = 5;          // 授权启动ID
    ServiceMode service_mode = 6;    //充电服务模式
    int32 service_amount =7;    // 充电量/钱/时间。对应充电服务模式中的按电量充电，按金额充电，按时间充电，自动充满进行赋值
    int32 meter_start = 8;       //充电开始时电表度数，分辨率0.001kwh
    int32 meter_stop = 9;        //充电结束时电表度数，分辨率0.001kwh
    int32 time_start = 10;        //充电订单开始时间，时间戳，精度：秒
    int32 time_stop = 11;        //充电订单结束时间，时间戳，精度：秒
    int32 charge_start_time = 12; //真正充电开始时间，时间戳，精度：秒
    int32 charge_stop_time = 13;  //充电结束时间，时间戳，精度：秒
    uint32 start_soc = 14;      //启动soc 直流有用
    uint32 stop_soc = 15;       //结束soc 直流有用
    StopReason reason = 16;     //充电结束原因。用户远程结束，本地结束，异常结束等。
    string reason_desc = 17;    //停止理由描述
    uint64 tariff_id = 18;      //计费模版信息
    TransactionCost cost = 19;  //计费账单信息

}

// TransactionCost
message TransactionCost {
    uint64 tariff_id = 1; // 计费模版id
    uint32 total_elec = 2; // 计费总电量
    uint32 total_amount = 3; // 充电总费用
    uint32 total_elec_amount = 4; // 总电费
    uint32 total_service_amount = 5; // 总服务费
    repeated TransactionCostDetail details = 6;// 费用明细
    int32 conflict_total_cost = 7; //费用冲突，一般用于核算费用，核算分段计费与总消费不一致的情况，如果一致则此字段为默认值0
}

// TransactionCostDetail 计费模版相关，充电消费账单消息定义
message TransactionCostDetail {
    EvseOrderSectionTag tag = 1; //分段标签，比如"尖"，"峰"，"平"，"谷"
    int32 timestart = 2;        //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
    int32 timeend = 3;          //分段费率结束时间，同上
    int32 electric = 4;         //该分段所消耗电量
    int32 electriccost = 5;     //该分段所消费电量电费,单位分
    int32 servicecost = 6;      //该分段所消费服务费,单位分
    int32 occupycost = 7;       //按分段所消费停车费,单位分
}

// TransactionConf 离线记录上送回复
message TransactionConf {
    int32 status = 1;    //状态
    string recordId = 2;   //回复的设备订单号
}

// OTAReq 远程升级请求消息定义
message OTAReq {
    string url = 1;             //升级文件ftp服务器地址
    string checksum = 2;        //升级文件md5校验值
    int32 retries = 3;          //设备下载失败重试次数
    int32 retryDate = 4;        //执行升级的时间,时间戳类型类型
    int32 retryInterval = 5;    //重试间隔时间，单位秒
    int32 request_id = 6;       //升级ID
}

// OTAConf 远程升级应答
message OTAConf {
    OTAConfStatus status = 1;
}


// EvseWarningReq 设备告警请求
message EvseWarningReq {
    EvseWarningCode code = 1;            //告警代码
    EvseWarningLevel level = 3;    //指定告警等级
    // Components component = 4;  //告警所属的组件，组件包括系统，计费控制单元，充电控制单元，电源模块，BMS等
    string recordId = 5;        //告警所关联的充电会话记录号
    string info = 6;           //告警信息。对于供应商自定义的告警，可以在此填充告警相关信息。
    int32 connectorId = 8;     //充电接口号
    int32 componentId = 9;     //组件号
    int32 ttl = 10;            // -1 永远存储; 0  删除告警; >0 存储告警时长(秒),超过自动解除告警
    uint64 event_id = 11;      //事件ID
    int32 time = 12;           //告警时间
}

/**
 * WarningConf
 */
message WarningConf{
}



// /**用户身份鉴权信息*/
// message IdToken {
//     string id = 1;          //Id的卡号
//     IdType id_type = 2;     //用户类型
//     string brand = 3;       //卡的品牌，比如goiot或某地的公交卡
//     string password = 4;    //IdToken的密码
//     string customer = 5;    //运营商
//     int32 expiryDate = 6;   //用户账户失效时间,时间戳类型
//     int32 balance = 7;      //用户账户余额。单位分
//     AuthorizationStatus status = 8;//中心平台鉴权结果。用户账户是否通过中心平台鉴权。
//     CardType type = 9;      //用户卡类型
//     int32 chargecount = 10; //剩余充电次数
// }




// // MessageError
// // 错误消息定义
// message MessageError {
//     ErrorCode error = 1;        //充电桩或者中心平台向对方发送APDU，
//     //如果对方无法正确解析及回应APDU内的消息，返回错误消息。返回ErrorCode类型错误原因
//     string  description = 2;    //返回错误描述。
// }


// /**
// DiagnosticsStatus
// 日志上传状态通知请求，日志上传进度状态
// */
// enum DiagnosticsStatus
// {
//     DGS_Idle	= 0;            //未进行日志上传任务状态
//     DGS_Accepted = 1;           //上传日志指令已接受
//     DGS_Uploading = 2;          //正在上传日志
//     DGS_Uploaded = 3;           //日志上传成功
//     DGS_UploadFailed = 4;       //日志上传失败
// }

// /**
//  * FirmwareStatusNotificationReq
//  * 远程升级状态通知请求消息定义
//  */
// message FirmwareStatusNotificationReq
// {
//     FirmwareStatus status = 1;//固件升级进度状态
//     int32 request_id = 2 ;//请求ID
// }

// /**
//  * FirmwareStatusNotificationConf
//  * 远程升级状态通知应答消息定义
//  */
// message FirmwareStatusNotificationConf
// {
// }


// /**
// GetDiagnosticsReq
// 获取设备诊断日志请求消息定义
// */
// message GetDiagnosticsReq
// {
//     string url = 1;             //日志上传ftp服务器地址
//     int32 retries = 2;          //日志上传失败重试次数
//     int32 retryInterval = 3;    //重试间隔时间，单位秒
//     int32 startTime = 4;        //日志开始时间
//     int32 endTime = 5;          //日志结束时间
// }

// /**
// GetDiagnosticsConf
// 获取设备诊断日志应答消息定义
// */
// message GetDiagnosticsConf
// {
//     string filename = 1;        //上传的日志文件名
// }

// /**
// DiagnosticsStatusNotificationReq
// 诊断日志状态通知请求消息定义
// */
// message DiagnosticsStatusNotificationReq
// {
//     DiagnosticsStatus status = 1;//日志上传进度状态
// }


// /**
// TriggerMessageReq
// 触发消息重发请求
// */
// message TriggerMessageReq
// {
//     MessageID request = 1;      //请求重发的消息代码
//     int32 connectorId = 2;      //指定充电接口
// }

// /*
// 计费模版相关
//   分功率段按时长充电计费模版
// */
// message TariffTime{
//     int32 powerstart = 1;       //分段费率起始功率，分辨率W
//     int32 powerend = 2;         //分段费率结束功率，分辨率W
//     int32 timestart = 3;        //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
//     int32 timeend = 4;          //分段费率结束时间，以24小时内分钟数表示。例如480表示此费率到8:00（480/60）结束
//     int32 price = 5;            //按小时服务费价格，分辨率RMB 0.1分。
//     // int32 unitprice = 6;        //计费单价，分辨率RMB 0.1分。// 移动到外部,每一个分段都使用同样的最小计费
// }

// /*
// 计费模版相关
//   分时段按电价计费充电计费模版
// */
// message TariffCharge{
//     int32 timestart = 1;        //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
//     int32 timeend = 2;          //分段费率结束时间，同上
//     string tag = 3;             //分段标签，比如"尖"，"峰"，"平"，"谷"
//     int32 elecprice = 4;        //按度电价，分辨率RMB0.1分
//     int32 serviceprice = 5;     //按度服务费价格，分辨率RMB0.1分
//     int32 occupyprice = 6;      //按小时占用费用, 分辨率RMB0.1分
// }
// /*
// 计费模版相关
//  分时段计时停车费
// */
// message TariffParking{
//     int32 timestart = 1;        //开始时间，从停车开始计时时间段，分辨率分钟。例如30表示此费率从停车30分钟后开始
//     int32 price = 2;            //按小时停车费，分辨率RMB0.1分
// }


// message TariffChannel
// {
//     map<string, int32> elec = 1;      //电费
//     map<string, int32> service = 2;   //服务费
//     uint64 tariffid = 3; //计费模版id号
// }


// /**
// GetTariffReq
//  获取计费模板
//  */
// message GetTariffReq
// {
//     uint64 tariffid = 1;              //计费模板id号
// }

// /**
// SetTariffReq
//  设置计费模版
// */
// message SetTariffReq
// {
//     uint64 tariffid = 1;                        //计费模版id号
//     string description = 2;                     //描述
//     repeated TariffCharge chargetariffs = 3;    //按电量充电费用
//     repeated TariffTime timetariffs = 4;        //按时长充电费用
//     repeated TariffParking parkingtariffs = 5;  //停车费
//     bool test = 6;                              //测试下，是否通过校验，并不真正下发
//     int32 unitprice = 7;                        //计费单价，分辨率RMB 0.1分。
//     int32 free_charger_time = 8;                //免费充电时间
//     map<string, TariffChannel> channels = 9;    //渠道对应的费率集合
//     string channel_key = 10;                    //渠道费率的键值
//     OccupyTariff occupy_tariff = 11;            //占桩费
//     int32 connector_no = 12;        // 枪头号
// }

// // OccupyTariff 占桩费
// message OccupyTariff {
//     int32 free_time = 1;                    // 免费时间
//     int32 max_fee = 2;                      // 最高/封顶费用，分辨率RMB 0.1分
//     int32 price = 3;                        // 每分钟的费用，分辨率RMB 0.1分
// }

// /**
// SetTariffConf
//  设置计费模版应答
// */
// message SetTariffConf{
//     int32 status = 1;           //充电桩返回状态
// }



// /**
// “鉴权应答”消息鉴权结果
// **/
// enum AuthorizationStatus
// {
//     AS_Accepted = 0;        //鉴权通过，允许用户充电
//     AS_Blocked = 1;         //鉴权被挡住，不允许充电
//     AS_Expired = 2;         //账户过期，不允许充电
//     AS_Invalid = 3;         //账户无法识别，无效，不允许充电
//     AS_ConcurrentTx	= 4;    //账户有未结算的订单，不能同时开启多个订单，不允许充电
//     AS_Insufficient	= 5;    //账户余额不足，不允许充电
//     AS_PasswordError = 6;   //用户密码错误
//     AS_SystemError = 7;    //系统错误
//     AS_NoCredit = 8; // 信用额度不足
//     AS_NotAllowedTypeEVSE = 9; // 不可在此设备充电，Identifier is valid, but not allowed to charge at this type of EVSE.
//     AS_NotAtThisLocation = 10; // 不可在此站充电
//     AS_NotAtThisTime = 11; // 不可在此时充电
//     AS_Unknown = 99; // 未知
// }


// /**
// 鉴权卡细分卡类型定义
// */
// enum CardType {
//     CARD_DEFAULT = 0;       //默认，未指定类型
//     CARD_BALANCE = 1;       //余额卡
//     CARD_TIME = 2;          //时效卡（月卡／年卡）
//     CARD_COUNT = 3;         //次数卡
// }



// /**
// AuthorizeReq
// 鉴权请求
// */
// message AuthorizeReq
// {
//     IdToken IdData = 1;    //用户身份识别号
//     string password = 2;   //用户密码
//     int32 payment	= 3;   //用户请求扣费金额
//     AuthorizationMode authorization_mode = 4; //鉴权类型
//     int32 connector_no = 5; //枪ID
// }

// /**
// AuthorizeConf
// 鉴权应答
// */
// message AuthorizeConf
// {
//     IdToken idinfo = 1;             //中心平台返回鉴权结果
//     SetTariffReq priceScheme = 2;   //价格模版
//     string transactionId = 3;       //中心平台返回订单号
//     int32 connector_no = 4;         //枪ID
// }

// /**
// UpdateIdCardCacheReq
// 后台更新充电站用户卡信息
// */
// message UpdateIdCardCacheReq
// {
//     repeated IdToken cardinfo = 1;
// }


// RemoteStartReq 远程启动充电请求消息定义
message RemoteStartReq {
    string transaction_id = 1;          // 中心平台生成的订单号
    int32 cno = 2;                      // 充电接口号，必须大于0。若充电桩只有一个接口，可以不填
    ServiceMode service_mode = 3;       // 服务模式。按电量充电，按金额充电，按时间充电，自动充满 ，按电量放电，自动放电
    int64 service_value = 4;            // 服务模式参数, 最大允许充电时间，单位秒, 最大允许充电电量，分辨率0.01kwh, 最大允许充电金额，单位分
    AuthorizationMode auth_mode = 5;    // 授权模式
    string auth_id = 6;                 // 授权ID
    uint32 current = 7;                 // 有序充电，设置电流
    int32 timing_start = 8;             // 定时启动时间。充电将在设定的时间启动。如果为0或者未填，立即启动充电
    // SetTariffReq priceScheme = 8;        // 价格模版。对于某些针对特定用户启用特定计费模版
}

// RemoteStartConf 远程启动充电应答消息定义
message RemoteStartConf {
    int32 status = 1;           // 充电请求，充电桩返回状态
    StopReason reason = 2;      // 充电结束原因。
    string reason_desc = 3;     // 停止理由描述
    string record_id = 4;       // 设备流水号
}


// /**
// RemoteStopTransactionReq
// 远程停止充电请求消息定义
// */
// message RemoteStopTransactionReq
// {
//     string transactionId = 1;  // 充电交易的订单号
//     StopReason reason = 2;     // 充电结束原因。
// }

// /**
// RemoteStopTransactionConf
// 远程停止充电应答消息定义
// */
// message RemoteStopTransactionConf
// {
//     int32 status = 1; //充电桩返回状态
// }

// StartTransactionReq 充电开始通知请求消息定义
message StartTransactionReq {
    string record_id = 1;               // 充电桩充电记录号
    int32 connector_no = 2;             // 充电接口号，必须大于0。若充电桩只有一个接口，可以不填
    AuthorizationMode auth_mode = 3;    // 授权启动充电方式
    string auth_id = 4;                 //  授权启动ID
    ServiceMode service_mode = 5;          // 充电服务模式。按电量充电，按金额充电，按时间充电，自动充满等
    int32 service_amount =6;            // 充电量/钱/时间。对应充电服务模式中的按电量充电，按金额充电，按时间充电，自动充满进行赋值
    int32 meter_start = 7;              // 充电开始时电表度数，分辨率0.01kwh
    int32 time_start = 8;                // 充电开始时间,时间戳
    uint32 soc = 14;                    // 启动电量的SOC
    uint64 tariff_id = 10;                  // 计费模版ID。此订单将使用对应的计费模版计费
}

// StartTransactionConf 充电开始通知应答消息定义
message StartTransactionConf {
    uint64 transaction_id = 1; // 平台中心生成的订单号, 0 表示需要停止充电
    string record_id = 2;      // 充电桩充电记录号
}

// /**
// StopReason
// “充电结束通知”请求消息充电停止原因定义
// */
// enum StopReason
// {
//     SR_Normal = 0;                   // 按照服务类型（按电量充电，按时长充电，按金额充电, BMS正常结束等）正常停止充电。
//     SR_LocalCard = 1;                // 用户本地刷卡停止充电
//     SR_LocalPIN = 2;                 // 用户本地输入校验码停止充电
//     SR_RemoteUser = 3;               // 用户远程结束
//     SR_RemoteAdmin = 4;              // 管理员远程结束
//     SR_EmergencyStop = 5;            // 急停按下，停止充电
//     SR_EVDisconnected = 6;           // 检测到枪头断开，停止充电
//     SR_Reboot = 7;                   // 系统重启停止充电
//     SR_OffLine = 8;                  // 充电桩断线，停止充电（对于不允许离线充电的充电桩）
//     SR_PowerLoss =9;                 // 充电桩掉电，停止充电
//     SR_SystemFault = 10;             // 充电桩故障，停止充电
//     SR_BMSFault = 11;                // 电动车故障，停止充电
//     SR_Other = 12;                   // 其它原因，停止充电
//     SR_MeterFault = 13;              // 电表故障
//     SR_SocFull   = 16;               // soc充满停止
//     SR_NotEnoughMoney = 17;          // 余额不足
//     SR_OverLoad = 18;                // 过载停止
//     SR_OverVoltage = 19;             // 过压停止
//     SR_UnderVoltage = 20;            // 欠压停止
//     SR_NetTimeout = 21;              // 网络同步超时停止充电
//     SR_OverTime = 22;                // 超过设置时间
//     SR_OverMeter = 23;               // 超过设置电量
//     SR_OverSOC = 24;                 // 超过设置SOC
//     SR_CPError = 25;                 // CP错误
//     SR_Leakage = 26;                 // 漏电故障

//     // 100以内的停止理由留给我们自己的固件扩展
//     SR_FullOfSelfStop = 101;          // 充满自停(原22)
//     SR_AdminForceStop = 102;          // 管理员强制结束(原23)
//     SR_EVOccupy = 103;                // 接口已被占用(原24)
//     SR_NoTariff = 104;                // 没有计费模版(原25)
//     SR_ConnectorFault = 105;          // 充电枪故障(原26)
//     SR_CC1NoConnect = 106;            // 充电枪未连接(充电中车辆控制引导异常/CC1连接异常)(原27)
//     SR_Deauthorized = 107;            // 取消授权
//     SR_EVConnectTimeout = 108;        // 连接超时
//     SR_Server_Error = 99999999;       // 平台错误
// }

// /**
// StopTransactionReq
// 充电结束通知请求消息定义
// */
// message StopTransactionReq
// {
//     string recordId = 1;                // 充电桩充电记录号
//     string transactionId = 2;           // 平台中心生成的订单号。此订单号是从“远程启动充电”请求消息获取的
//     IdToken IdData = 3;                 // 用户身份识别号
//     StopReason reason = 4;              // 充电结束原因。用户远程结束，本地结束，异常结束等
//     int32 meterStop = 5;                // 充电结束时电表度数，分辨率0.01kwh
//     int32 timestamp = 6;                // 充电结束时间,时间戳，精度：秒
//     Cost cost = 7;                      // 充电订单计费信息
//     int32 deduction = 9;                // 本地扣款金额。单位分
//     string TAC = 10;                    // 本地卡片扣款校验数据
//     bytes elecData = 11;                // 充电过程电量信息, 每5分钟间隔电量，每个点的电量一个字节表示
//     string reason_desc = 12;            // 停止理由描述
//     bool is_disabled_time_start = 13;   // 是否禁用开始时间来找订单记录，如有的设备在启动通知报文中没有启动时间，这一项就要设置成true，如盛宏、优力特的设备
//     uint32 soc = 14;                    // 停止的SOC
//     bool calc_cost_by_backend = 15;     // 后台计费
// }

// /**
// StopTransactionConf
// 充电结束通知应答消息定义
// */
// message StopTransactionConf
// {
//     int32 balance = 1;          //用户账户余额
//     int32 totalCost = 2;        //中心平台返回的总费用
//     bool  charged = 3;          //是否已扣费
// }

// /**
// 电池类型定义，枚举类型
// */
// enum BatteryType
// {
//     BAT_Unkown = 0;
//     BAT_LeadAcid = 1;//铅酸电池
//     BAT_NiMH = 2;    //镍氢电池
//     BAT_LFP = 3;     //磷酸铁锂电池
//     BAT_LMO = 4;     //锰酸锂电池
//     BAT_LCO = 5;     //钴酸锂电池
//     BAT_NCM = 6;     //三元材料电池
//     BAT_LIB = 7;     //聚合物锂离子电池
//     BAT_LTO = 8;     //钛酸锂电池
//     BAT_Other = 9;   //其它电池
// }

// // 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
// message BMSHandshakeInfo
// {
//     string BMSVersion = 1;     //BMS通信协议版本号
//     int32 allowedVoltage = 2;  //BMS最高允许充电电压
//     BatteryType batType = 3;   //电池类型
//     int32 ratedCapacity = 4;   //整车动力蓄电池系统额定容量
//     int32 ratedVoltage = 5;    //整车动力蓄电池系统额定总电压
//     string vendor = 6;         //电池生产厂商
//     string serialNumber = 7;   //电池组序号
//     int32 productionDate = 8;  //电池组生产日期,时间戳，精度：秒
//     int32 cycles = 9;          //电池组充电次数
//     int32 property = 10;       //电池组产权标识。0-租赁，1-车自有
//     string VIN = 11;           //车辆识别码
//     string FWVersion = 12;     //BMS软件版本号
// }

// // 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
// message BMSConfigInfo
// {
//     int32 allowedCellVol = 1;  //单体动力蓄电池最高允许充电电压
//     int32 allowedCurrent = 2;  //最高允许充电电流
//     int32 nominalEnergy = 3;   //动力蓄电池标称总能量
//     int32 alowedVoltage = 4;   //最高允许充电总电压
//     int32 alowedTemp = 5;      //最高允许温度
//     int32 soc = 6;             //整车动力蓄电池荷电状态
//     int32 voltage = 7;         //整车动力蓄电池当前电池电压
// }
// /**
// BMSChargingType
// BMS充电模式
// */
// enum BMSChargingType
// {
//     BMS_None            = 0;//
//     BMS_ConstantVoltage = 1;//恒压充电
//     BMS_ConstantCurrent = 2;//恒流充电
// }

// /**
// BMS测量值状态
// */
// enum BMSMeasureStatus
// {
//     BMSM_Normal = 0;        //测量值正常
//     BMSM_OverLevel = 1;     //过高
//     BMSM_UnderLevel = 2;    //过低或者不可信
// }

// /**
// BMS开关值状态
// */

// /**
// BMSTelesignallingStatus
// 动力蓄电池绝缘状态
// */
// enum BMSTelesignalStatus
// {
//     BMST_Normal = 0;   //正常
//     BMST_Abnormal = 1; //异常
//     BMST_Unknown = 2;  //不可信
// }

// /**
// BMSChargingInfo
// 充电中信息定义
// */
// message BMSChargingInfo
// {
//     // 电压单位V 精度0.01
//     // 电流单位A 精度0.01
//     int32 requestVoltage = 1;                   // 电压需求
//     int32 requestCurrent = 2;                   // 电流需求
//     BMSChargingType chargeMode = 3;             // 充电模式
//     int32 voltage = 4;	                        // 充电电压测量值
//     int32 current = 5;	                        // 充电电流测量值
//     int32 soc = 6;	                            // 当前荷电状态	数据范围：0~100
//     int32 remainingTime = 7;	                // 估算剩余充电时间 单位秒
//     Cell highestVoltage = 8; 	                // 最高动力蓄电池电压及编号
//     Cell highestTemp = 9;	                    // 最高动力蓄电池温度及编号
//     Cell lowestTemp = 10;                       // 最低动力蓄电池温度及编号
//     BMSMeasureStatus cellVoltageStatus = 11 ;   // 单体动力蓄电池电压告警
//     BMSMeasureStatus socStatus = 12;            // 整车动力蓄电池荷电状态告警
//     BMSMeasureStatus currentStatus = 13;        // 动力蓄电池充电电流
//     BMSMeasureStatus temperatureStatus = 14 ;   // 动力蓄电池温度告警
//     BMSTelesignalStatus insulationStatus = 15;  // 动力蓄电池绝缘状态
//     BMSTelesignalStatus contactorStatus = 16 ;  // 动力蓄电池组输出继电器连接状态
//     repeated Cell cellVoltage = 17;             // 单体蓄电池电压列表
//     repeated Cell cellTemperature = 18;         // 单体蓄电池温度列表


//     string BMSVersion = 19;     // BMS通信协议版本号
//     int32 allowedVoltage = 20;  // BMS最高允许充电电压
//     BatteryType batType = 21;   // 电池类型
//     int32   ratedCapacity = 22;   // 整车动力蓄电池系统额定容量
//     int32   ratedVoltage = 23;    // 整车动力蓄电池系统额定总电压
//     string  vendor = 24;         // 电池生产厂商
//     string  serialNumber = 25;   // 电池组序号
//     int32   productionDate = 26;  // 电池组生产日期,时间戳，精度：秒
//     int32   cycles = 27;          // 电池组充电次数
//     int32   property = 28;       // 电池组产权标识。0-租赁，1-车自有
//     string  VIN = 29;           // 车辆识别码
//     string  FWVersion = 30;     // BMS软件版本号
// 	int32   allowedCurrent = 31;        // 最高允许充电电流	单位:A 精度0.01
// 	int32   callAlowedVoltage = 32;     // 单体最高允许电压	单位:V 精度0.01
// 	int32   alowedTemp = 33;            // 最高允许温度	单位：℃
//     int32   allowedCellVol = 34;         // 单体动力蓄电池最高允许充电电压
//     int32   nominalEnergy = 35;          // 动力蓄电池标称总能量
//     int32   alowedVoltage = 36;          // 最高允许充电总电压
// }
// /**
// BMSChargedInfo 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
// 充电完成信息定义
// */
// message BMSChargedInfo
// {
//     int32 soc = 1;             //中止荷电状态
//     int32 lowestVoltage = 2;   //动力蓄电池单体最低电压
//     int32 highestVoltage = 3;  //动力蓄电池单体最高电压
//     int32 lowestTemp = 4;      //动力蓄电池最低温度
//     int32 highestTemp = 5;     //动力蓄电池最高温度
// }

// /**
// Cell
// 单体电池定义
// */
// message Cell
// {
//     int32 number = 1;  //单体电池编号
//     int32 value = 2;   //采集值，电压或者温度
// }

// /**
// ChargerStatus
// 充电接口工作状态定义
// */
// enum ChargerStatus
// {
//     CHS_Unavailable = 0;     //不可用
//     CHS_Available = 1;      //空闲
//     CHS_Preparing = 2;      //已连接，未开启充电会话
//     CHS_Charging = 3;       //充电中
//     CHS_SuspendedEVSE = 4;  //充电已开启，但充电桩还未输出
//     CHS_SuspendedEV = 5;    //充电已开启，电动汽车还未充电
//     CHS_Finishing = 6;      //充电完成，还处于占用状态
//     CHS_Reserved = 7;       //预约
//     CHS_Faulted = 8;        //故障
//     CHS_Waiting = 9;        //定时充电等待、轮充等待等
//     CHS_Occupied = 10;      //设备占用中，不知道是什么状态
// }

// /**
// ChargingInfoReq
// 充电过程信息请求
// */
// message ChargingInfoReq
// {
//     string recordId = 1;                //充电桩充电记录号
//     int32 connectorId = 2;             //指定充电接口
//     //BMSHandshakeInfo BMShandshake = 4; //充电握手阶段信息
//     //BMSConfigInfo BMSConfig = 5;       //充电参数配置阶段信息
//     // BMSChargedInfo BMSCharged = 7;     //充电结束信息
//     BMSChargingInfo BMSCharging = 6;   //充电中信息
//     int32 consumedTime = 8;            //已充充电时间
//     int32 consumedElectric = 9;        //已充电电量
//     Cost cost = 10;                    //消费金额
//     int32 power = 11;                  //充电功率
//     int32 remainingTime = 12;          //剩余充电时间，精度：秒
// }


// /**
// Components
// 告警和遥测信息，设备组件定义
// */
// enum Components
// {
//     CP_None = 0;        //未分类
//     CP_System = 1;      //系统
//     CP_TCU	= 2;        //计费控制单元
//     CP_CCM = 3;         //充电控制单元
//     CP_BMS = 4;         //电动汽车BMS
//     CP_PKL = 5;         //智能车位锁
//     CP_PKD = 6;         //智能车位探测
//     CP_Meter = 7;       //电表
//     CP_LCD = 8;         //显示屏
//     CP_CardReader = 9;  //读卡器
//     CP_Fan = 10;        //系统风扇
//     CP_Connector = 11;  //充电接口
//     CP_PSM = 12;        //电源模块
// }




// /**
// GetTransactionsReq
// 获取离线订单请求
// */
// message GetTransactionsReq
// {
//     int32 connectorId = 1; //指定充电接口
//     // 0-所有接口（此字段未指定时默认）
//     // 非0-指定接口
//     int32 level = 2;       //指定已结算或未结算离线订单记录
//     // 0-当前订单(此字段未指定时默认)
//     // 1-离线未结算订单
//     // 2-所有订单
//     int32 startTime = 4;   //指定记录开始时间,时间戳，精度：秒
//     int32 endTime = 5;     //指定记录结束时间,时间戳，精度：秒
// }

// /**
// GetTransactionsConf
// 获取离线订单应答
// */
// message GetTransactionsConf
// {
//     int32 totalCount = 1;//总记录数。充电桩返回中心平台通过“获取离线订单请求”将获取的记录总数。
// }

// /**
// GetWarningReq
// 获取告警记录请求
// */
// message GetWarningReq
// {
//     WarningLevel level = 1;  //指定要获取的告警记录的告警等级
//     int32 startTime = 4;     //指定告警开始时间,时间戳，精度：秒
//     int32 endTime = 5;       //指定告警结束时间,时间戳，精度：秒
// }

// /**
// GetWarningConf
// 获取告警记录应答
// */
// message GetWarningConf
// {
//     int32 totalCount = 1;//总记录数
// }

// /**
//  * GetBaseReportConf
//  * 获取基本报告.应答
//  */
// message GetBaseReportConf
// {
//     int32 status = 1; //状态,0：接受，1：拒绝，2：请求项目不支持，3：请求项目不存在
// }

// /**
//  * GetBaseReportReq
//  * 获取基本报告.请求
//  */
// message GetBaseReportReq
// {
//     int32 request_id = 1; //请求ID
//     enum ReportBaseEnumType
//     {
//         ConfigurationInventory = 0;
//         FullInventory = 1;
//         SummaryInventory = 2;
//     }
//     ReportBaseEnumType type = 2;
// }


// /**
//  * NotifyReportReq
//  * 报告上报.请求
//  */
// message NotifyReportReq
// {
//     int32 request_id = 1; //请求ID
//     int32 generate_at = 2; //生成时间
//     bool tbc = 3; //是否还有没传完的报文
//     int32 seq = 4; //传输序列，第一帧是0
//     repeated ReportDataType reportData = 5; //上报的数据
// }

// message ReportDataType
// {
//     ComponentType component = 1;//组件
//     VariableType variable = 2;//变量
//     repeated VariableAttributeType variableAttribute = 3;//变量属性
// }

// message ComponentType{
//     string name = 1; //名称，比如风扇
//     string instance = 2; //可选，实例名称，比如风扇1、风扇2等
//     int32 connector_no = 3; //可选，默认为0，0代表是设备
// }

// message VariableType{
//     string name = 1; //名称，比如转速、电流
//     string instance = 2; //可选,实例名称，比如风扇1、风扇2等
// }

// message VariableAttributeType{
//     string type = 1; //变量类型
//     string value = 2; //变量的值
//     string mutability = 3; //变量权限
// }

// /**
//  * NotifyReportConf
//  * 上报回复
//  */
// message NotifyReportConf {
// }

// /**
//  * SetVariablesReq
//  * 设置变量.请求
//  */
// message SetVariablesReq {
//     message SetVariableData {
//         string attributeType = 1;  //类型, Target,MinSet,MaxSet,Actual(Default)
//         string attributeValue = 2; //值
//         ComponentType component = 3; //组件
//         VariableType variable = 4; //变量
//     }
//     repeated SetVariableData setVariableData = 1;//变量
// }

// /**
//  * SetVariablesConf
//  * 设置变量.应答
//  */
// message SetVariablesConf {

// }

// /**
//  * GetLogReq
//  * 获取日志.请求
//  */
// message GetLogReq {
//     enum LogType
//     {
//         DiagnosticsLog = 0; // This contains the field definition of a diagnostics log file
//         SecurityLog = 1; // Sent by the CSMS to the Charging Station to request that the Charging Station uploads the security log.
//     }
//     LogType logType = 1;
//     int32 request_id = 2; //请求ID
//     int32 retries = 3;  //重试次数
//     int32 retry_interval = 4; //重试间隔
//     message LogParametersType {
//         string remote_location = 1; //地址
//     }
//     LogParametersType log = 5; //日志请求参数
// }


// /**
//  * GetLogResp
//  * 获取日志.应答
//  */
// message GetLogConf {
//     enum LogStatusEnumType {
//         Accepted = 0;
//         Rejected = 1;
//         AcceptedCanceled= 2; // 接受此日志上传，但这样做将取消正在进行的日志文件上传。
//     }
//     LogStatusEnumType status = 1;
// }

// /**
//  * LogStatusNotificationReq
//  * 日志状态通知.请求
//  */
// message LogStatusNotificationReq {
//     enum UploadLogStatusEnumType {
//         BadMessage = 0;
//         Idle = 1;
//         NotSupportedOperation = 2;
//         PermissionDenied = 3;
//         Uploaded = 4;
//         UploadFailure = 5;
//         Uploading = 6;
//         AcceptedCanceled = 7;
//     }
//     UploadLogStatusEnumType status = 1; //状态
//     int32 request_id = 2;//请求id
// }

// /**
//  * LogStatusNotificationConf
//  * 日志状态通知.应答
//  */
// message LogStatusNotificationConf
// {
// }

// /**
//  * GetLocalListVersionRequest
//  * 获取本地授权列表版本.请求
//  */
// message GetLocalListVersionReq
// {
//     int32 version_number = 1;    //版本号
// }

// /**
//  * GetLocalListVersionConf
//  * 获取本地授权列表版本.应答
//  */
// message GetLocalListVersionConf
// {
//     int32 version_number = 1;  //版本号
// }

// enum IdTokenEnumType {
//     ITE_Central = 0; // A centrally, in the CSMS (or other server) generated id (for example used for a remotely started transaction that is activated by SMS). No format defined, might be a UUID.
//     ITE_eMAID = 1; // Electro-mobility account id as defined in ISO 15118
//     ITE_ISO14443 = 2; // ISO 14443 UID of RFID card. It is represented as an array of 4 or 7 bytes in hexadecimal representation.
//     ITE_ISO15693 = 3; // ISO 15693 UID of RFID card. It is represented as an array of 8 bytes in hexadecimal representation.
//     ITE_KeyCode = 4; // User use a private key-code to authorize a charging transaction. For example: Pin-code.
//     ITE_Local = 5; // A locally generated id (e.g. internal id created by the Charging Station). No format defined, might be a UUID
//     ITE_MacAddress = 6;
//     ITE_NoAuthorization = 7; // Transaction is started and no authorization possible. Charging Station only has a start button or mechanical key etc. IdToken field SHALL be left empty.
// }


// message IdTokenInfoType {
//     AuthorizationStatus status = 1;
// }

// //IdTokenType 身份信息，OCPP以及新版本用
// message IdTokenType {
//     string id_token = 1;
//     IdTokenEnumType type = 2;
// }

// //AuthorizationData 授权信息
// message AuthorizationData {
//     IdTokenInfoType idTokenInfo = 1;
//     IdTokenType idToken = 2;
// }


// /**
//  * SendLocalAuthorizationListReq
//  * 发送本地授权.请求
//  */
// message SendLocalAuthorizationListReq
// {
//     int32 version_number = 1;    //版本号
//     enum UpdateEnumType {
//         Differential = 0; //更新不一致的
//         Full = 1; //更新全部
//     }
//     UpdateEnumType update_type = 2; //更新类型
//     repeated AuthorizationData local_authorization_list = 3; //授权列表
// }


// /**
// ModeCardTransfer
// 卡号的转换模式
// */
// enum CardTransferMode
// {
//     CTM_Default	= 0;       //透传，默认
//     CTM_Hex = 1;           //16进制，需要转换成10进制
//     CTM_BigEndSequenceStr = 2;       //大端序字符串
//     CTM_SmallEndSequenceStr = 3;     //小端序字符串
// }

// /**
//  * SendLocalAuthorizationListConf
//  * 发送本地授权.应答
//  */
// message SendLocalAuthorizationListConf
// {
// }
// /**
// ErrorCode
// 定义错误消息错误代码
// */
// enum ErrorCode {
//     EC_GenericError = 0;        //其它错误
//     EC_NotSupported = 1;        //不支持该请求
//     EC_InternalError = 2;       //处理请求时，发生内部错误
//     EC_ProtocolError = 3;       //解析消息payload错误
//     EC_TypeViolation = 4;       //解析消息成功，但有域数据类型不对
// }