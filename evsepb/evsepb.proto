syntax = "proto3";
option go_package = "github.com/zhuoqingbin/pbs/evsepb";

package evsepb;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/zhuoqingbin/pbs/evsepb/types.proto";
import "github.com/zhuoqingbin/pbs/evsepb/evse_ctrl.proto";


// EvseService 设备服务
service EvseService {
    // UpsertEvse 添加设备
    rpc UpsertEvse(Evse) returns (UpsertEvseReply);

    // GetEvseBySN 
    rpc GetEvseBySN(GetEvseBySNReq) returns (GetEvseBySNReply);

    // GetEvseByID 
    rpc GetEvseByID(GetEvseByIDReq) returns (GetEvseByIDReply);

    // GetConnectorByID
    rpc GetConnectorByID(GetConnectorByIDReq) returns (GetConnectorByIDReply);

    // GetConnectorByNO 
    rpc GetConnectorByNO(GetConnectorByNOReq) returns (GetConnectorByNOReply);
    

    // 设备数据交互
    // 
    // EvseStream 设备请求数据流处理
    rpc EvseStream(EvseStreamReq) returns (EvseStreamReply);

    // EvseCtrl 设备控制请求
    rpc EvseCtrl(EvseCtrlReq) returns (EvseCtrlReply);
}

message EvseCtrlReq {
    // 二选一
    uint64 evse_id = 1;
    string sn = 2;
    
    uint32 connector_no = 3;
    EvseCtrlFunction function = 4 [(validator.field) = {int_gt : 0}];
}
message EvseCtrlReply {

}

message EvseStreamReq {
    APDU apdu = 1;
}
message EvseStreamReply {
    EvseProtocolVendor protocol_vendor = 1;
    repeated APDU apdus = 2;
}

message GetConnectorByIDReq {
    uint64 id =1[(validator.field) = {int_gt : 0}];
}
message GetConnectorByIDReply {
    Evse evse = 1;
    Connector connector = 2;
}

message GetConnectorByNOReq {
    // 2选一必须要传
    uint64 evse_id =1;
    string sn = 2;
    int32 cno = 3 [(validator.field) = {int_gt : 0}];
}
message GetConnectorByNOReply {
    Evse evse = 1;
    Connector connector = 2;
}

message GetEvseByIDReq {
    uint64 id =1[(validator.field) = {int_gt : 0}];
    int32  cno = 2; // 设备编号, 编号是0时，查询全部枪头
}
message GetEvseByIDReply {
    Evse evse = 1;
    repeated Connector connectors = 2;
}
message GetEvseBySNReq {
    string sn = 1 [(validator.field) = {string_not_empty : true}];
    int32  cno = 2; // 设备编号, 编号是0时，查询全部枪头
}
message GetEvseBySNReply {
    Evse evse = 1;
    repeated Connector connectors = 2;
}

message UpsertEvseReply {
    Evse evse = 1;
}

message Evse {
    uint64 id =1; // ID
    string sn =2 [(validator.field) = {string_not_empty : true}]; // 序列号
	uint64 operator_id =3; // 运营商ID
	uint64 station_id =4; // 所属站点ID
	string iccid =5; // sim卡识别号
	string mac =6; // mac地址，一般是蓝牙使用
	int32 connector_number =7; // 枪头数量
	EvseState state = 8; // 状态
	string firmware_version = 9; // 固件版本号
	string protocol_version = 10; // 通讯版本号
	EvseProtocolVendor protocol_vendor =11; // 协议厂家
	bool banned = 12; // 是否屏蔽
	uint32 last_activity_time =13; // 最后一次保活时间
	string last_disconnect_reason = 14; // 上次链接断开原因
	int32 alarm_nums =15; // 告警总数
    EvseOperationType evse_operation_type = 16; // 设备运营类型
    int32 current_limit = 17; // 电流限制
    
	// 设备型号信息
    EvseModel evse_model = 18;
	
    // 支持的功能列表开关
	repeated EvseFunction  functions = 19; // 功能开关
}


message Connector {
    uint64 id = 1; // ID
	uint64 evse_id = 2; // 设备ID
	int32 connector_no = 3; // 枪头编号
	string desc = 4; // 枪头描述
	uint64 last_price_id = 5; // 上次设置计费模板的ID，如果一样，就不再下发计费模板命令了
	ConnectorState state = 6; // 枪当前状态
	uint64 order_id = 7; // 平台生成的设备订单号
	string record_id = 8; // 设备上送的订单号
	uint32 power = 9; // 功率, 单位:W 精度:0.01W
	uint32 current_a = 10; // A相电流, 单位:A 精度:0.01A
	uint32 current_b = 11; // B相电流, 单位:A 精度:0.01A
	uint32 current_c = 12; // C相电流, 单位:A 精度:0.01A
	uint32 voltage_a = 13; // A相电压, 单位:V 精度:0.01V
	uint32 voltage_b = 14; // B相电压, 单位:V 精度:0.01V
	uint32 voltage_c = 15; // C相电压, 单位:V 精度:0.01V
	int32 temperature = 16; // 温度, 单位: ℃
}


