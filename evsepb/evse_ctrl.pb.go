//*
//充电站与后台通信协议 protocol buffer源文件，适用于protoc 3
//消息及数据类型定义
//
//版本记录
//V1.0.2 2018-3-28 mooney_yuan@qq.com
//1. 增加MessageID，ID_HeartbeatReq和ID_HeartbeatConf用于充电站和服务器对时
//
//V1.0.1 2018-3-13 mooney_yuan@qq.com
//1. 修改计费模版价格分辨率为0.1分，并去掉timescale字段
//2. 修改消息名SystemTelemetryReq为TelemetryReq
//
//V1.0.0 2018-3-1 mooney_yuan@qq.com

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: github.com/zhuoqingbin/pbs/evsepb/evse_ctrl.proto

package evsepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//MessageID
//消息代码定义
//所有的消息（请求和应答）都定义了消息代码。请求消息的消息代码小于0x80；
//消息代码加上0x80就是对应消息的应答消息代码；错误应答消息代码为0xff。
type MessageID int32

const (
	MessageID_ID_None                 MessageID = 0
	MessageID_ID_BootNotificationReq  MessageID = 1   //启动通知.请求
	MessageID_ID_BootNotificationConf MessageID = 129 //启动通知.应答
	MessageID_ID_HeartbeatReq         MessageID = 2   //心跳.请求
	MessageID_ID_HeartbeatConf        MessageID = 130 //心跳.应答
	MessageID_ID_SetConfigReq         MessageID = 3   //远程设置参数.请求
	MessageID_ID_SetConfigConf        MessageID = 131 //远程设置参数.应答
	MessageID_ID_GetConfigReq         MessageID = 4   //获取设备参数.请求
	MessageID_ID_GetConfigConf        MessageID = 132 //获取设备参数.应答
	MessageID_ID_RemoteControlReq     MessageID = 5   //远程控制.请求
	MessageID_ID_RemoteControlConf    MessageID = 133 //远程控制.应答
	MessageID_ID_OTAReq               MessageID = 6   //远程升级.请求
	MessageID_ID_OTAConf              MessageID = 134 //升级固件.应答
	MessageID_ID_RemoteStartReq       MessageID = 16  //远程启动充电.请求
	MessageID_ID_RemoteStartConf      MessageID = 144 //远程启动充电.应答
	MessageID_ID_StartTransactionReq  MessageID = 18  //充电开始通知.请求
	MessageID_ID_StartTransactionConf MessageID = 146 //充电开始通知.应答
	MessageID_ID_TelemetryReq         MessageID = 33  //遥测.请求
	MessageID_ID_TransactionReq       MessageID = 49  //上报订单 .请求
	MessageID_ID_TransactionConf      MessageID = 177 //上报订单 .应答
	MessageID_ID_WarningReq           MessageID = 51  //上报告警记录.请求
	MessageID_ID_WarningConf          MessageID = 179 //上报告警记录.应答
)

// Enum value maps for MessageID.
var (
	MessageID_name = map[int32]string{
		0:   "ID_None",
		1:   "ID_BootNotificationReq",
		129: "ID_BootNotificationConf",
		2:   "ID_HeartbeatReq",
		130: "ID_HeartbeatConf",
		3:   "ID_SetConfigReq",
		131: "ID_SetConfigConf",
		4:   "ID_GetConfigReq",
		132: "ID_GetConfigConf",
		5:   "ID_RemoteControlReq",
		133: "ID_RemoteControlConf",
		6:   "ID_OTAReq",
		134: "ID_OTAConf",
		16:  "ID_RemoteStartReq",
		144: "ID_RemoteStartConf",
		18:  "ID_StartTransactionReq",
		146: "ID_StartTransactionConf",
		33:  "ID_TelemetryReq",
		49:  "ID_TransactionReq",
		177: "ID_TransactionConf",
		51:  "ID_WarningReq",
		179: "ID_WarningConf",
	}
	MessageID_value = map[string]int32{
		"ID_None":                 0,
		"ID_BootNotificationReq":  1,
		"ID_BootNotificationConf": 129,
		"ID_HeartbeatReq":         2,
		"ID_HeartbeatConf":        130,
		"ID_SetConfigReq":         3,
		"ID_SetConfigConf":        131,
		"ID_GetConfigReq":         4,
		"ID_GetConfigConf":        132,
		"ID_RemoteControlReq":     5,
		"ID_RemoteControlConf":    133,
		"ID_OTAReq":               6,
		"ID_OTAConf":              134,
		"ID_RemoteStartReq":       16,
		"ID_RemoteStartConf":      144,
		"ID_StartTransactionReq":  18,
		"ID_StartTransactionConf": 146,
		"ID_TelemetryReq":         33,
		"ID_TransactionReq":       49,
		"ID_TransactionConf":      177,
		"ID_WarningReq":           51,
		"ID_WarningConf":          179,
	}
)

func (x MessageID) Enum() *MessageID {
	p := new(MessageID)
	*p = x
	return p
}

func (x MessageID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageID) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_enumTypes[0].Descriptor()
}

func (MessageID) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_enumTypes[0]
}

func (x MessageID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageID.Descriptor instead.
func (MessageID) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{0}
}

// APDU 消息报文定义
type APDU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn         string    `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`                                                       // 设备编号
	Timestamp  int32     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                        // 消息unix时间戳
	SequenceId uint64    `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`                    // 定义消息的唯一ID，应答报文中此字段必须与请求报文中的一致，用来匹配请求和应答
	MessageId  MessageID `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3,enum=evsepb.MessageID" json:"message_id,omitempty"` // 消息代码,参考 MessageID 定义
	Payload    []byte    `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`                                             // 消息经protocol buffer序列化后的数据，实际的消息内容
	Extrend    *Extrend  `protobuf:"bytes,6,opt,name=extrend,proto3" json:"extrend,omitempty"`                                             // 扩展字段
}

func (x *APDU) Reset() {
	*x = APDU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APDU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APDU) ProtoMessage() {}

func (x *APDU) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APDU.ProtoReflect.Descriptor instead.
func (*APDU) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{0}
}

func (x *APDU) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *APDU) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *APDU) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *APDU) GetMessageId() MessageID {
	if x != nil {
		return x.MessageId
	}
	return MessageID_ID_None
}

func (x *APDU) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *APDU) GetExtrend() *Extrend {
	if x != nil {
		return x.Extrend
	}
	return nil
}

// 扩展信息
type Extrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoNeedReply bool   `protobuf:"varint,1,opt,name=no_need_reply,json=noNeedReply,proto3" json:"no_need_reply,omitempty"` // 不需要回复
	PassBack    string `protobuf:"bytes,2,opt,name=pass_back,json=passBack,proto3" json:"pass_back,omitempty"`             // 回传信息, 直接回传
}

func (x *Extrend) Reset() {
	*x = Extrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrend) ProtoMessage() {}

func (x *Extrend) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrend.ProtoReflect.Descriptor instead.
func (*Extrend) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{1}
}

func (x *Extrend) GetNoNeedReply() bool {
	if x != nil {
		return x.NoNeedReply
	}
	return false
}

func (x *Extrend) GetPassBack() string {
	if x != nil {
		return x.PassBack
	}
	return ""
}

// DeviceRegistrationReq 注册请求
// Deprecated: 设备注册，统一在后台注册，取消这里的自动注册接口。 改调用GRPC接口注册
type DeviceRegistrationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber         string  `protobuf:"bytes,1,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`                                // 设备型号（用于区分不同类型的桩）
	SerialNumber       string  `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                          // 设备序列号（由工厂生产时烧录）
	VendorId           string  `protobuf:"bytes,3,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`                                      // 供应商代码
	RegistrationCode   string  `protobuf:"bytes,4,opt,name=registration_code,json=registrationCode,proto3" json:"registration_code,omitempty"`              // 注册码（由运营后台生成，分配给工厂，烧录到设备中）
	NeedToEncodeEvseId bool    `protobuf:"varint,5,opt,name=need_to_encode_evse_id,json=needToEncodeEvseId,proto3" json:"need_to_encode_evse_id,omitempty"` // 是否需要转码设备ID
	TopicPrefix        string  `protobuf:"bytes,6,opt,name=topic_prefix,json=topicPrefix,proto3" json:"topic_prefix,omitempty"`                             // topic的前缀
	ProductId          string  `protobuf:"bytes,7,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                   // 产品型号
	ConnectorNumber    int32   `protobuf:"varint,8,opt,name=connector_number,json=connectorNumber,proto3" json:"connector_number,omitempty"`                // 充电接口数量
	ConnectorType      []int32 `protobuf:"varint,9,rep,packed,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`               // 充电接口类型列表，列表第1项为接口1类型，第2项为接口2类型，依次类推
}

func (x *DeviceRegistrationReq) Reset() {
	*x = DeviceRegistrationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistrationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistrationReq) ProtoMessage() {}

func (x *DeviceRegistrationReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistrationReq.ProtoReflect.Descriptor instead.
func (*DeviceRegistrationReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceRegistrationReq) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *DeviceRegistrationReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DeviceRegistrationReq) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DeviceRegistrationReq) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

func (x *DeviceRegistrationReq) GetNeedToEncodeEvseId() bool {
	if x != nil {
		return x.NeedToEncodeEvseId
	}
	return false
}

func (x *DeviceRegistrationReq) GetTopicPrefix() string {
	if x != nil {
		return x.TopicPrefix
	}
	return ""
}

func (x *DeviceRegistrationReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *DeviceRegistrationReq) GetConnectorNumber() int32 {
	if x != nil {
		return x.ConnectorNumber
	}
	return 0
}

func (x *DeviceRegistrationReq) GetConnectorType() []int32 {
	if x != nil {
		return x.ConnectorType
	}
	return nil
}

// 注册应答
type DeviceRegistrationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                //返回中心平台注册状态
	DeviceCode   string   `protobuf:"bytes,2,opt,name=device_code,json=deviceCode,proto3" json:"device_code,omitempty"`       //中心平台分配的设备识别码
	MqttUsername string   `protobuf:"bytes,3,opt,name=mqtt_username,json=mqttUsername,proto3" json:"mqtt_username,omitempty"` //mqtt的用户名
	MqttPassword string   `protobuf:"bytes,4,opt,name=mqtt_password,json=mqttPassword,proto3" json:"mqtt_password,omitempty"` //mqtt的密码
	QrcodeHost   string   `protobuf:"bytes,5,opt,name=qrcode_host,json=qrcodeHost,proto3" json:"qrcode_host,omitempty"`       //QRcode host
	Qrcodes      []string `protobuf:"bytes,6,rep,name=qrcodes,proto3" json:"qrcodes,omitempty"`                               //二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
}

func (x *DeviceRegistrationConf) Reset() {
	*x = DeviceRegistrationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistrationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistrationConf) ProtoMessage() {}

func (x *DeviceRegistrationConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistrationConf.ProtoReflect.Descriptor instead.
func (*DeviceRegistrationConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceRegistrationConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceRegistrationConf) GetDeviceCode() string {
	if x != nil {
		return x.DeviceCode
	}
	return ""
}

func (x *DeviceRegistrationConf) GetMqttUsername() string {
	if x != nil {
		return x.MqttUsername
	}
	return ""
}

func (x *DeviceRegistrationConf) GetMqttPassword() string {
	if x != nil {
		return x.MqttPassword
	}
	return ""
}

func (x *DeviceRegistrationConf) GetQrcodeHost() string {
	if x != nil {
		return x.QrcodeHost
	}
	return ""
}

func (x *DeviceRegistrationConf) GetQrcodes() []string {
	if x != nil {
		return x.Qrcodes
	}
	return nil
}

// BootNotificationReq
// 启动通知请求消息定义
type BootNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseModel       *EvseModel         `protobuf:"bytes,1,opt,name=evse_model,json=evseModel,proto3" json:"evse_model,omitempty"`
	FirmwareVersion string             `protobuf:"bytes,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`                              // 固件版本号
	ProtocolVersion string             `protobuf:"bytes,3,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`                              // 通讯版本号
	ProtocolVendor  EvseProtocolVendor `protobuf:"varint,4,opt,name=protocol_vendor,json=protocolVendor,proto3,enum=evsepb.EvseProtocolVendor" json:"protocol_vendor,omitempty"` // 协议厂家
	ConnectorNumber int32              `protobuf:"varint,5,opt,name=connector_number,json=connectorNumber,proto3" json:"connector_number,omitempty"`                             // 充电接口数量
	Iccid           string             `protobuf:"bytes,6,opt,name=iccid,proto3" json:"iccid,omitempty"`                                                                         // SIM卡识别号(ICCID (21Bytes)/ TMSI 16(Bytes))
	Mac             string             `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`                                                                             // mac地址
	Functions       []EvseFunction     `protobuf:"varint,18,rep,packed,name=functions,proto3,enum=evsepb.EvseFunction" json:"functions,omitempty"`                               // 功能开关
}

func (x *BootNotificationReq) Reset() {
	*x = BootNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootNotificationReq) ProtoMessage() {}

func (x *BootNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootNotificationReq.ProtoReflect.Descriptor instead.
func (*BootNotificationReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{4}
}

func (x *BootNotificationReq) GetEvseModel() *EvseModel {
	if x != nil {
		return x.EvseModel
	}
	return nil
}

func (x *BootNotificationReq) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *BootNotificationReq) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *BootNotificationReq) GetProtocolVendor() EvseProtocolVendor {
	if x != nil {
		return x.ProtocolVendor
	}
	return EvseProtocolVendor_EPV_UNKNOWN
}

func (x *BootNotificationReq) GetConnectorNumber() int32 {
	if x != nil {
		return x.ConnectorNumber
	}
	return 0
}

func (x *BootNotificationReq) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *BootNotificationReq) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *BootNotificationReq) GetFunctions() []EvseFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

// BootNotificationConf
// 启动通知应答消息定义
type BootNotificationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval int32    `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"` // 心跳时间间隔（秒）
	Status   int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`     // 返回中心平台登录状态
	Qrcodes  []string `protobuf:"bytes,3,rep,name=qrcodes,proto3" json:"qrcodes,omitempty"`    // 二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
}

func (x *BootNotificationConf) Reset() {
	*x = BootNotificationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootNotificationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootNotificationConf) ProtoMessage() {}

func (x *BootNotificationConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootNotificationConf.ProtoReflect.Descriptor instead.
func (*BootNotificationConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{5}
}

func (x *BootNotificationConf) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *BootNotificationConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BootNotificationConf) GetQrcodes() []string {
	if x != nil {
		return x.Qrcodes
	}
	return nil
}

// HeartbeatResp
// 心跳请求
type HeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{6}
}

// HeartbeatResp
// 心跳回复
type HeartbeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResp) Reset() {
	*x = HeartbeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResp) ProtoMessage() {}

func (x *HeartbeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResp.ProtoReflect.Descriptor instead.
func (*HeartbeatResp) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{7}
}

// SampledValue 遥测项
type SampledValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurand Measurand `protobuf:"varint,1,opt,name=measurand,proto3,enum=evsepb.Measurand" json:"measurand,omitempty"` // 遥测变量代码
	Value     int32     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`                               // 遥测值
}

func (x *SampledValue) Reset() {
	*x = SampledValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampledValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledValue) ProtoMessage() {}

func (x *SampledValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampledValue.ProtoReflect.Descriptor instead.
func (*SampledValue) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{8}
}

func (x *SampledValue) GetMeasurand() Measurand {
	if x != nil {
		return x.Measurand
	}
	return Measurand_MUnknown
}

func (x *SampledValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// TelemetryReq 遥测.请求
type TelemetryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorNo int32           `protobuf:"varint,1,opt,name=connector_no,json=connectorNo,proto3" json:"connector_no,omitempty"` //充电接口，若测量组件属于某个充电接口，如某个接口的电表，填对应的充电接口号
	RecordId    string          `protobuf:"bytes,7,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`           //跟订单相关的遥测信息，才有recordId相关联充电订单号
	Values      []*SampledValue `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`                               //遥测值集合
}

func (x *TelemetryReq) Reset() {
	*x = TelemetryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryReq) ProtoMessage() {}

func (x *TelemetryReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryReq.ProtoReflect.Descriptor instead.
func (*TelemetryReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{9}
}

func (x *TelemetryReq) GetConnectorNo() int32 {
	if x != nil {
		return x.ConnectorNo
	}
	return 0
}

func (x *TelemetryReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *TelemetryReq) GetValues() []*SampledValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// SetEvseConfigReq 远程设置参数请求消息定义
type SetEvseConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfiguKey []*EvseConfigKV `protobuf:"bytes,1,rep,name=configu_key,json=configuKey,proto3" json:"configu_key,omitempty"` //设置参数列表
}

func (x *SetEvseConfigReq) Reset() {
	*x = SetEvseConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEvseConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEvseConfigReq) ProtoMessage() {}

func (x *SetEvseConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEvseConfigReq.ProtoReflect.Descriptor instead.
func (*SetEvseConfigReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{10}
}

func (x *SetEvseConfigReq) GetConfiguKey() []*EvseConfigKV {
	if x != nil {
		return x.ConfiguKey
	}
	return nil
}

// SetEvseConfigConf 远程设置参数应答消息定义
type SetEvseConfigConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SetConfigurationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=evsepb.SetConfigurationStatus" json:"status,omitempty"` //设置参数返回值
}

func (x *SetEvseConfigConf) Reset() {
	*x = SetEvseConfigConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEvseConfigConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEvseConfigConf) ProtoMessage() {}

func (x *SetEvseConfigConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEvseConfigConf.ProtoReflect.Descriptor instead.
func (*SetEvseConfigConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{11}
}

func (x *SetEvseConfigConf) GetStatus() SetConfigurationStatus {
	if x != nil {
		return x.Status
	}
	return SetConfigurationStatus_CFS_Accepted
}

// GetConfigurationReq 获取设备参数请求消息定义
type GetEvseConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*EvseConfigKV `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"` //获取参数列表，协议标准参数通过KeyValue对象的key域指定
}

func (x *GetEvseConfigReq) Reset() {
	*x = GetEvseConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvseConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvseConfigReq) ProtoMessage() {}

func (x *GetEvseConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvseConfigReq.ProtoReflect.Descriptor instead.
func (*GetEvseConfigReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{12}
}

func (x *GetEvseConfigReq) GetKeys() []*EvseConfigKV {
	if x != nil {
		return x.Keys
	}
	return nil
}

// GetConfigurationConf 获取设备参数请求消息定义
type GetEvseConfigConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*EvseConfigKV `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` //获取参数返回值列表，当获取的参数不存在时，KeyValue对象的value域为空
}

func (x *GetEvseConfigConf) Reset() {
	*x = GetEvseConfigConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvseConfigConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvseConfigConf) ProtoMessage() {}

func (x *GetEvseConfigConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvseConfigConf.ProtoReflect.Descriptor instead.
func (*GetEvseConfigConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{13}
}

func (x *GetEvseConfigConf) GetValues() []*EvseConfigKV {
	if x != nil {
		return x.Values
	}
	return nil
}

// RemoteControlReq 远程控制请求消息定义
type RemoteControlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function  EvseCtrlFunction `protobuf:"varint,1,opt,name=function,proto3,enum=evsepb.EvseCtrlFunction" json:"function,omitempty"` //远程控制功能，协议标准功能参考远程控制功能列表
	Cno       uint32           `protobuf:"varint,2,opt,name=cno,proto3" json:"cno,omitempty"`                                        // 枪头号，0 表示设备
	Parameter string           `protobuf:"bytes,3,opt,name=parameter,proto3" json:"parameter,omitempty"`                             // 附加参数, json格式
}

func (x *RemoteControlReq) Reset() {
	*x = RemoteControlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlReq) ProtoMessage() {}

func (x *RemoteControlReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlReq.ProtoReflect.Descriptor instead.
func (*RemoteControlReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{14}
}

func (x *RemoteControlReq) GetFunction() EvseCtrlFunction {
	if x != nil {
		return x.Function
	}
	return EvseCtrlFunction_ECF_UNKNOWN
}

func (x *RemoteControlReq) GetCno() uint32 {
	if x != nil {
		return x.Cno
	}
	return 0
}

func (x *RemoteControlReq) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

// RemoteControlConf 远程控制应答消息定义
type RemoteControlConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //远程控制返回状态
}

func (x *RemoteControlConf) Reset() {
	*x = RemoteControlConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlConf) ProtoMessage() {}

func (x *RemoteControlConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlConf.ProtoReflect.Descriptor instead.
func (*RemoteControlConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{15}
}

func (x *RemoteControlConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 远程控制时
type RemoteControlStartParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Current int32  `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *RemoteControlStartParam) Reset() {
	*x = RemoteControlStartParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlStartParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlStartParam) ProtoMessage() {}

func (x *RemoteControlStartParam) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlStartParam.ProtoReflect.Descriptor instead.
func (*RemoteControlStartParam) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{16}
}

func (x *RemoteControlStartParam) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemoteControlStartParam) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

// TransactionReq 上报订单请求 消息上报充电记录定义
type TransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId        string            `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`                                   // 充电桩充电记录号
	TransactionId   string            `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                    // 中心平台生成的充电交易号
	ConnectorNo     int32             `protobuf:"varint,3,opt,name=connector_no,json=connectorNo,proto3" json:"connector_no,omitempty"`                         // 充电接口号
	AuthMode        AuthorizationMode `protobuf:"varint,4,opt,name=auth_mode,json=authMode,proto3,enum=evsepb.AuthorizationMode" json:"auth_mode,omitempty"`    //授权启动充电方式
	AuthId          string            `protobuf:"bytes,5,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`                                         // 授权启动ID
	ServiceMode     ServiceMode       `protobuf:"varint,6,opt,name=service_mode,json=serviceMode,proto3,enum=evsepb.ServiceMode" json:"service_mode,omitempty"` //充电服务模式
	ServiceAmount   int32             `protobuf:"varint,7,opt,name=service_amount,json=serviceAmount,proto3" json:"service_amount,omitempty"`                   // 充电量/钱/时间。对应充电服务模式中的按电量充电，按金额充电，按时间充电，自动充满进行赋值
	MeterStart      int32             `protobuf:"varint,8,opt,name=meter_start,json=meterStart,proto3" json:"meter_start,omitempty"`                            //充电开始时电表度数，分辨率0.001kwh
	MeterStop       int32             `protobuf:"varint,9,opt,name=meter_stop,json=meterStop,proto3" json:"meter_stop,omitempty"`                               //充电结束时电表度数，分辨率0.001kwh
	TimeStart       int32             `protobuf:"varint,10,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`                              //充电订单开始时间，时间戳，精度：秒
	TimeStop        int32             `protobuf:"varint,11,opt,name=time_stop,json=timeStop,proto3" json:"time_stop,omitempty"`                                 //充电订单结束时间，时间戳，精度：秒
	ChargeStartTime int32             `protobuf:"varint,12,opt,name=charge_start_time,json=chargeStartTime,proto3" json:"charge_start_time,omitempty"`          //真正充电开始时间，时间戳，精度：秒
	ChargeStopTime  int32             `protobuf:"varint,13,opt,name=charge_stop_time,json=chargeStopTime,proto3" json:"charge_stop_time,omitempty"`             //充电结束时间，时间戳，精度：秒
	StartSoc        uint32            `protobuf:"varint,14,opt,name=start_soc,json=startSoc,proto3" json:"start_soc,omitempty"`                                 //启动soc 直流有用
	StopSoc         uint32            `protobuf:"varint,15,opt,name=stop_soc,json=stopSoc,proto3" json:"stop_soc,omitempty"`                                    //结束soc 直流有用
	Reason          StopReason        `protobuf:"varint,16,opt,name=reason,proto3,enum=evsepb.StopReason" json:"reason,omitempty"`                              //充电结束原因。用户远程结束，本地结束，异常结束等。
	ReasonDesc      string            `protobuf:"bytes,17,opt,name=reason_desc,json=reasonDesc,proto3" json:"reason_desc,omitempty"`                            //停止理由描述
	TariffId        uint64            `protobuf:"varint,18,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`                                 //计费模版信息
	Cost            *TransactionCost  `protobuf:"bytes,19,opt,name=cost,proto3" json:"cost,omitempty"`                                                          //计费账单信息
}

func (x *TransactionReq) Reset() {
	*x = TransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReq) ProtoMessage() {}

func (x *TransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReq.ProtoReflect.Descriptor instead.
func (*TransactionReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *TransactionReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionReq) GetConnectorNo() int32 {
	if x != nil {
		return x.ConnectorNo
	}
	return 0
}

func (x *TransactionReq) GetAuthMode() AuthorizationMode {
	if x != nil {
		return x.AuthMode
	}
	return AuthorizationMode_AM_LOCAL_PLUG
}

func (x *TransactionReq) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *TransactionReq) GetServiceMode() ServiceMode {
	if x != nil {
		return x.ServiceMode
	}
	return ServiceMode_SM_AUTO_CHARGE
}

func (x *TransactionReq) GetServiceAmount() int32 {
	if x != nil {
		return x.ServiceAmount
	}
	return 0
}

func (x *TransactionReq) GetMeterStart() int32 {
	if x != nil {
		return x.MeterStart
	}
	return 0
}

func (x *TransactionReq) GetMeterStop() int32 {
	if x != nil {
		return x.MeterStop
	}
	return 0
}

func (x *TransactionReq) GetTimeStart() int32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *TransactionReq) GetTimeStop() int32 {
	if x != nil {
		return x.TimeStop
	}
	return 0
}

func (x *TransactionReq) GetChargeStartTime() int32 {
	if x != nil {
		return x.ChargeStartTime
	}
	return 0
}

func (x *TransactionReq) GetChargeStopTime() int32 {
	if x != nil {
		return x.ChargeStopTime
	}
	return 0
}

func (x *TransactionReq) GetStartSoc() uint32 {
	if x != nil {
		return x.StartSoc
	}
	return 0
}

func (x *TransactionReq) GetStopSoc() uint32 {
	if x != nil {
		return x.StopSoc
	}
	return 0
}

func (x *TransactionReq) GetReason() StopReason {
	if x != nil {
		return x.Reason
	}
	return StopReason_SR_Normal
}

func (x *TransactionReq) GetReasonDesc() string {
	if x != nil {
		return x.ReasonDesc
	}
	return ""
}

func (x *TransactionReq) GetTariffId() uint64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *TransactionReq) GetCost() *TransactionCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

// TransactionCost
type TransactionCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TariffId           uint64                   `protobuf:"varint,1,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`                                 // 计费模版id
	TotalElec          uint32                   `protobuf:"varint,2,opt,name=total_elec,json=totalElec,proto3" json:"total_elec,omitempty"`                              // 计费总电量
	TotalAmount        uint32                   `protobuf:"varint,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`                        // 充电总费用
	TotalElecAmount    uint32                   `protobuf:"varint,4,opt,name=total_elec_amount,json=totalElecAmount,proto3" json:"total_elec_amount,omitempty"`          // 总电费
	TotalServiceAmount uint32                   `protobuf:"varint,5,opt,name=total_service_amount,json=totalServiceAmount,proto3" json:"total_service_amount,omitempty"` // 总服务费
	Details            []*TransactionCostDetail `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`                                                    // 费用明细
	ConflictTotalCost  int32                    `protobuf:"varint,7,opt,name=conflict_total_cost,json=conflictTotalCost,proto3" json:"conflict_total_cost,omitempty"`    //费用冲突，一般用于核算费用，核算分段计费与总消费不一致的情况，如果一致则此字段为默认值0
}

func (x *TransactionCost) Reset() {
	*x = TransactionCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCost) ProtoMessage() {}

func (x *TransactionCost) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCost.ProtoReflect.Descriptor instead.
func (*TransactionCost) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{18}
}

func (x *TransactionCost) GetTariffId() uint64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *TransactionCost) GetTotalElec() uint32 {
	if x != nil {
		return x.TotalElec
	}
	return 0
}

func (x *TransactionCost) GetTotalAmount() uint32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TransactionCost) GetTotalElecAmount() uint32 {
	if x != nil {
		return x.TotalElecAmount
	}
	return 0
}

func (x *TransactionCost) GetTotalServiceAmount() uint32 {
	if x != nil {
		return x.TotalServiceAmount
	}
	return 0
}

func (x *TransactionCost) GetDetails() []*TransactionCostDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TransactionCost) GetConflictTotalCost() int32 {
	if x != nil {
		return x.ConflictTotalCost
	}
	return 0
}

// TransactionCostDetail 计费模版相关，充电消费账单消息定义
type TransactionCostDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag          EvseOrderSectionTag `protobuf:"varint,1,opt,name=tag,proto3,enum=evsepb.EvseOrderSectionTag" json:"tag,omitempty"` //分段标签，比如"尖"，"峰"，"平"，"谷"
	Timestart    int32               `protobuf:"varint,2,opt,name=timestart,proto3" json:"timestart,omitempty"`                     //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
	Timeend      int32               `protobuf:"varint,3,opt,name=timeend,proto3" json:"timeend,omitempty"`                         //分段费率结束时间，同上
	Electric     int32               `protobuf:"varint,4,opt,name=electric,proto3" json:"electric,omitempty"`                       //该分段所消耗电量
	Electriccost int32               `protobuf:"varint,5,opt,name=electriccost,proto3" json:"electriccost,omitempty"`               //该分段所消费电量电费,单位分
	Servicecost  int32               `protobuf:"varint,6,opt,name=servicecost,proto3" json:"servicecost,omitempty"`                 //该分段所消费服务费,单位分
	Occupycost   int32               `protobuf:"varint,7,opt,name=occupycost,proto3" json:"occupycost,omitempty"`                   //按分段所消费停车费,单位分
}

func (x *TransactionCostDetail) Reset() {
	*x = TransactionCostDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionCostDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCostDetail) ProtoMessage() {}

func (x *TransactionCostDetail) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCostDetail.ProtoReflect.Descriptor instead.
func (*TransactionCostDetail) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{19}
}

func (x *TransactionCostDetail) GetTag() EvseOrderSectionTag {
	if x != nil {
		return x.Tag
	}
	return EvseOrderSectionTag_OST_UNKNOWN
}

func (x *TransactionCostDetail) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TransactionCostDetail) GetTimeend() int32 {
	if x != nil {
		return x.Timeend
	}
	return 0
}

func (x *TransactionCostDetail) GetElectric() int32 {
	if x != nil {
		return x.Electric
	}
	return 0
}

func (x *TransactionCostDetail) GetElectriccost() int32 {
	if x != nil {
		return x.Electriccost
	}
	return 0
}

func (x *TransactionCostDetail) GetServicecost() int32 {
	if x != nil {
		return x.Servicecost
	}
	return 0
}

func (x *TransactionCostDetail) GetOccupycost() int32 {
	if x != nil {
		return x.Occupycost
	}
	return 0
}

// TransactionConf 离线记录上送回复
type TransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`    //状态
	RecordId string `protobuf:"bytes,2,opt,name=recordId,proto3" json:"recordId,omitempty"` //回复的设备订单号
}

func (x *TransactionConf) Reset() {
	*x = TransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionConf) ProtoMessage() {}

func (x *TransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionConf.ProtoReflect.Descriptor instead.
func (*TransactionConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{20}
}

func (x *TransactionConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionConf) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

// OTAReq 远程升级请求消息定义
type OTAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                               //升级文件ftp服务器地址
	Checksum      string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`                     //升级文件md5校验值
	Retries       int32  `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`                      //设备下载失败重试次数
	RetryDate     int32  `protobuf:"varint,4,opt,name=retryDate,proto3" json:"retryDate,omitempty"`                  //执行升级的时间,时间戳类型类型
	RetryInterval int32  `protobuf:"varint,5,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`          //重试间隔时间，单位秒
	RequestId     int32  `protobuf:"varint,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` //升级ID
}

func (x *OTAReq) Reset() {
	*x = OTAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAReq) ProtoMessage() {}

func (x *OTAReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAReq.ProtoReflect.Descriptor instead.
func (*OTAReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{21}
}

func (x *OTAReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OTAReq) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *OTAReq) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *OTAReq) GetRetryDate() int32 {
	if x != nil {
		return x.RetryDate
	}
	return 0
}

func (x *OTAReq) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *OTAReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// OTAConf 远程升级应答
type OTAConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status OTAConfStatus `protobuf:"varint,1,opt,name=status,proto3,enum=evsepb.OTAConfStatus" json:"status,omitempty"`
}

func (x *OTAConf) Reset() {
	*x = OTAConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAConf) ProtoMessage() {}

func (x *OTAConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAConf.ProtoReflect.Descriptor instead.
func (*OTAConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{22}
}

func (x *OTAConf) GetStatus() OTAConfStatus {
	if x != nil {
		return x.Status
	}
	return OTAConfStatus_Accepted
}

// EvseWarningReq 设备告警请求
type EvseWarningReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  EvseWarningCode  `protobuf:"varint,1,opt,name=code,proto3,enum=evsepb.EvseWarningCode" json:"code,omitempty"`    //告警代码
	Level EvseWarningLevel `protobuf:"varint,3,opt,name=level,proto3,enum=evsepb.EvseWarningLevel" json:"level,omitempty"` //指定告警等级
	// Components component = 4;  //告警所属的组件，组件包括系统，计费控制单元，充电控制单元，电源模块，BMS等
	RecordId    string `protobuf:"bytes,5,opt,name=recordId,proto3" json:"recordId,omitempty"`                //告警所关联的充电会话记录号
	Info        string `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`                        //告警信息。对于供应商自定义的告警，可以在此填充告警相关信息。
	ConnectorId int32  `protobuf:"varint,8,opt,name=connectorId,proto3" json:"connectorId,omitempty"`         //充电接口号
	ComponentId int32  `protobuf:"varint,9,opt,name=componentId,proto3" json:"componentId,omitempty"`         //组件号
	Ttl         int32  `protobuf:"varint,10,opt,name=ttl,proto3" json:"ttl,omitempty"`                        // -1 永远存储; 0  删除告警; >0 存储告警时长(秒),超过自动解除告警
	EventId     uint64 `protobuf:"varint,11,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` //事件ID
	Time        int32  `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`                      //告警时间
}

func (x *EvseWarningReq) Reset() {
	*x = EvseWarningReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseWarningReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseWarningReq) ProtoMessage() {}

func (x *EvseWarningReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseWarningReq.ProtoReflect.Descriptor instead.
func (*EvseWarningReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{23}
}

func (x *EvseWarningReq) GetCode() EvseWarningCode {
	if x != nil {
		return x.Code
	}
	return EvseWarningCode_Other
}

func (x *EvseWarningReq) GetLevel() EvseWarningLevel {
	if x != nil {
		return x.Level
	}
	return EvseWarningLevel_WL_Critical
}

func (x *EvseWarningReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *EvseWarningReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *EvseWarningReq) GetConnectorId() int32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *EvseWarningReq) GetComponentId() int32 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *EvseWarningReq) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *EvseWarningReq) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *EvseWarningReq) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

//*
// WarningConf
type WarningConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WarningConf) Reset() {
	*x = WarningConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningConf) ProtoMessage() {}

func (x *WarningConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningConf.ProtoReflect.Descriptor instead.
func (*WarningConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{24}
}

// RemoteStartReq 远程启动充电请求消息定义
type RemoteStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string            `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                    // 中心平台生成的订单号
	Cno           int32             `protobuf:"varint,2,opt,name=cno,proto3" json:"cno,omitempty"`                                                            // 充电接口号，必须大于0。若充电桩只有一个接口，可以不填
	ServiceMode   ServiceMode       `protobuf:"varint,3,opt,name=service_mode,json=serviceMode,proto3,enum=evsepb.ServiceMode" json:"service_mode,omitempty"` // 服务模式。按电量充电，按金额充电，按时间充电，自动充满 ，按电量放电，自动放电
	ServiceValue  int64             `protobuf:"varint,4,opt,name=service_value,json=serviceValue,proto3" json:"service_value,omitempty"`                      // 服务模式参数, 最大允许充电时间，单位秒, 最大允许充电电量，分辨率0.01kwh, 最大允许充电金额，单位分
	AuthMode      AuthorizationMode `protobuf:"varint,5,opt,name=auth_mode,json=authMode,proto3,enum=evsepb.AuthorizationMode" json:"auth_mode,omitempty"`    // 授权模式
	AuthId        string            `protobuf:"bytes,6,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`                                         // 授权ID
	Current       uint32            `protobuf:"varint,7,opt,name=current,proto3" json:"current,omitempty"`                                                    // 有序充电，设置电流
	TimingStart   int32             `protobuf:"varint,8,opt,name=timing_start,json=timingStart,proto3" json:"timing_start,omitempty"`                         // 定时启动时间。充电将在设定的时间启动。如果为0或者未填，立即启动充电
}

func (x *RemoteStartReq) Reset() {
	*x = RemoteStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartReq) ProtoMessage() {}

func (x *RemoteStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartReq.ProtoReflect.Descriptor instead.
func (*RemoteStartReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{25}
}

func (x *RemoteStartReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RemoteStartReq) GetCno() int32 {
	if x != nil {
		return x.Cno
	}
	return 0
}

func (x *RemoteStartReq) GetServiceMode() ServiceMode {
	if x != nil {
		return x.ServiceMode
	}
	return ServiceMode_SM_AUTO_CHARGE
}

func (x *RemoteStartReq) GetServiceValue() int64 {
	if x != nil {
		return x.ServiceValue
	}
	return 0
}

func (x *RemoteStartReq) GetAuthMode() AuthorizationMode {
	if x != nil {
		return x.AuthMode
	}
	return AuthorizationMode_AM_LOCAL_PLUG
}

func (x *RemoteStartReq) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *RemoteStartReq) GetCurrent() uint32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *RemoteStartReq) GetTimingStart() int32 {
	if x != nil {
		return x.TimingStart
	}
	return 0
}

// RemoteStartConf 远程启动充电应答消息定义
type RemoteStartConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int32      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                          // 充电请求，充电桩返回状态
	Reason     StopReason `protobuf:"varint,2,opt,name=reason,proto3,enum=evsepb.StopReason" json:"reason,omitempty"`   // 充电结束原因。
	ReasonDesc string     `protobuf:"bytes,3,opt,name=reason_desc,json=reasonDesc,proto3" json:"reason_desc,omitempty"` // 停止理由描述
	RecordId   string     `protobuf:"bytes,4,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`       // 设备流水号
}

func (x *RemoteStartConf) Reset() {
	*x = RemoteStartConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartConf) ProtoMessage() {}

func (x *RemoteStartConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartConf.ProtoReflect.Descriptor instead.
func (*RemoteStartConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{26}
}

func (x *RemoteStartConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RemoteStartConf) GetReason() StopReason {
	if x != nil {
		return x.Reason
	}
	return StopReason_SR_Normal
}

func (x *RemoteStartConf) GetReasonDesc() string {
	if x != nil {
		return x.ReasonDesc
	}
	return ""
}

func (x *RemoteStartConf) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

// StartTransactionReq 充电开始通知请求消息定义
type StartTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId      string            `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`                                   // 充电桩充电记录号
	ConnectorNo   int32             `protobuf:"varint,2,opt,name=connector_no,json=connectorNo,proto3" json:"connector_no,omitempty"`                         // 充电接口号，必须大于0。若充电桩只有一个接口，可以不填
	AuthMode      AuthorizationMode `protobuf:"varint,3,opt,name=auth_mode,json=authMode,proto3,enum=evsepb.AuthorizationMode" json:"auth_mode,omitempty"`    // 授权启动充电方式
	AuthId        string            `protobuf:"bytes,4,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`                                         //  授权启动ID
	ServiceMode   ServiceMode       `protobuf:"varint,5,opt,name=service_mode,json=serviceMode,proto3,enum=evsepb.ServiceMode" json:"service_mode,omitempty"` // 充电服务模式。按电量充电，按金额充电，按时间充电，自动充满等
	ServiceAmount int32             `protobuf:"varint,6,opt,name=service_amount,json=serviceAmount,proto3" json:"service_amount,omitempty"`                   // 充电量/钱/时间。对应充电服务模式中的按电量充电，按金额充电，按时间充电，自动充满进行赋值
	MeterStart    int32             `protobuf:"varint,7,opt,name=meter_start,json=meterStart,proto3" json:"meter_start,omitempty"`                            // 充电开始时电表度数，分辨率0.01kwh
	TimeStart     int32             `protobuf:"varint,8,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`                               // 充电开始时间,时间戳
	Soc           uint32            `protobuf:"varint,14,opt,name=soc,proto3" json:"soc,omitempty"`                                                           // 启动电量的SOC
	TariffId      uint64            `protobuf:"varint,10,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`                                 // 计费模版ID。此订单将使用对应的计费模版计费
}

func (x *StartTransactionReq) Reset() {
	*x = StartTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransactionReq) ProtoMessage() {}

func (x *StartTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransactionReq.ProtoReflect.Descriptor instead.
func (*StartTransactionReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{27}
}

func (x *StartTransactionReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *StartTransactionReq) GetConnectorNo() int32 {
	if x != nil {
		return x.ConnectorNo
	}
	return 0
}

func (x *StartTransactionReq) GetAuthMode() AuthorizationMode {
	if x != nil {
		return x.AuthMode
	}
	return AuthorizationMode_AM_LOCAL_PLUG
}

func (x *StartTransactionReq) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *StartTransactionReq) GetServiceMode() ServiceMode {
	if x != nil {
		return x.ServiceMode
	}
	return ServiceMode_SM_AUTO_CHARGE
}

func (x *StartTransactionReq) GetServiceAmount() int32 {
	if x != nil {
		return x.ServiceAmount
	}
	return 0
}

func (x *StartTransactionReq) GetMeterStart() int32 {
	if x != nil {
		return x.MeterStart
	}
	return 0
}

func (x *StartTransactionReq) GetTimeStart() int32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *StartTransactionReq) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *StartTransactionReq) GetTariffId() uint64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

// StartTransactionConf 充电开始通知应答消息定义
type StartTransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 平台中心生成的订单号, 0 表示需要停止充电
	RecordId      string `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`                 // 充电桩充电记录号
}

func (x *StartTransactionConf) Reset() {
	*x = StartTransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransactionConf) ProtoMessage() {}

func (x *StartTransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransactionConf.ProtoReflect.Descriptor instead.
func (*StartTransactionConf) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP(), []int{28}
}

func (x *StartTransactionConf) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *StartTransactionConf) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

var File_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto protoreflect.FileDescriptor

var file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73,
	0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x1a,
	0x31, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73, 0x2f,
	0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x04, 0x41, 0x50, 0x44, 0x55, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x22, 0x4a, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6e, 0x6f, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x22, 0xef, 0x02,
	0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd6, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x71, 0x74, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x42, 0x6f, 0x6f,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x30, 0x0a, 0x0a, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x65, 0x76, 0x73, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x32, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x0a, 0x0c, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x7c, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x49, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x73, 0x65,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x56, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x56,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2c, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b,
	0x56, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x43, 0x74, 0x72,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x6e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x4c, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc8,
	0x05, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x73, 0x6f, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x53,
	0x6f, 0x63, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c,
	0x65, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x06, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x07, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa2, 0x02,
	0x0a, 0x0e, 0x45, 0x76, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x22, 0xb4, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x6f, 0x12, 0x36, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xf4,
	0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x73, 0x65,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x2a, 0x81, 0x04, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x44, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x44, 0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x44, 0x5f, 0x42,
	0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x10, 0x81, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x49,
	0x44, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x10,
	0x82, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x44, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x83, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x84, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x85, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0a, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x86, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x90, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x44,
	0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x92, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x10, 0x21, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x44, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x10, 0x31, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb1, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x44, 0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x10, 0x33,
	0x12, 0x13, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x10, 0xb3, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescOnce sync.Once
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescData = file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDesc
)

func file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescGZIP() []byte {
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescOnce.Do(func() {
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescData)
	})
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDescData
}

var file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_goTypes = []interface{}{
	(MessageID)(0),                  // 0: evsepb.MessageID
	(*APDU)(nil),                    // 1: evsepb.APDU
	(*Extrend)(nil),                 // 2: evsepb.Extrend
	(*DeviceRegistrationReq)(nil),   // 3: evsepb.DeviceRegistrationReq
	(*DeviceRegistrationConf)(nil),  // 4: evsepb.DeviceRegistrationConf
	(*BootNotificationReq)(nil),     // 5: evsepb.BootNotificationReq
	(*BootNotificationConf)(nil),    // 6: evsepb.BootNotificationConf
	(*HeartbeatReq)(nil),            // 7: evsepb.HeartbeatReq
	(*HeartbeatResp)(nil),           // 8: evsepb.HeartbeatResp
	(*SampledValue)(nil),            // 9: evsepb.SampledValue
	(*TelemetryReq)(nil),            // 10: evsepb.TelemetryReq
	(*SetEvseConfigReq)(nil),        // 11: evsepb.SetEvseConfigReq
	(*SetEvseConfigConf)(nil),       // 12: evsepb.SetEvseConfigConf
	(*GetEvseConfigReq)(nil),        // 13: evsepb.GetEvseConfigReq
	(*GetEvseConfigConf)(nil),       // 14: evsepb.GetEvseConfigConf
	(*RemoteControlReq)(nil),        // 15: evsepb.RemoteControlReq
	(*RemoteControlConf)(nil),       // 16: evsepb.RemoteControlConf
	(*RemoteControlStartParam)(nil), // 17: evsepb.RemoteControlStartParam
	(*TransactionReq)(nil),          // 18: evsepb.TransactionReq
	(*TransactionCost)(nil),         // 19: evsepb.TransactionCost
	(*TransactionCostDetail)(nil),   // 20: evsepb.TransactionCostDetail
	(*TransactionConf)(nil),         // 21: evsepb.TransactionConf
	(*OTAReq)(nil),                  // 22: evsepb.OTAReq
	(*OTAConf)(nil),                 // 23: evsepb.OTAConf
	(*EvseWarningReq)(nil),          // 24: evsepb.EvseWarningReq
	(*WarningConf)(nil),             // 25: evsepb.WarningConf
	(*RemoteStartReq)(nil),          // 26: evsepb.RemoteStartReq
	(*RemoteStartConf)(nil),         // 27: evsepb.RemoteStartConf
	(*StartTransactionReq)(nil),     // 28: evsepb.StartTransactionReq
	(*StartTransactionConf)(nil),    // 29: evsepb.StartTransactionConf
	(*EvseModel)(nil),               // 30: evsepb.EvseModel
	(EvseProtocolVendor)(0),         // 31: evsepb.EvseProtocolVendor
	(EvseFunction)(0),               // 32: evsepb.EvseFunction
	(Measurand)(0),                  // 33: evsepb.Measurand
	(*EvseConfigKV)(nil),            // 34: evsepb.EvseConfigKV
	(SetConfigurationStatus)(0),     // 35: evsepb.SetConfigurationStatus
	(EvseCtrlFunction)(0),           // 36: evsepb.EvseCtrlFunction
	(AuthorizationMode)(0),          // 37: evsepb.AuthorizationMode
	(ServiceMode)(0),                // 38: evsepb.ServiceMode
	(StopReason)(0),                 // 39: evsepb.StopReason
	(EvseOrderSectionTag)(0),        // 40: evsepb.EvseOrderSectionTag
	(OTAConfStatus)(0),              // 41: evsepb.OTAConfStatus
	(EvseWarningCode)(0),            // 42: evsepb.EvseWarningCode
	(EvseWarningLevel)(0),           // 43: evsepb.EvseWarningLevel
}
var file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_depIdxs = []int32{
	0,  // 0: evsepb.APDU.message_id:type_name -> evsepb.MessageID
	2,  // 1: evsepb.APDU.extrend:type_name -> evsepb.Extrend
	30, // 2: evsepb.BootNotificationReq.evse_model:type_name -> evsepb.EvseModel
	31, // 3: evsepb.BootNotificationReq.protocol_vendor:type_name -> evsepb.EvseProtocolVendor
	32, // 4: evsepb.BootNotificationReq.functions:type_name -> evsepb.EvseFunction
	33, // 5: evsepb.SampledValue.measurand:type_name -> evsepb.Measurand
	9,  // 6: evsepb.TelemetryReq.values:type_name -> evsepb.SampledValue
	34, // 7: evsepb.SetEvseConfigReq.configu_key:type_name -> evsepb.EvseConfigKV
	35, // 8: evsepb.SetEvseConfigConf.status:type_name -> evsepb.SetConfigurationStatus
	34, // 9: evsepb.GetEvseConfigReq.keys:type_name -> evsepb.EvseConfigKV
	34, // 10: evsepb.GetEvseConfigConf.values:type_name -> evsepb.EvseConfigKV
	36, // 11: evsepb.RemoteControlReq.function:type_name -> evsepb.EvseCtrlFunction
	37, // 12: evsepb.TransactionReq.auth_mode:type_name -> evsepb.AuthorizationMode
	38, // 13: evsepb.TransactionReq.service_mode:type_name -> evsepb.ServiceMode
	39, // 14: evsepb.TransactionReq.reason:type_name -> evsepb.StopReason
	19, // 15: evsepb.TransactionReq.cost:type_name -> evsepb.TransactionCost
	20, // 16: evsepb.TransactionCost.details:type_name -> evsepb.TransactionCostDetail
	40, // 17: evsepb.TransactionCostDetail.tag:type_name -> evsepb.EvseOrderSectionTag
	41, // 18: evsepb.OTAConf.status:type_name -> evsepb.OTAConfStatus
	42, // 19: evsepb.EvseWarningReq.code:type_name -> evsepb.EvseWarningCode
	43, // 20: evsepb.EvseWarningReq.level:type_name -> evsepb.EvseWarningLevel
	38, // 21: evsepb.RemoteStartReq.service_mode:type_name -> evsepb.ServiceMode
	37, // 22: evsepb.RemoteStartReq.auth_mode:type_name -> evsepb.AuthorizationMode
	39, // 23: evsepb.RemoteStartConf.reason:type_name -> evsepb.StopReason
	37, // 24: evsepb.StartTransactionReq.auth_mode:type_name -> evsepb.AuthorizationMode
	38, // 25: evsepb.StartTransactionReq.service_mode:type_name -> evsepb.ServiceMode
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_init() }
func file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_init() {
	if File_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto != nil {
		return
	}
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APDU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistrationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistrationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootNotificationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampledValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEvseConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEvseConfigConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvseConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvseConfigConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlStartParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionCostDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseWarningReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_goTypes,
		DependencyIndexes: file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_depIdxs,
		EnumInfos:         file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_enumTypes,
		MessageInfos:      file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_msgTypes,
	}.Build()
	File_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto = out.File
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_rawDesc = nil
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_goTypes = nil
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_depIdxs = nil
}
