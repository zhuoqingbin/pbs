// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: github.com/zhuoqingbin/pbs/evsepb/types.proto

package evsepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EvseState 状态
type EvseState int32

const (
	EvseState_ES_NONACTIVATED EvseState = 0 // 未知, （说明设备未上线过）
	EvseState_ES_OFFLINE      EvseState = 1 // 离线
	EvseState_ES_ONLINE       EvseState = 2 // 在线
	EvseState_ES_EXCEPTION    EvseState = 3 // 故障
)

// Enum value maps for EvseState.
var (
	EvseState_name = map[int32]string{
		0: "ES_NONACTIVATED",
		1: "ES_OFFLINE",
		2: "ES_ONLINE",
		3: "ES_EXCEPTION",
	}
	EvseState_value = map[string]int32{
		"ES_NONACTIVATED": 0,
		"ES_OFFLINE":      1,
		"ES_ONLINE":       2,
		"ES_EXCEPTION":    3,
	}
)

func (x EvseState) Enum() *EvseState {
	p := new(EvseState)
	*p = x
	return p
}

func (x EvseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseState) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[0].Descriptor()
}

func (EvseState) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[0]
}

func (x EvseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseState.Descriptor instead.
func (EvseState) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{0}
}

// ConnectorState 状态
type ConnectorState int32

const (
	ConnectorState_CS_Unavailable   ConnectorState = 0  //不可用
	ConnectorState_CS_Available     ConnectorState = 1  // 空闲
	ConnectorState_CS_Preparing     ConnectorState = 2  // 已连接，未开启充电会话
	ConnectorState_CS_Charging      ConnectorState = 3  // 充电中
	ConnectorState_CS_SuspendedEVSE ConnectorState = 4  // 充电已开启，但充电桩还未输出
	ConnectorState_CS_SuspendedEV   ConnectorState = 5  // 充电已开启，电动汽车还未充电
	ConnectorState_CS_Finishing     ConnectorState = 6  // 充电完成，还处于占用状态
	ConnectorState_CS_Reserved      ConnectorState = 7  // 预约
	ConnectorState_CS_Faulted       ConnectorState = 8  // 故障
	ConnectorState_CS_Waiting       ConnectorState = 9  // 定时充电等待、轮充等待等
	ConnectorState_CS_Occupied      ConnectorState = 10 // 设备占用中，不知道是什么状态
)

// Enum value maps for ConnectorState.
var (
	ConnectorState_name = map[int32]string{
		0:  "CS_Unavailable",
		1:  "CS_Available",
		2:  "CS_Preparing",
		3:  "CS_Charging",
		4:  "CS_SuspendedEVSE",
		5:  "CS_SuspendedEV",
		6:  "CS_Finishing",
		7:  "CS_Reserved",
		8:  "CS_Faulted",
		9:  "CS_Waiting",
		10: "CS_Occupied",
	}
	ConnectorState_value = map[string]int32{
		"CS_Unavailable":   0,
		"CS_Available":     1,
		"CS_Preparing":     2,
		"CS_Charging":      3,
		"CS_SuspendedEVSE": 4,
		"CS_SuspendedEV":   5,
		"CS_Finishing":     6,
		"CS_Reserved":      7,
		"CS_Faulted":       8,
		"CS_Waiting":       9,
		"CS_Occupied":      10,
	}
)

func (x ConnectorState) Enum() *ConnectorState {
	p := new(ConnectorState)
	*p = x
	return p
}

func (x ConnectorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectorState) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[1].Descriptor()
}

func (ConnectorState) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[1]
}

func (x ConnectorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectorState.Descriptor instead.
func (ConnectorState) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{1}
}

// EvseProtocolVendor 设备协议类型
type EvseProtocolVendor int32

const (
	EvseProtocolVendor_EPV_UNKNOWN   EvseProtocolVendor = 0
	EvseProtocolVendor_EPV_GOIOT     EvseProtocolVendor = 1 // goiot协议
	EvseProtocolVendor_EPV_SINEXCEL  EvseProtocolVendor = 2 // 盛泓协议
	EvseProtocolVendor_EPV_SZUNIT    EvseProtocolVendor = 3 // 永联协议
	EvseProtocolVendor_EPV_YKC       EvseProtocolVendor = 4 // 云快充协议
	EvseProtocolVendor_EPV_HKC       EvseProtocolVendor = 5 // 好快充协议
	EvseProtocolVendor_EPV_OCPP      EvseProtocolVendor = 6 // OCPP协议
	EvseProtocolVendor_EPV_BLUETOOTH EvseProtocolVendor = 7 // 蓝牙协议
)

// Enum value maps for EvseProtocolVendor.
var (
	EvseProtocolVendor_name = map[int32]string{
		0: "EPV_UNKNOWN",
		1: "EPV_GOIOT",
		2: "EPV_SINEXCEL",
		3: "EPV_SZUNIT",
		4: "EPV_YKC",
		5: "EPV_HKC",
		6: "EPV_OCPP",
		7: "EPV_BLUETOOTH",
	}
	EvseProtocolVendor_value = map[string]int32{
		"EPV_UNKNOWN":   0,
		"EPV_GOIOT":     1,
		"EPV_SINEXCEL":  2,
		"EPV_SZUNIT":    3,
		"EPV_YKC":       4,
		"EPV_HKC":       5,
		"EPV_OCPP":      6,
		"EPV_BLUETOOTH": 7,
	}
)

func (x EvseProtocolVendor) Enum() *EvseProtocolVendor {
	p := new(EvseProtocolVendor)
	*p = x
	return p
}

func (x EvseProtocolVendor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseProtocolVendor) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[2].Descriptor()
}

func (EvseProtocolVendor) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[2]
}

func (x EvseProtocolVendor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseProtocolVendor.Descriptor instead.
func (EvseProtocolVendor) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{2}
}

// EvseStandard 设备标准
type EvseStandard int32

const (
	EvseStandard_ES_UNKNOWN  EvseStandard = 0
	EvseStandard_ES_CHINESE  EvseStandard = 1 // 国标
	EvseStandard_ES_AMERICAN EvseStandard = 2 // 美标
	EvseStandard_ES_EUROPEAN EvseStandard = 4 // 欧标
)

// Enum value maps for EvseStandard.
var (
	EvseStandard_name = map[int32]string{
		0: "ES_UNKNOWN",
		1: "ES_CHINESE",
		2: "ES_AMERICAN",
		4: "ES_EUROPEAN",
	}
	EvseStandard_value = map[string]int32{
		"ES_UNKNOWN":  0,
		"ES_CHINESE":  1,
		"ES_AMERICAN": 2,
		"ES_EUROPEAN": 4,
	}
)

func (x EvseStandard) Enum() *EvseStandard {
	p := new(EvseStandard)
	*p = x
	return p
}

func (x EvseStandard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseStandard) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[3].Descriptor()
}

func (EvseStandard) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[3]
}

func (x EvseStandard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseStandard.Descriptor instead.
func (EvseStandard) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{3}
}

// EvsePhase 设备相数
type EvsePhase int32

const (
	EvsePhase_EP_UNKNOWN EvsePhase = 0
	EvsePhase_EP_ONE     EvsePhase = 1 // 单相
	EvsePhase_EP_THREE   EvsePhase = 3 // 三相
)

// Enum value maps for EvsePhase.
var (
	EvsePhase_name = map[int32]string{
		0: "EP_UNKNOWN",
		1: "EP_ONE",
		3: "EP_THREE",
	}
	EvsePhase_value = map[string]int32{
		"EP_UNKNOWN": 0,
		"EP_ONE":     1,
		"EP_THREE":   3,
	}
)

func (x EvsePhase) Enum() *EvsePhase {
	p := new(EvsePhase)
	*p = x
	return p
}

func (x EvsePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvsePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[4].Descriptor()
}

func (EvsePhase) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[4]
}

func (x EvsePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvsePhase.Descriptor instead.
func (EvsePhase) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{4}
}

// 设备运营类型
type EvseOperationType int32

const (
	EvseOperationType_EOT_UNKNOWN  EvseOperationType = 0
	EvseOperationType_EOT_HOME     EvseOperationType = 1 // 家充设备
	EvseOperationType_EOT_OPERATOR EvseOperationType = 2 // 运营设备
)

// Enum value maps for EvseOperationType.
var (
	EvseOperationType_name = map[int32]string{
		0: "EOT_UNKNOWN",
		1: "EOT_HOME",
		2: "EOT_OPERATOR",
	}
	EvseOperationType_value = map[string]int32{
		"EOT_UNKNOWN":  0,
		"EOT_HOME":     1,
		"EOT_OPERATOR": 2,
	}
)

func (x EvseOperationType) Enum() *EvseOperationType {
	p := new(EvseOperationType)
	*p = x
	return p
}

func (x EvseOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[5].Descriptor()
}

func (EvseOperationType) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[5]
}

func (x EvseOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseOperationType.Descriptor instead.
func (EvseOperationType) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{5}
}

// UseVehicleType 设备使用车辆类型
type UseVehicleType int32

const (
	UseVehicleType_UVT_UNKNOWN UseVehicleType = 0
	UseVehicleType_UVT_CART    UseVehicleType = 1
	UseVehicleType_UVT_BIKE    UseVehicleType = 2
)

// Enum value maps for UseVehicleType.
var (
	UseVehicleType_name = map[int32]string{
		0: "UVT_UNKNOWN",
		1: "UVT_CART",
		2: "UVT_BIKE",
	}
	UseVehicleType_value = map[string]int32{
		"UVT_UNKNOWN": 0,
		"UVT_CART":    1,
		"UVT_BIKE":    2,
	}
)

func (x UseVehicleType) Enum() *UseVehicleType {
	p := new(UseVehicleType)
	*p = x
	return p
}

func (x UseVehicleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseVehicleType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[6].Descriptor()
}

func (UseVehicleType) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[6]
}

func (x UseVehicleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseVehicleType.Descriptor instead.
func (UseVehicleType) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{6}
}

// EvseCurrentType 汽车电流类型
type EvseCurrentType int32

const (
	EvseCurrentType_ECT_UNKNOWN EvseCurrentType = 0 //
	EvseCurrentType_ECT_AC      EvseCurrentType = 1 // 交流
	EvseCurrentType_ECT_DC      EvseCurrentType = 2 // 直流
)

// Enum value maps for EvseCurrentType.
var (
	EvseCurrentType_name = map[int32]string{
		0: "ECT_UNKNOWN",
		1: "ECT_AC",
		2: "ECT_DC",
	}
	EvseCurrentType_value = map[string]int32{
		"ECT_UNKNOWN": 0,
		"ECT_AC":      1,
		"ECT_DC":      2,
	}
)

func (x EvseCurrentType) Enum() *EvseCurrentType {
	p := new(EvseCurrentType)
	*p = x
	return p
}

func (x EvseCurrentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseCurrentType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[7].Descriptor()
}

func (EvseCurrentType) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[7]
}

func (x EvseCurrentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseCurrentType.Descriptor instead.
func (EvseCurrentType) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{7}
}

type EvseOrderState int32

const (
	// 整数表示正常状态, 其他的表示异常
	EvseOrderState_EOS_UnknownSuspend              EvseOrderState = 0   // 枪头未知原因导致订单挂起
	EvseOrderState_EOS_Pending                     EvseOrderState = 10  // 订单等待处理
	EvseOrderState_EOS_RemoteStartReject           EvseOrderState = 11  // 设备拒绝启动充电（马上退款）
	EvseOrderState_EOS_RemoteStartTimeout          EvseOrderState = 12  // 启动充电超时（马上退款）
	EvseOrderState_EOS_RemoteStartConfTimeout      EvseOrderState = 13  // 启动充电回复超时（原是马上退款，先修改成3天内退款）
	EvseOrderState_EOS_RemoteStartFail             EvseOrderState = 14  // 启动充电失败，后台导致的（马上退款）
	EvseOrderState_EOS_RemoteStarted               EvseOrderState = 30  // 启动充电成功，等待连接
	EvseOrderState_EOS_ConnectTimeout              EvseOrderState = 31  // 连接超时（3天内退款）
	EvseOrderState_EOS_ConnectorUnavailableSuspend EvseOrderState = 32  // 枪头不可用导致订单挂起
	EvseOrderState_EOS_Charging                    EvseOrderState = 50  // 连接成功，充电中
	EvseOrderState_EOS_ConnectorDiffSessionSuspend EvseOrderState = 51  // 枪头的订单会话不一致导致挂起
	EvseOrderState_EOS_ConnectorAvailableSuspend   EvseOrderState = 52  // 枪头空闲可用导致订单挂起
	EvseOrderState_EOS_ConnectorFaultSuspend       EvseOrderState = 53  // 枪头故障导致订单挂起
	EvseOrderState_EOS_ConnectorOfflineSuspend     EvseOrderState = 54  // 枪头离线导致订单挂起
	EvseOrderState_EOS_RemoteStopped               EvseOrderState = 70  // 结束充电请求成功
	EvseOrderState_EOS_RemoteStopTimeout           EvseOrderState = 71  // 结束充电超时
	EvseOrderState_EOS_Stopped                     EvseOrderState = 90  // 结束充电成功，等待计费结果
	EvseOrderState_EOS_CostConflict                EvseOrderState = 91  // 费用冲突
	EvseOrderState_EOS_Finish                      EvseOrderState = 100 // 充电完成
)

// Enum value maps for EvseOrderState.
var (
	EvseOrderState_name = map[int32]string{
		0:   "EOS_UnknownSuspend",
		10:  "EOS_Pending",
		11:  "EOS_RemoteStartReject",
		12:  "EOS_RemoteStartTimeout",
		13:  "EOS_RemoteStartConfTimeout",
		14:  "EOS_RemoteStartFail",
		30:  "EOS_RemoteStarted",
		31:  "EOS_ConnectTimeout",
		32:  "EOS_ConnectorUnavailableSuspend",
		50:  "EOS_Charging",
		51:  "EOS_ConnectorDiffSessionSuspend",
		52:  "EOS_ConnectorAvailableSuspend",
		53:  "EOS_ConnectorFaultSuspend",
		54:  "EOS_ConnectorOfflineSuspend",
		70:  "EOS_RemoteStopped",
		71:  "EOS_RemoteStopTimeout",
		90:  "EOS_Stopped",
		91:  "EOS_CostConflict",
		100: "EOS_Finish",
	}
	EvseOrderState_value = map[string]int32{
		"EOS_UnknownSuspend":              0,
		"EOS_Pending":                     10,
		"EOS_RemoteStartReject":           11,
		"EOS_RemoteStartTimeout":          12,
		"EOS_RemoteStartConfTimeout":      13,
		"EOS_RemoteStartFail":             14,
		"EOS_RemoteStarted":               30,
		"EOS_ConnectTimeout":              31,
		"EOS_ConnectorUnavailableSuspend": 32,
		"EOS_Charging":                    50,
		"EOS_ConnectorDiffSessionSuspend": 51,
		"EOS_ConnectorAvailableSuspend":   52,
		"EOS_ConnectorFaultSuspend":       53,
		"EOS_ConnectorOfflineSuspend":     54,
		"EOS_RemoteStopped":               70,
		"EOS_RemoteStopTimeout":           71,
		"EOS_Stopped":                     90,
		"EOS_CostConflict":                91,
		"EOS_Finish":                      100,
	}
)

func (x EvseOrderState) Enum() *EvseOrderState {
	p := new(EvseOrderState)
	*p = x
	return p
}

func (x EvseOrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseOrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[8].Descriptor()
}

func (EvseOrderState) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[8]
}

func (x EvseOrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseOrderState.Descriptor instead.
func (EvseOrderState) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{8}
}

// EvseOccupyOrderState 设备占用状态
type EvseOccupyOrderState int32

const (
	EvseOccupyOrderState_EOOS_INIT      EvseOccupyOrderState = 0   // 初始化状态
	EvseOccupyOrderState_EOOS_OCCUPYING EvseOccupyOrderState = 50  // 占庄中
	EvseOccupyOrderState_EOOS_FINISH    EvseOccupyOrderState = 100 // 占庄完成
)

// Enum value maps for EvseOccupyOrderState.
var (
	EvseOccupyOrderState_name = map[int32]string{
		0:   "EOOS_INIT",
		50:  "EOOS_OCCUPYING",
		100: "EOOS_FINISH",
	}
	EvseOccupyOrderState_value = map[string]int32{
		"EOOS_INIT":      0,
		"EOOS_OCCUPYING": 50,
		"EOOS_FINISH":    100,
	}
)

func (x EvseOccupyOrderState) Enum() *EvseOccupyOrderState {
	p := new(EvseOccupyOrderState)
	*p = x
	return p
}

func (x EvseOccupyOrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseOccupyOrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[9].Descriptor()
}

func (EvseOccupyOrderState) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[9]
}

func (x EvseOccupyOrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseOccupyOrderState.Descriptor instead.
func (EvseOccupyOrderState) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{9}
}

// 设备订单分段标签
type EvseOrderSectionTag int32

const (
	EvseOrderSectionTag_OST_UNKNOWN EvseOrderSectionTag = 0 // 未知
	EvseOrderSectionTag_OST_PEAK    EvseOrderSectionTag = 1 // 尖
	EvseOrderSectionTag_OST_SHARP   EvseOrderSectionTag = 2 // 峰
	EvseOrderSectionTag_OST_FLAT    EvseOrderSectionTag = 3 // 平
	EvseOrderSectionTag_OST_VALLEY  EvseOrderSectionTag = 4 // 谷
)

// Enum value maps for EvseOrderSectionTag.
var (
	EvseOrderSectionTag_name = map[int32]string{
		0: "OST_UNKNOWN",
		1: "OST_PEAK",
		2: "OST_SHARP",
		3: "OST_FLAT",
		4: "OST_VALLEY",
	}
	EvseOrderSectionTag_value = map[string]int32{
		"OST_UNKNOWN": 0,
		"OST_PEAK":    1,
		"OST_SHARP":   2,
		"OST_FLAT":    3,
		"OST_VALLEY":  4,
	}
)

func (x EvseOrderSectionTag) Enum() *EvseOrderSectionTag {
	p := new(EvseOrderSectionTag)
	*p = x
	return p
}

func (x EvseOrderSectionTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseOrderSectionTag) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[10].Descriptor()
}

func (EvseOrderSectionTag) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[10]
}

func (x EvseOrderSectionTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseOrderSectionTag.Descriptor instead.
func (EvseOrderSectionTag) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{10}
}

// 授权启动充电方式
type AuthorizationMode int32

const (
	AuthorizationMode_AM_LOCAL_PLUG           AuthorizationMode = 0  // 本地即插即充启动
	AuthorizationMode_AM_LOCAL_ADMIN          AuthorizationMode = 1  // 本地管理员启动
	AuthorizationMode_AM_LOCAL_IDENTITY_CARD  AuthorizationMode = 2  // 鉴权卡刷卡本地鉴权启动
	AuthorizationMode_AM_ONLINE_IDENTITY_CARD AuthorizationMode = 3  // 鉴权卡刷卡在线鉴权启动
	AuthorizationMode_AM_LOCAL_WALLET_CARD    AuthorizationMode = 4  // 本地钱包卡刷卡启动
	AuthorizationMode_AM_LOCAL_VIN            AuthorizationMode = 5  // 车辆VIN本地鉴权启动
	AuthorizationMode_AM_ONLINE_VIN           AuthorizationMode = 6  // 车辆VIN在线鉴权启动
	AuthorizationMode_AM_BLUETOOTH            AuthorizationMode = 7  // 本地通过蓝牙启动
	AuthorizationMode_AM_MAC                  AuthorizationMode = 8  // 本地通过输入校验码启动
	AuthorizationMode_AM_REMOTE_ADMIN         AuthorizationMode = 9  // 远程管理员启动
	AuthorizationMode_AM_REMOTE_USER          AuthorizationMode = 10 // 远程用户启动
)

// Enum value maps for AuthorizationMode.
var (
	AuthorizationMode_name = map[int32]string{
		0:  "AM_LOCAL_PLUG",
		1:  "AM_LOCAL_ADMIN",
		2:  "AM_LOCAL_IDENTITY_CARD",
		3:  "AM_ONLINE_IDENTITY_CARD",
		4:  "AM_LOCAL_WALLET_CARD",
		5:  "AM_LOCAL_VIN",
		6:  "AM_ONLINE_VIN",
		7:  "AM_BLUETOOTH",
		8:  "AM_MAC",
		9:  "AM_REMOTE_ADMIN",
		10: "AM_REMOTE_USER",
	}
	AuthorizationMode_value = map[string]int32{
		"AM_LOCAL_PLUG":           0,
		"AM_LOCAL_ADMIN":          1,
		"AM_LOCAL_IDENTITY_CARD":  2,
		"AM_ONLINE_IDENTITY_CARD": 3,
		"AM_LOCAL_WALLET_CARD":    4,
		"AM_LOCAL_VIN":            5,
		"AM_ONLINE_VIN":           6,
		"AM_BLUETOOTH":            7,
		"AM_MAC":                  8,
		"AM_REMOTE_ADMIN":         9,
		"AM_REMOTE_USER":          10,
	}
)

func (x AuthorizationMode) Enum() *AuthorizationMode {
	p := new(AuthorizationMode)
	*p = x
	return p
}

func (x AuthorizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[11].Descriptor()
}

func (AuthorizationMode) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[11]
}

func (x AuthorizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationMode.Descriptor instead.
func (AuthorizationMode) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{11}
}

// ServiceMode 充电桩服务模式
type ServiceMode int32

const (
	ServiceMode_SM_AUTO_CHARGE       ServiceMode = 0 // 自动充满模式
	ServiceMode_SM_CHARGE_BY_ELEC    ServiceMode = 1 // 预设电量充电模式
	ServiceMode_SM_CHARGE_BY_TIME    ServiceMode = 2 // 预设时间充电模式
	ServiceMode_SM_CHARGE_BY_MONEY   ServiceMode = 3 // 预设金额充电模式
	ServiceMode_SM_DISCHARGE_BY_ELEC ServiceMode = 4 // 按电量放电
	ServiceMode_SM_AUTO_DISCHARGE    ServiceMode = 5 // 自动放电
)

// Enum value maps for ServiceMode.
var (
	ServiceMode_name = map[int32]string{
		0: "SM_AUTO_CHARGE",
		1: "SM_CHARGE_BY_ELEC",
		2: "SM_CHARGE_BY_TIME",
		3: "SM_CHARGE_BY_MONEY",
		4: "SM_DISCHARGE_BY_ELEC",
		5: "SM_AUTO_DISCHARGE",
	}
	ServiceMode_value = map[string]int32{
		"SM_AUTO_CHARGE":       0,
		"SM_CHARGE_BY_ELEC":    1,
		"SM_CHARGE_BY_TIME":    2,
		"SM_CHARGE_BY_MONEY":   3,
		"SM_DISCHARGE_BY_ELEC": 4,
		"SM_AUTO_DISCHARGE":    5,
	}
)

func (x ServiceMode) Enum() *ServiceMode {
	p := new(ServiceMode)
	*p = x
	return p
}

func (x ServiceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[12].Descriptor()
}

func (ServiceMode) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[12]
}

func (x ServiceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceMode.Descriptor instead.
func (ServiceMode) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{12}
}

// 请求消息充电停止原因定义
type StopReason int32

const (
	StopReason_SR_Normal         StopReason = 0  // 按照服务类型（按电量充电，按时长充电，按金额充电, BMS正常结束等）正常停止充电。
	StopReason_SR_Local_Card     StopReason = 1  // 用户本地刷卡停止充电
	StopReason_SR_LocalPIN       StopReason = 2  // 用户本地输入校验码停止充电
	StopReason_SR_RemoteUser     StopReason = 3  // 用户远程结束
	StopReason_SR_RemoteAdmin    StopReason = 4  // 管理员远程结束
	StopReason_SR_EmergencyStop  StopReason = 5  // 急停按下，停止充电
	StopReason_SR_EVDisconnected StopReason = 6  // 检测到枪头断开，停止充电
	StopReason_SR_Reboot         StopReason = 7  // 系统重启停止充电
	StopReason_SR_OffLine        StopReason = 8  // 充电桩断线，停止充电（对于不允许离线充电的充电桩）
	StopReason_SR_PowerLoss      StopReason = 9  // 充电桩掉电，停止充电
	StopReason_SR_SystemFault    StopReason = 10 // 充电桩故障，停止充电
	StopReason_SR_BMSFault       StopReason = 11 // 电动车故障，停止充电
	StopReason_SR_Other          StopReason = 12 // 其它原因，停止充电
	StopReason_SR_MeterFault     StopReason = 13 // 电表故障
	StopReason_SR_SocFull        StopReason = 16 // soc充满停止
	StopReason_SR_NotEnoughMoney StopReason = 17 // 余额不足
	StopReason_SR_OverLoad       StopReason = 18 // 过载停止
	StopReason_SR_OverVoltage    StopReason = 19 // 过压停止
	StopReason_SR_UnderVoltage   StopReason = 20 // 欠压停止
	StopReason_SR_NetTimeout     StopReason = 21 // 网络同步超时停止充电
	StopReason_SR_OverTime       StopReason = 22 // 超过设置时间
	StopReason_SR_OverMeter      StopReason = 23 // 超过设置电量
	StopReason_SR_OverSOC        StopReason = 24 // 超过设置SOC
	StopReason_SR_CPError        StopReason = 25 // CP错误
	StopReason_SR_Leakage        StopReason = 26 // 漏电故障
	// 100以内的停止理由留给我们自己的固件扩展
	StopReason_SR_FullOfSelfStop   StopReason = 101      // 充满自停(原22)
	StopReason_SR_AdminForceStop   StopReason = 102      // 管理员强制结束(原23)
	StopReason_SR_EVOccupy         StopReason = 103      // 接口已被占用(原24)
	StopReason_SR_NoTariff         StopReason = 104      // 没有计费模版(原25)
	StopReason_SR_ConnectorFault   StopReason = 105      // 充电枪故障(原26)
	StopReason_SR_CC1NoConnect     StopReason = 106      // 充电枪未连接(充电中车辆控制引导异常/CC1连接异常)(原27)
	StopReason_SR_Deauthorized     StopReason = 107      // 取消授权
	StopReason_SR_EVConnectTimeout StopReason = 108      // 连接超时
	StopReason_SR_Server_Error     StopReason = 99999999 // 平台错误
)

// Enum value maps for StopReason.
var (
	StopReason_name = map[int32]string{
		0:        "SR_Normal",
		1:        "SR_Local_Card",
		2:        "SR_LocalPIN",
		3:        "SR_RemoteUser",
		4:        "SR_RemoteAdmin",
		5:        "SR_EmergencyStop",
		6:        "SR_EVDisconnected",
		7:        "SR_Reboot",
		8:        "SR_OffLine",
		9:        "SR_PowerLoss",
		10:       "SR_SystemFault",
		11:       "SR_BMSFault",
		12:       "SR_Other",
		13:       "SR_MeterFault",
		16:       "SR_SocFull",
		17:       "SR_NotEnoughMoney",
		18:       "SR_OverLoad",
		19:       "SR_OverVoltage",
		20:       "SR_UnderVoltage",
		21:       "SR_NetTimeout",
		22:       "SR_OverTime",
		23:       "SR_OverMeter",
		24:       "SR_OverSOC",
		25:       "SR_CPError",
		26:       "SR_Leakage",
		101:      "SR_FullOfSelfStop",
		102:      "SR_AdminForceStop",
		103:      "SR_EVOccupy",
		104:      "SR_NoTariff",
		105:      "SR_ConnectorFault",
		106:      "SR_CC1NoConnect",
		107:      "SR_Deauthorized",
		108:      "SR_EVConnectTimeout",
		99999999: "SR_Server_Error",
	}
	StopReason_value = map[string]int32{
		"SR_Normal":           0,
		"SR_Local_Card":       1,
		"SR_LocalPIN":         2,
		"SR_RemoteUser":       3,
		"SR_RemoteAdmin":      4,
		"SR_EmergencyStop":    5,
		"SR_EVDisconnected":   6,
		"SR_Reboot":           7,
		"SR_OffLine":          8,
		"SR_PowerLoss":        9,
		"SR_SystemFault":      10,
		"SR_BMSFault":         11,
		"SR_Other":            12,
		"SR_MeterFault":       13,
		"SR_SocFull":          16,
		"SR_NotEnoughMoney":   17,
		"SR_OverLoad":         18,
		"SR_OverVoltage":      19,
		"SR_UnderVoltage":     20,
		"SR_NetTimeout":       21,
		"SR_OverTime":         22,
		"SR_OverMeter":        23,
		"SR_OverSOC":          24,
		"SR_CPError":          25,
		"SR_Leakage":          26,
		"SR_FullOfSelfStop":   101,
		"SR_AdminForceStop":   102,
		"SR_EVOccupy":         103,
		"SR_NoTariff":         104,
		"SR_ConnectorFault":   105,
		"SR_CC1NoConnect":     106,
		"SR_Deauthorized":     107,
		"SR_EVConnectTimeout": 108,
		"SR_Server_Error":     99999999,
	}
)

func (x StopReason) Enum() *StopReason {
	p := new(StopReason)
	*p = x
	return p
}

func (x StopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[13].Descriptor()
}

func (StopReason) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[13]
}

func (x StopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopReason.Descriptor instead.
func (StopReason) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{13}
}

// OTAStatus 固件升级状态通知请求，固件升级进度状态
type OTAStatus int32

const (
	OTAStatus_FW_Idle              OTAStatus = 0  //未激活
	OTAStatus_FW_Pending           OTAStatus = 1  //准备中
	OTAStatus_FW_DownloadScheduled OTAStatus = 2  //固件下载计划中
	OTAStatus_FW_Downloading       OTAStatus = 3  //固件下载中
	OTAStatus_FW_DownloadPaused    OTAStatus = 9  //固件暂停下载
	OTAStatus_FW_Downloaded        OTAStatus = 10 //固件已下载
	OTAStatus_FW_SignatureVerified OTAStatus = 11 //固件通过签名验证
	OTAStatus_FW_InstallScheduled  OTAStatus = 20 //固件安装计划中
	OTAStatus_FW_Installing        OTAStatus = 22 //固件安装中
	OTAStatus_FW_Installed         OTAStatus = 25 //固件安装成功
	OTAStatus_FW_InstallRebooting  OTAStatus = 29 //固件重启中
	//失败的情况
	OTAStatus_FW_InstallationFailed        OTAStatus = 9901 //固件安装失败
	OTAStatus_FW_InstallVerificationFailed OTAStatus = 9902 //固件验证失败
	OTAStatus_FW_InvalidSignature          OTAStatus = 9903 //固件验证签名失败
	OTAStatus_FW_DownloadFailed            OTAStatus = 9904 //固件下载失败
)

// Enum value maps for OTAStatus.
var (
	OTAStatus_name = map[int32]string{
		0:    "FW_Idle",
		1:    "FW_Pending",
		2:    "FW_DownloadScheduled",
		3:    "FW_Downloading",
		9:    "FW_DownloadPaused",
		10:   "FW_Downloaded",
		11:   "FW_SignatureVerified",
		20:   "FW_InstallScheduled",
		22:   "FW_Installing",
		25:   "FW_Installed",
		29:   "FW_InstallRebooting",
		9901: "FW_InstallationFailed",
		9902: "FW_InstallVerificationFailed",
		9903: "FW_InvalidSignature",
		9904: "FW_DownloadFailed",
	}
	OTAStatus_value = map[string]int32{
		"FW_Idle":                      0,
		"FW_Pending":                   1,
		"FW_DownloadScheduled":         2,
		"FW_Downloading":               3,
		"FW_DownloadPaused":            9,
		"FW_Downloaded":                10,
		"FW_SignatureVerified":         11,
		"FW_InstallScheduled":          20,
		"FW_Installing":                22,
		"FW_Installed":                 25,
		"FW_InstallRebooting":          29,
		"FW_InstallationFailed":        9901,
		"FW_InstallVerificationFailed": 9902,
		"FW_InvalidSignature":          9903,
		"FW_DownloadFailed":            9904,
	}
)

func (x OTAStatus) Enum() *OTAStatus {
	p := new(OTAStatus)
	*p = x
	return p
}

func (x OTAStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OTAStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[14].Descriptor()
}

func (OTAStatus) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[14]
}

func (x OTAStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OTAStatus.Descriptor instead.
func (OTAStatus) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{14}
}

// OTAConfStatus OTA请求返回状态
type OTAConfStatus int32

const (
	OTAConfStatus_Accepted           OTAConfStatus = 0 // Accepted this firmware update request. This does not mean the firmware update is successful, the Charging Station will now start the firmware update process.
	OTAConfStatus_Rejected           OTAConfStatus = 1 // Firmware update request rejected.
	OTAConfStatus_AcceptedCanceled   OTAConfStatus = 2 // Accepted this firmware update request, but in doing this has canceled an ongoing firmware update.
	OTAConfStatus_InvalidCertificate OTAConfStatus = 3 // The certificate is invalid.
	OTAConfStatus_RevokedCertificate OTAConfStatus = 4 // Failure end state. The Firmware Signing certificate has been revoked.
)

// Enum value maps for OTAConfStatus.
var (
	OTAConfStatus_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
		2: "AcceptedCanceled",
		3: "InvalidCertificate",
		4: "RevokedCertificate",
	}
	OTAConfStatus_value = map[string]int32{
		"Accepted":           0,
		"Rejected":           1,
		"AcceptedCanceled":   2,
		"InvalidCertificate": 3,
		"RevokedCertificate": 4,
	}
)

func (x OTAConfStatus) Enum() *OTAConfStatus {
	p := new(OTAConfStatus)
	*p = x
	return p
}

func (x OTAConfStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OTAConfStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[15].Descriptor()
}

func (OTAConfStatus) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[15]
}

func (x OTAConfStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OTAConfStatus.Descriptor instead.
func (OTAConfStatus) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{15}
}

// 不同设备的功能列表
type EvseFunction int32

const (
	EvseFunction_EF_TimeoutRefund EvseFunction = 0 // 是否支持启动超时退款
	EvseFunction_EF_SectionPirce  EvseFunction = 1 // 支持分段计费
)

// Enum value maps for EvseFunction.
var (
	EvseFunction_name = map[int32]string{
		0: "EF_TimeoutRefund",
		1: "EF_SectionPirce",
	}
	EvseFunction_value = map[string]int32{
		"EF_TimeoutRefund": 0,
		"EF_SectionPirce":  1,
	}
)

func (x EvseFunction) Enum() *EvseFunction {
	p := new(EvseFunction)
	*p = x
	return p
}

func (x EvseFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[16].Descriptor()
}

func (EvseFunction) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[16]
}

func (x EvseFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseFunction.Descriptor instead.
func (EvseFunction) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{16}
}

// Measurand 遥测代码
type Measurand int32

const (
	Measurand_MUnknown           Measurand = 0
	Measurand_WorkingStatus      Measurand = 1   /// 组件工作状态，0-正常，1-故障，2-通信故障
	Measurand_ConnectorAvailable Measurand = 2   /// 空闲可用充电接口数量
	Measurand_EnvTemperature     Measurand = 100 /// 环境温度，单位摄氏度，分辨率1度
	Measurand_PowerWatts         Measurand = 104 /// 功率，单位W，分辨率0.01W
	Measurand_SOC                Measurand = 106 /// 电池剩余容量，单位％，分辨率1
	Measurand_VoltageA           Measurand = 136 /// A相电压，单位V，分辨率0.1V
	Measurand_VoltageB           Measurand = 137 /// B相电压，单位V，分辨率0.1V
	Measurand_VoltageC           Measurand = 138 /// C相电压，单位V，分辨率0.1V
	Measurand_CurrentA           Measurand = 139 /// A相电流，单位A，分辨率0.1A
	Measurand_CurrentB           Measurand = 140 /// B相电流，单位A，分辨率0.1A
	Measurand_CurrentC           Measurand = 141 /// C相电流，单位A，分辨率0.1A
	Measurand_ConnectorStatus    Measurand = 144 /// 充电枪头状态, 见 ConnectorState
	Measurand_ConsumedElectric   Measurand = 145 /// 已充电量	某一充电订单的已充电量，单位kwh，单位 kw.h 精度10000(即精确到小数点后四位)
	// ConsumedTime          = 146; /// 已充时间	单位秒
	Measurand_TotalCost Measurand = 147 /// 消费总金额	单位 元, 精度10000 (即精确到小数点后四位)
)

// Enum value maps for Measurand.
var (
	Measurand_name = map[int32]string{
		0:   "MUnknown",
		1:   "WorkingStatus",
		2:   "ConnectorAvailable",
		100: "EnvTemperature",
		104: "PowerWatts",
		106: "SOC",
		136: "VoltageA",
		137: "VoltageB",
		138: "VoltageC",
		139: "CurrentA",
		140: "CurrentB",
		141: "CurrentC",
		144: "ConnectorStatus",
		145: "ConsumedElectric",
		147: "TotalCost",
	}
	Measurand_value = map[string]int32{
		"MUnknown":           0,
		"WorkingStatus":      1,
		"ConnectorAvailable": 2,
		"EnvTemperature":     100,
		"PowerWatts":         104,
		"SOC":                106,
		"VoltageA":           136,
		"VoltageB":           137,
		"VoltageC":           138,
		"CurrentA":           139,
		"CurrentB":           140,
		"CurrentC":           141,
		"ConnectorStatus":    144,
		"ConsumedElectric":   145,
		"TotalCost":          147,
	}
)

func (x Measurand) Enum() *Measurand {
	p := new(Measurand)
	*p = x
	return p
}

func (x Measurand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Measurand) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[17].Descriptor()
}

func (Measurand) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[17]
}

func (x Measurand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Measurand.Descriptor instead.
func (Measurand) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{17}
}

// WarningLevel Warning类告警等级定义
type EvseWarningLevel int32

const (
	EvseWarningLevel_WL_Critical EvseWarningLevel = 0   //系统严重故障，系统不能工作了
	EvseWarningLevel_WL_Alert    EvseWarningLevel = 1   //故障，需要立即中止本次充电，不影响下次充电
	EvseWarningLevel_WL_Warning  EvseWarningLevel = 2   //系统警告，不影响充电
	EvseWarningLevel_WL_Notice   EvseWarningLevel = 3   //事件通知
	EvseWarningLevel_WL_Info     EvseWarningLevel = 4   //信息
	EvseWarningLevel_WL_Hardware EvseWarningLevel = 100 //硬件故障
	EvseWarningLevel_WL_SYSTEM   EvseWarningLevel = 101 //系统故障
)

// Enum value maps for EvseWarningLevel.
var (
	EvseWarningLevel_name = map[int32]string{
		0:   "WL_Critical",
		1:   "WL_Alert",
		2:   "WL_Warning",
		3:   "WL_Notice",
		4:   "WL_Info",
		100: "WL_Hardware",
		101: "WL_SYSTEM",
	}
	EvseWarningLevel_value = map[string]int32{
		"WL_Critical": 0,
		"WL_Alert":    1,
		"WL_Warning":  2,
		"WL_Notice":   3,
		"WL_Info":     4,
		"WL_Hardware": 100,
		"WL_SYSTEM":   101,
	}
)

func (x EvseWarningLevel) Enum() *EvseWarningLevel {
	p := new(EvseWarningLevel)
	*p = x
	return p
}

func (x EvseWarningLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseWarningLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[18].Descriptor()
}

func (EvseWarningLevel) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[18]
}

func (x EvseWarningLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseWarningLevel.Descriptor instead.
func (EvseWarningLevel) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{18}
}

//*
//每个组件预留100个故障代码。
//未分类故障： 1～99
//系统故障：100～199
//计费控制单元故障：200～299
//充电控制单元故障：300～399
//电动汽车BMS故障：400～499
//智能车位锁故障：500～599
//智能车位探测故障：600～699
//电表故障：700～799
//触摸显示屏故障：800～899
//读卡器故障：900～999
//风扇：（含在充电控制故障里面）
//充电接口故障：1100～1199
//电源模块故障：1200～1299
//
//
//后端告警码: 100000000+
type EvseWarningCode int32

const (
	//*系统故障
	EvseWarningCode_Other                              EvseWarningCode = 0   // 其他
	EvseWarningCode_SYS_StorageFull                    EvseWarningCode = 100 // 存储器已满
	EvseWarningCode_SYS_4GFault                        EvseWarningCode = 101 // 通信模块故障
	EvseWarningCode_SYS_SimFault                       EvseWarningCode = 102 // SIM卡异常
	EvseWarningCode_SYS_DialFault                      EvseWarningCode = 103 // 拨号异常
	EvseWarningCode_SYS_ConnectError                   EvseWarningCode = 104 // 连接服务器失败
	EvseWarningCode_SYS_Disconnect                     EvseWarningCode = 105 // 与服务器通讯中断
	EvseWarningCode_SYS_PowerFailure                   EvseWarningCode = 106 // 系统掉电
	EvseWarningCode_SYS_MeterError                     EvseWarningCode = 107 // 电表通信故障
	EvseWarningCode_SYS_CardReaderError                EvseWarningCode = 108 // 读卡器通信故障
	EvseWarningCode_SYS_LCDError                       EvseWarningCode = 109 // 触摸屏故障
	EvseWarningCode_SYS_MeterMeasureException          EvseWarningCode = 110 // 电表计量故障
	EvseWarningCode_SYS_MeterCollectsException         EvseWarningCode = 111 // 电表采集异常/电能数据更新异常
	EvseWarningCode_SYS_SoftFault                      EvseWarningCode = 112 // 软启失败
	EvseWarningCode_SYS_AirInletOverTemp               EvseWarningCode = 113 // 进气口过温
	EvseWarningCode_SYS_AirInletUnderTemp              EvseWarningCode = 114 // 进气口低温
	EvseWarningCode_SYS_AirOutletOverTemp              EvseWarningCode = 115 // 出风口过温
	EvseWarningCode_SYS_SlaveFault                     EvseWarningCode = 116 // 从机故障导致停机
	EvseWarningCode_SYS_StorageFailure                 EvseWarningCode = 117 // 存储失败
	EvseWarningCode_SYS_PersistenceMemoryInconsistency EvseWarningCode = 118 //持久性内存不一致
	EvseWarningCode_SYS_ADCInit                        EvseWarningCode = 119 // ADC初始化错误
	EvseWarningCode_SYS_ConnectCPO                     EvseWarningCode = 120 // CPO无法连接
	EvseWarningCode_SYS_Register                       EvseWarningCode = 121 // 未注册到平台
	EvseWarningCode_SYS_ComBoardOffline                EvseWarningCode = 122 // COM板离线(存在检测)
	EvseWarningCode_SYS_GPSAntenna                     EvseWarningCode = 123 // GPS天线故障
	EvseWarningCode_SYS_4GAntenna                      EvseWarningCode = 124 // 4G天线故障
	EvseWarningCode_SYS_SNUnset                        EvseWarningCode = 125 // 序列号未配置
	EvseWarningCode_SYS_ParameterUnset                 EvseWarningCode = 126 // 参数未标定
	EvseWarningCode_SYS_ComGeneral                     EvseWarningCode = 127 // COM板一般故障
	EvseWarningCode_SYS_MoniterFault                   EvseWarningCode = 128 // 监控系统通讯故障
	//*充电控制单元故障
	EvseWarningCode_CCM_EmergencyFault                    EvseWarningCode = 300 // 紧急停机（急停按下）
	EvseWarningCode_CCM_LockFault                         EvseWarningCode = 301 // 电子锁故障
	EvseWarningCode_CCM_ACBreakerFault                    EvseWarningCode = 302 // 交流断路器故障
	EvseWarningCode_CCM_SPDFault                          EvseWarningCode = 303 // 避雷器故障
	EvseWarningCode_CCM_SmogFault                         EvseWarningCode = 304 // 烟雾告警
	EvseWarningCode_CCM_DoorFault                         EvseWarningCode = 305 // 门磁告警
	EvseWarningCode_CCM_WaterLogging                      EvseWarningCode = 306 // 水浸告警
	EvseWarningCode_CCM_DCContactorFault                  EvseWarningCode = 307 // 直流母线接触器故障
	EvseWarningCode_CCM_DCFuseFault                       EvseWarningCode = 308 // 直流母线输出熔断器故障
	EvseWarningCode_CCM_InsulationFault                   EvseWarningCode = 309 // 绝缘模块故障
	EvseWarningCode_CCM_InsulationWarning                 EvseWarningCode = 310 // 绝缘检测告警
	EvseWarningCode_CCM_FanFault                          EvseWarningCode = 311 // 系统风扇故障
	EvseWarningCode_CCM_CC1Fault                          EvseWarningCode = 312 // 充电中车辆控制引导异常（CC1连接异常）
	EvseWarningCode_CCM_OverTemp                          EvseWarningCode = 313 // 充电桩过温告警
	EvseWarningCode_CCM_ConnectorOverTemp                 EvseWarningCode = 314 // 充电接口过温
	EvseWarningCode_CCM_GunHolderFault                    EvseWarningCode = 315 // 充电枪未归位
	EvseWarningCode_CCM_InputUnderVol                     EvseWarningCode = 316 // 输入电压欠压 电网电压高
	EvseWarningCode_CCM_InputOverVol                      EvseWarningCode = 317 // 输入电压过压 电网电压低
	EvseWarningCode_CCM_AssisPowerFault                   EvseWarningCode = 318 // 辅助电源异常
	EvseWarningCode_CCM_BleedOffOverTime                  EvseWarningCode = 319 // 泄放超时
	EvseWarningCode_CCM_SwitchFault                       EvseWarningCode = 320 // 投切开关异常
	EvseWarningCode_CCM_DCOuputUnderVol                   EvseWarningCode = 321 // 直流母线输出欠压
	EvseWarningCode_CCM_DCOutputOverVol                   EvseWarningCode = 322 // 直流母线输出过压
	EvseWarningCode_CCM_DCOutputOverCur                   EvseWarningCode = 323 // 直流母线输出过流
	EvseWarningCode_CCM_OverCurrent                       EvseWarningCode = 324 // 输出过流告警
	EvseWarningCode_CCM_ChargingPlugOut                   EvseWarningCode = 325 // 充电插头拔出
	EvseWarningCode_CCM_ChargingFull                      EvseWarningCode = 326 // 充电已充满
	EvseWarningCode_CCM_CommunicationFault                EvseWarningCode = 327 // 充电控制板通讯故障
	EvseWarningCode_CCM_PEFault                           EvseWarningCode = 328 // 未接地故障
	EvseWarningCode_CCM_TempSensorException               EvseWarningCode = 329 // 温度传感器异常
	EvseWarningCode_CCM_PDCircuitException                EvseWarningCode = 330 // 放电回路异常
	EvseWarningCode_CCM_InputCircuitException             EvseWarningCode = 331 // 输入回路状态异常
	EvseWarningCode_CCM_MainOutputCircuitException        EvseWarningCode = 332 // 主输出回路状态异常
	EvseWarningCode_CCM_AuxiliaryCircuitException         EvseWarningCode = 333 // 辅助回路状态异常
	EvseWarningCode_CCM_OutputContactAdhesion             EvseWarningCode = 334 // 输出接触器粘连故障
	EvseWarningCode_CCM_OutputContactMisoperation         EvseWarningCode = 335 // 输出接触器拒动/误动故障
	EvseWarningCode_CCM_InputContactAdhesion              EvseWarningCode = 336 // 输入接触器粘连故障
	EvseWarningCode_CCM_InputContactMisoperation          EvseWarningCode = 337 // 输入接触器拒动/误动故障
	EvseWarningCode_CCM_ParallelContactAdhesion           EvseWarningCode = 338 // 并联接触器粘连故障
	EvseWarningCode_CCM_ParallelContactMisoperation       EvseWarningCode = 339 // 并联接触器拒动/误动故障
	EvseWarningCode_CCM_CANCommunicationFault             EvseWarningCode = 341 // CAN 通信故障
	EvseWarningCode_CCM_CAN1BusError                      EvseWarningCode = 342 // CAN1 总线错误
	EvseWarningCode_CCM_CAN3CommunicationFault            EvseWarningCode = 343 //CAN3 通信错误
	EvseWarningCode_CCM_SYSAuxiliaryPowerFailure          EvseWarningCode = 344 // 系统辅源掉电
	EvseWarningCode_CCM_AuxiliaryPowerFault               EvseWarningCode = 345 // 辅源电源故障
	EvseWarningCode_CCM_ChargerFault                      EvseWarningCode = 346 // 充电机故障
	EvseWarningCode_CCM_TCUCommunicationFault             EvseWarningCode = 347 // TCU与充电控制器通讯故障
	EvseWarningCode_CCM_PowerControllerCommunicationFault EvseWarningCode = 348 // 充电控制器和功率控制器通信告警故障
	EvseWarningCode_CCM_ACFuseFault                       EvseWarningCode = 349 // 交流输出熔断器故障
	EvseWarningCode_CCM_CPFault                           EvseWarningCode = 350 // CP故障
	EvseWarningCode_CCM_RCDSelfTest                       EvseWarningCode = 352 // RCD漏电自检失败
	EvseWarningCode_CCM_HighTemperature                   EvseWarningCode = 353 // 高温降速充电
	EvseWarningCode_CCM_LowTemperature                    EvseWarningCode = 354 // 低温故障
	EvseWarningCode_CCM_CPBroken                          EvseWarningCode = 355 // CP断开（或车辆PE断线）
	EvseWarningCode_CCM_Pwm                               EvseWarningCode = 356 // PWM占空比超限或频率超限
	EvseWarningCode_CCM_OneLevelCurrentOverload           EvseWarningCode = 357 // 一级过流错误
	EvseWarningCode_CCM_TwoLevelCurrentOverload           EvseWarningCode = 358 // 二级过流错误
	EvseWarningCode_CCM_RelaySelfTest                     EvseWarningCode = 359 // 继电器自检失败
	EvseWarningCode_CCM_RelayStatus                       EvseWarningCode = 360 // 继电器状态错误（可能无法结束充电）
	EvseWarningCode_CCM_RelayControl                      EvseWarningCode = 361 // 继电器控制错误
	EvseWarningCode_CCM_WatchDocMCUDeadlock               EvseWarningCode = 362 // Watchdog检查MCU死锁
	EvseWarningCode_CCM_SupervisorKeyModuleDeadlock       EvseWarningCode = 363 // Supervisor监测到关键模块死锁
	EvseWarningCode_CCM_SupervisorUnKeyModuleDeadlock     EvseWarningCode = 364 // Supervisor监测到非关键模块死锁
	EvseWarningCode_CCM_DipValue                          EvseWarningCode = 365 // DIP设置电流值错误
	EvseWarningCode_CCM_PmicWatchDogMessage               EvseWarningCode = 366 // PMIC电源芯片通信故障
	EvseWarningCode_CCM_RFIDModule                        EvseWarningCode = 367 // RFID刷卡模块故障
	EvseWarningCode_CCM_BLEModule                         EvseWarningCode = 368 // BLE蓝牙模块故障
	EvseWarningCode_CCM_ShortCircuit                      EvseWarningCode = 369 // 充电前短路检查错误
	EvseWarningCode_CCM_CP12VMonitor                      EvseWarningCode = 373 // CP电源电压超限
	EvseWarningCode_CCM_ShortCircuitCharging              EvseWarningCode = 374 // 充电中短路检测错误
	EvseWarningCode_CCM_TemperatureSensorOpenCircuit      EvseWarningCode = 375 // 温度传感器开路故障
	EvseWarningCode_CCM_TemperatureSensorDriftCircuit     EvseWarningCode = 376 // 温度传感器漂移
	EvseWarningCode_CCM_MultipleTemperatureOverload       EvseWarningCode = 377 // 多次过温停止充电故障
	EvseWarningCode_CCM_OneLevelCurrentOverloadTwice      EvseWarningCode = 378 // 一级过流故障二次
	EvseWarningCode_CCM_RelayPreDriverHighTemperature     EvseWarningCode = 379 // 继电器预驱动器过热
	EvseWarningCode_CCM_RelayPreDriverOverload            EvseWarningCode = 380 // 继电器预驱动过载
	EvseWarningCode_CCM_L2OneLevelVoltageOverload         EvseWarningCode = 381 // L2: 一级过压故障（次级过压故障）
	EvseWarningCode_CCM_L2TwoLevelVoltageOverload         EvseWarningCode = 382 // L2: 二级过压故障（严重过压故障）
	EvseWarningCode_CCM_L2LongTimeVoltageOverload         EvseWarningCode = 383 // L2: 长时间过压错误
	EvseWarningCode_CCM_L2VoltageOwe                      EvseWarningCode = 384 // L2: 欠压故障
	EvseWarningCode_CCM_L2VoltageOweReduceFrequency       EvseWarningCode = 385 // L2: 欠压降频
	EvseWarningCode_CCM_L2LongTimeVoltageOwe              EvseWarningCode = 386 // L2: 长时间欠压错误
	EvseWarningCode_CCM_L2OneLevelCurrentOverload         EvseWarningCode = 387 // L2: 一级过流故障（次级过流故障）
	EvseWarningCode_CCM_L2OneLevelCurrentOverloadTwice    EvseWarningCode = 388 // L2: 一级过流故障二次
	EvseWarningCode_CCM_L2TwoLevelCurrentOverload         EvseWarningCode = 389 // L2: 二级过流故障（验证过流故障）
	EvseWarningCode_CCM_L3OneLevelVoltageOverload         EvseWarningCode = 390 // L3: 一级过压故障（次级过压故障）
	EvseWarningCode_CCM_L3TwoLevelVoltageOverload         EvseWarningCode = 391 // L3: 二级过压故障（严重过压故障）
	EvseWarningCode_CCM_L3LongTimeVoltageOverload         EvseWarningCode = 392 // L3: 长时间过压错误
	EvseWarningCode_CCM_L3VoltageOwe                      EvseWarningCode = 393 // L3: 欠压故障
	EvseWarningCode_CCM_L3VoltageOweReduceFrequency       EvseWarningCode = 394 // L3：欠压降频
	EvseWarningCode_CCM_L3LongTimeVoltageOwe              EvseWarningCode = 395 // L3: 长时间欠压错误
	EvseWarningCode_CCM_L3OneLevelCurrentOverload         EvseWarningCode = 396 // L3:  一级过流故障（次级过流故障）
	EvseWarningCode_CCM_L3OneLevelCurrentOverloadTwice    EvseWarningCode = 397 // L3: 一级过流故障二次
	EvseWarningCode_CCM_L3TwoLevelCurrentOverload         EvseWarningCode = 398 // L3: 二级过流故障（严重过流故障）
	//*电动汽车BMS故障
	EvseWarningCode_BMS_CellOverVol               EvseWarningCode = 400 // 单体电池电压过高
	EvseWarningCode_BMS_CellOverTemp              EvseWarningCode = 401 // 单体电池温度过高
	EvseWarningCode_BMS_CommunicationFault        EvseWarningCode = 402 // BMS通信故障，充电桩无法与BMS通信
	EvseWarningCode_BMS_CommunicationOverTime     EvseWarningCode = 403 // BMS通信超时，充电桩与BMS通信超时
	EvseWarningCode_BMS_BatteryInversed           EvseWarningCode = 404 // 电池反接
	EvseWarningCode_BMS_BatteryMissed             EvseWarningCode = 405 // 电池未接
	EvseWarningCode_BMS_BatteryOverVol            EvseWarningCode = 406 // 电池总电压过高
	EvseWarningCode_BMS_OverSOC                   EvseWarningCode = 407 // 电池SOC过高
	EvseWarningCode_BMS_InsulationFault           EvseWarningCode = 408 // 电池组绝缘故障
	EvseWarningCode_BMS_ContactorFault            EvseWarningCode = 409 // 电池组输出连接器故障
	EvseWarningCode_BMS_OverExternalVoltage       EvseWarningCode = 410 // 外部电压大于 10V
	EvseWarningCode_BMS_BatteryUnderVol           EvseWarningCode = 411 // 电池总电压低
	EvseWarningCode_BMS_BatteryVoltageException   EvseWarningCode = 412 // 电池电压检测异常
	EvseWarningCode_BMS_CellVoltageDiffFault      EvseWarningCode = 413 // 单体电池压差超限
	EvseWarningCode_BMS_BusError                  EvseWarningCode = 416 // bms总线错误
	EvseWarningCode_BMS_CellSamplingPointOverTemp EvseWarningCode = 417 // 蓄电池模块采样点过温告警
	EvseWarningCode_BMS_BatteryOverTemp           EvseWarningCode = 418 // 电池组温度过⾼
	EvseWarningCode_BMS_RecvFault                 EvseWarningCode = 419 // 接收BMS故障停机
	//*电源模块故障
	EvseWarningCode_PSM_Fault                                 EvseWarningCode = 1200 // 充电模块故障
	EvseWarningCode_PSM_ACInputFault                          EvseWarningCode = 1201 // 充电模块交流输入故障
	EvseWarningCode_PSM_InputOverVol                          EvseWarningCode = 1202 // 充电模块交流输入过压
	EvseWarningCode_PSM_InputUnderVol                         EvseWarningCode = 1203 // 充电模块交流输入欠压
	EvseWarningCode_PSM_InputLackingPhase                     EvseWarningCode = 1204 // 充电模块输入缺相
	EvseWarningCode_PSM_OutputShort                           EvseWarningCode = 1205 // 充电模块直流输出短路
	EvseWarningCode_PSM_OutputOverCur                         EvseWarningCode = 1206 // 充电模块直流输出过流
	EvseWarningCode_PSM_OutputOverVol                         EvseWarningCode = 1207 // 充电模块直流输出过压
	EvseWarningCode_PSM_OutputUnderVol                        EvseWarningCode = 1208 // 充电模块直流输出欠压
	EvseWarningCode_PSM_OutputFault                           EvseWarningCode = 1209 // 充电模块输出异常
	EvseWarningCode_PSM_OverTemp                              EvseWarningCode = 1210 // 充电模块过温
	EvseWarningCode_PSM_CommunicationFault                    EvseWarningCode = 1211 // 充电模块通信告警
	EvseWarningCode_PSM_FanFault                              EvseWarningCode = 1212 // 充电模块风扇告警
	EvseWarningCode_PSM_CloseException                        EvseWarningCode = 1213 // 充电模块关闭异常
	EvseWarningCode_PSM_RectifierNO0CommunicationFault        EvseWarningCode = 1214 // 整流器 0#通讯故障
	EvseWarningCode_PSM_RectifierNO1CommunicationFault        EvseWarningCode = 1215 // 整流器 1#通讯故障
	EvseWarningCode_PSM_RectifierNO2CommunicationFault        EvseWarningCode = 1216 // 整流器 2#通讯故障
	EvseWarningCode_PSM_RectifierNO3CommunicationFault        EvseWarningCode = 1217 // 整流器 3#通讯故障
	EvseWarningCode_PSM_RectifierNO4CommunicationFault        EvseWarningCode = 1218 // 整流器 4#通讯故障
	EvseWarningCode_PSM_RectifierNO5CommunicationFault        EvseWarningCode = 1219 // 整流器 5#通讯故障
	EvseWarningCode_PSM_RectifierNO6CommunicationFault        EvseWarningCode = 1220 // 整流器 6#通讯故障
	EvseWarningCode_PSM_RectifierNO7CommunicationFault        EvseWarningCode = 1221 // 整流器 7#通讯故障
	EvseWarningCode_PSM_RectifierNO8CommunicationFault        EvseWarningCode = 1222 // 整流器 8#通讯故障
	EvseWarningCode_PSM_RectifierNO9CommunicationFault        EvseWarningCode = 1223 // 整流器 9#通讯故障
	EvseWarningCode_PSM_RectifierNO10CommunicationFault       EvseWarningCode = 1224 // 整流器 10#通讯故障
	EvseWarningCode_PSM_RectifierNO11CommunicationFault       EvseWarningCode = 1225 // 整流器 11#通讯故障
	EvseWarningCode_PSM_RectifierNO12CommunicationFault       EvseWarningCode = 1226 // 整流器 12#通讯故障
	EvseWarningCode_PSM_RectifierNO0Fault                     EvseWarningCode = 1227 // 整流器 0#故障
	EvseWarningCode_PSM_RectifierNO1Fault                     EvseWarningCode = 1228 // 整流器 1#故障
	EvseWarningCode_PSM_RectifierNO2Fault                     EvseWarningCode = 1229 // 整流器 2#故障
	EvseWarningCode_PSM_RectifierNO3Fault                     EvseWarningCode = 1230 // 整流器 3#故障
	EvseWarningCode_PSM_RectifierNO4Fault                     EvseWarningCode = 1231 // 整流器 4#故障
	EvseWarningCode_PSM_RectifierNO5Fault                     EvseWarningCode = 1232 // 整流器 5#故障
	EvseWarningCode_PSM_RectifierNO6Fault                     EvseWarningCode = 1233 // 整流器 6#故障
	EvseWarningCode_PSM_RectifierNO7Fault                     EvseWarningCode = 1234 // 整流器 7#故障
	EvseWarningCode_PSM_RectifierNO8Fault                     EvseWarningCode = 1235 // 整流器 8#故障
	EvseWarningCode_PSM_RectifierNO9Fault                     EvseWarningCode = 1236 // 整流器 9#故障
	EvseWarningCode_PSM_RectifierNO10Fault                    EvseWarningCode = 1237 // 整流器 10#故障
	EvseWarningCode_PSM_RectifierNO11Fault                    EvseWarningCode = 1238 // 整流器 11#故障
	EvseWarningCode_PSM_RectifierNO12Fault                    EvseWarningCode = 1239 // 整流器 12#故障
	EvseWarningCode_PSM_InsulationCommunicationFault          EvseWarningCode = 1240 // 绝缘仪通讯故障
	EvseWarningCode_PSM_PowerScreenCommunicationFault         EvseWarningCode = 1241 // 功率屏通讯故障
	EvseWarningCode_PSM_PowerIOFault                          EvseWarningCode = 1242 // 功率IO控制板故障
	EvseWarningCode_PSM_ACInputOverFrequency                  EvseWarningCode = 1243 // 交流输入过频率
	EvseWarningCode_PSM_ACInputUnderFrequency                 EvseWarningCode = 1244 // 交流输入欠频率
	EvseWarningCode_PSM_TypeDisaccord                         EvseWarningCode = 1245 // 模块类型不一致
	EvseWarningCode_PSM_GroupChargingModuleOverTemp           EvseWarningCode = 1246 // 群充模块过温
	EvseWarningCode_PSM_GroupChargingModuleCommunicationFault EvseWarningCode = 1247 // 群充模块通信故障
	EvseWarningCode_PSM_Initialization                        EvseWarningCode = 1248 // 模块未准备就绪
	EvseWarningCode_PSM_OutageFault                           EvseWarningCode = 1250 // 电源异常断电故障
	EvseWarningCode_PSM_Inversed                              EvseWarningCode = 1251 // 模块反接故障告警
	EvseWarningCode_PSM_InputPhaseImbalance                   EvseWarningCode = 1252 // 充电模块交流输入相不平衡
	EvseWarningCode_PSM_ProtectionWarning                     EvseWarningCode = 1253 // 充电模块保护告警
	EvseWarningCode_PSM_ProtectionFault                       EvseWarningCode = 1254 // 充电模块保护故障
	EvseWarningCode_PSM_PowerLimit                            EvseWarningCode = 1255 // 充电模块限功率告警
	EvseWarningCode_PSM_UnevenFlow                            EvseWarningCode = 1256 // 充电模块严重不均流
	EvseWarningCode_PSM_CurrentLimitWarning                   EvseWarningCode = 1257 // 充电模块限流告警
	EvseWarningCode_PSM_CurrentLimitFault                     EvseWarningCode = 1258 // 充电模块限流故障
	EvseWarningCode_PSM_OneLevelVoltageOverload               EvseWarningCode = 1259 // 一级过压错误
	EvseWarningCode_PSM_OneLevelOweVoltage                    EvseWarningCode = 1260 // 电网电压低，降速充电
	EvseWarningCode_PSM_TwoLevelOweVoltage                    EvseWarningCode = 1261 // 电网电压严重过低停止充电
	EvseWarningCode_PSM_LongTimeVoltageOverload               EvseWarningCode = 1262 // 长时间过压错误
	EvseWarningCode_PSM_LongTimeVoltageOwe                    EvseWarningCode = 1263 // 长时间欠压错误
	EvseWarningCode_PSM_ElectricFrequency                     EvseWarningCode = 1264 // 电网频率错误
	EvseWarningCode_PSM_TwoLevelVoltageOverload               EvseWarningCode = 1265 // 二级过压错误（严重过压错误）
	EvseWarningCode_PSM_VoltageOweReduceFrequency             EvseWarningCode = 1266 // 欠压降频
	EvseWarningCode_PSM_VoltageOwe                            EvseWarningCode = 1277 // 欠压错误
	EvseWarningCode_PSM_PMICWatchdogMessage                   EvseWarningCode = 1278 // PMIC电源芯片通信故障
	EvseWarningCode_PSM_MultipleVoltageException              EvseWarningCode = 1279 // 多次过、欠压错误
	EvseWarningCode_PSM_RCD_AC_LEAK                           EvseWarningCode = 1280 // RCD AC漏电错误
	EvseWarningCode_PSM_RCD_DC_LEAK                           EvseWarningCode = 1281 // RCD DC漏电错误
	EvseWarningCode_PSM_GridVoltageException                  EvseWarningCode = 1282 // 电网电压异常
	EvseWarningCode_PSM_CellLimit                             EvseWarningCode = 1283 // 电池限流
	//*充电控制单元故障 扩展
	EvseWarningCode_CCM_OverHumidity                 EvseWarningCode = 3001 // 柜体湿度过⾼
	EvseWarningCode_CCM_HumiditySensorException      EvseWarningCode = 3002 // 温度传感器异常
	EvseWarningCode_CCM_HumidityOverrun              EvseWarningCode = 3003 // 控制柜环境湿度超限
	EvseWarningCode_CCM_DCBreakerException           EvseWarningCode = 3004 // 直流断路器回检异常
	EvseWarningCode_CCM_DCBreakerActuateException    EvseWarningCode = 3005 // 直流断路器不能吸合
	EvseWarningCode_CCM_CtrlSignalActuateException   EvseWarningCode = 3006 // 系统检查控制信号异常吸合
	EvseWarningCode_CCM_CtrlSignalBreakException     EvseWarningCode = 3007 // 系统检查控制信号异常断开
	EvseWarningCode_CCM_InverterOverTemp             EvseWarningCode = 3008 // 逆变器⼀般过温
	EvseWarningCode_CCM_RefrigerationEquipmentFault  EvseWarningCode = 3009 // 制冷设备失效
	EvseWarningCode_CCM_RadiatorOverTemp             EvseWarningCode = 3010 // 散热器过温保护
	EvseWarningCode_CCM_EelecReactorOverTemp         EvseWarningCode = 3011 // 电抗器铁芯过温保护
	EvseWarningCode_CCM_PhaseError                   EvseWarningCode = 3012 // 相序错误保护
	EvseWarningCode_CCM_DSPException                 EvseWarningCode = 3013 // DSP保护
	EvseWarningCode_CCM_HardwareElecLeakageException EvseWarningCode = 3014 // 硬件漏电保护
	EvseWarningCode_CCM_HigthVoltageRelayFault       EvseWarningCode = 3015 // ⾼压继电器故障
	EvseWarningCode_CCM_VoltageException             EvseWarningCode = 3016 // 电压异常
	EvseWarningCode_CCM_CurrentException             EvseWarningCode = 3017 // 电流异常
	EvseWarningCode_CCM_PDPFault                     EvseWarningCode = 3018 // 硬件PDP故障
	EvseWarningCode_CCM_HMIFault                     EvseWarningCode = 3019 // HMI故障
	EvseWarningCode_CCM_PWMFault                     EvseWarningCode = 3020 // PWM故障
	EvseWarningCode_CCM_ConnectorTimeout             EvseWarningCode = 3021 // 连接充电枪超时
	EvseWarningCode_CCM_VoltageSampling              EvseWarningCode = 3022 // 电压采样异常
	EvseWarningCode_CCM_CurrentSampling              EvseWarningCode = 3023 // 电流采样异常
	EvseWarningCode_CCM_VehicleDisableCharge         EvseWarningCode = 3024 // 车辆禁⽌充电
	//后端告警
	EvseWarningCode_BACKEND_RemoeteStartFail EvseWarningCode = 100000000 //远程启动充电
)

// Enum value maps for EvseWarningCode.
var (
	EvseWarningCode_name = map[int32]string{
		0:         "Other",
		100:       "SYS_StorageFull",
		101:       "SYS_4GFault",
		102:       "SYS_SimFault",
		103:       "SYS_DialFault",
		104:       "SYS_ConnectError",
		105:       "SYS_Disconnect",
		106:       "SYS_PowerFailure",
		107:       "SYS_MeterError",
		108:       "SYS_CardReaderError",
		109:       "SYS_LCDError",
		110:       "SYS_MeterMeasureException",
		111:       "SYS_MeterCollectsException",
		112:       "SYS_SoftFault",
		113:       "SYS_AirInletOverTemp",
		114:       "SYS_AirInletUnderTemp",
		115:       "SYS_AirOutletOverTemp",
		116:       "SYS_SlaveFault",
		117:       "SYS_StorageFailure",
		118:       "SYS_PersistenceMemoryInconsistency",
		119:       "SYS_ADCInit",
		120:       "SYS_ConnectCPO",
		121:       "SYS_Register",
		122:       "SYS_ComBoardOffline",
		123:       "SYS_GPSAntenna",
		124:       "SYS_4GAntenna",
		125:       "SYS_SNUnset",
		126:       "SYS_ParameterUnset",
		127:       "SYS_ComGeneral",
		128:       "SYS_MoniterFault",
		300:       "CCM_EmergencyFault",
		301:       "CCM_LockFault",
		302:       "CCM_ACBreakerFault",
		303:       "CCM_SPDFault",
		304:       "CCM_SmogFault",
		305:       "CCM_DoorFault",
		306:       "CCM_WaterLogging",
		307:       "CCM_DCContactorFault",
		308:       "CCM_DCFuseFault",
		309:       "CCM_InsulationFault",
		310:       "CCM_InsulationWarning",
		311:       "CCM_FanFault",
		312:       "CCM_CC1Fault",
		313:       "CCM_OverTemp",
		314:       "CCM_ConnectorOverTemp",
		315:       "CCM_GunHolderFault",
		316:       "CCM_InputUnderVol",
		317:       "CCM_InputOverVol",
		318:       "CCM_AssisPowerFault",
		319:       "CCM_BleedOffOverTime",
		320:       "CCM_SwitchFault",
		321:       "CCM_DCOuputUnderVol",
		322:       "CCM_DCOutputOverVol",
		323:       "CCM_DCOutputOverCur",
		324:       "CCM_OverCurrent",
		325:       "CCM_ChargingPlugOut",
		326:       "CCM_ChargingFull",
		327:       "CCM_CommunicationFault",
		328:       "CCM_PEFault",
		329:       "CCM_TempSensorException",
		330:       "CCM_PDCircuitException",
		331:       "CCM_InputCircuitException",
		332:       "CCM_MainOutputCircuitException",
		333:       "CCM_AuxiliaryCircuitException",
		334:       "CCM_OutputContactAdhesion",
		335:       "CCM_OutputContactMisoperation",
		336:       "CCM_InputContactAdhesion",
		337:       "CCM_InputContactMisoperation",
		338:       "CCM_ParallelContactAdhesion",
		339:       "CCM_ParallelContactMisoperation",
		341:       "CCM_CANCommunicationFault",
		342:       "CCM_CAN1BusError",
		343:       "CCM_CAN3CommunicationFault",
		344:       "CCM_SYSAuxiliaryPowerFailure",
		345:       "CCM_AuxiliaryPowerFault",
		346:       "CCM_ChargerFault",
		347:       "CCM_TCUCommunicationFault",
		348:       "CCM_PowerControllerCommunicationFault",
		349:       "CCM_ACFuseFault",
		350:       "CCM_CPFault",
		352:       "CCM_RCDSelfTest",
		353:       "CCM_HighTemperature",
		354:       "CCM_LowTemperature",
		355:       "CCM_CPBroken",
		356:       "CCM_Pwm",
		357:       "CCM_OneLevelCurrentOverload",
		358:       "CCM_TwoLevelCurrentOverload",
		359:       "CCM_RelaySelfTest",
		360:       "CCM_RelayStatus",
		361:       "CCM_RelayControl",
		362:       "CCM_WatchDocMCUDeadlock",
		363:       "CCM_SupervisorKeyModuleDeadlock",
		364:       "CCM_SupervisorUnKeyModuleDeadlock",
		365:       "CCM_DipValue",
		366:       "CCM_PmicWatchDogMessage",
		367:       "CCM_RFIDModule",
		368:       "CCM_BLEModule",
		369:       "CCM_ShortCircuit",
		373:       "CCM_CP12VMonitor",
		374:       "CCM_ShortCircuitCharging",
		375:       "CCM_TemperatureSensorOpenCircuit",
		376:       "CCM_TemperatureSensorDriftCircuit",
		377:       "CCM_MultipleTemperatureOverload",
		378:       "CCM_OneLevelCurrentOverloadTwice",
		379:       "CCM_RelayPreDriverHighTemperature",
		380:       "CCM_RelayPreDriverOverload",
		381:       "CCM_L2OneLevelVoltageOverload",
		382:       "CCM_L2TwoLevelVoltageOverload",
		383:       "CCM_L2LongTimeVoltageOverload",
		384:       "CCM_L2VoltageOwe",
		385:       "CCM_L2VoltageOweReduceFrequency",
		386:       "CCM_L2LongTimeVoltageOwe",
		387:       "CCM_L2OneLevelCurrentOverload",
		388:       "CCM_L2OneLevelCurrentOverloadTwice",
		389:       "CCM_L2TwoLevelCurrentOverload",
		390:       "CCM_L3OneLevelVoltageOverload",
		391:       "CCM_L3TwoLevelVoltageOverload",
		392:       "CCM_L3LongTimeVoltageOverload",
		393:       "CCM_L3VoltageOwe",
		394:       "CCM_L3VoltageOweReduceFrequency",
		395:       "CCM_L3LongTimeVoltageOwe",
		396:       "CCM_L3OneLevelCurrentOverload",
		397:       "CCM_L3OneLevelCurrentOverloadTwice",
		398:       "CCM_L3TwoLevelCurrentOverload",
		400:       "BMS_CellOverVol",
		401:       "BMS_CellOverTemp",
		402:       "BMS_CommunicationFault",
		403:       "BMS_CommunicationOverTime",
		404:       "BMS_BatteryInversed",
		405:       "BMS_BatteryMissed",
		406:       "BMS_BatteryOverVol",
		407:       "BMS_OverSOC",
		408:       "BMS_InsulationFault",
		409:       "BMS_ContactorFault",
		410:       "BMS_OverExternalVoltage",
		411:       "BMS_BatteryUnderVol",
		412:       "BMS_BatteryVoltageException",
		413:       "BMS_CellVoltageDiffFault",
		416:       "BMS_BusError",
		417:       "BMS_CellSamplingPointOverTemp",
		418:       "BMS_BatteryOverTemp",
		419:       "BMS_RecvFault",
		1200:      "PSM_Fault",
		1201:      "PSM_ACInputFault",
		1202:      "PSM_InputOverVol",
		1203:      "PSM_InputUnderVol",
		1204:      "PSM_InputLackingPhase",
		1205:      "PSM_OutputShort",
		1206:      "PSM_OutputOverCur",
		1207:      "PSM_OutputOverVol",
		1208:      "PSM_OutputUnderVol",
		1209:      "PSM_OutputFault",
		1210:      "PSM_OverTemp",
		1211:      "PSM_CommunicationFault",
		1212:      "PSM_FanFault",
		1213:      "PSM_CloseException",
		1214:      "PSM_RectifierNO0CommunicationFault",
		1215:      "PSM_RectifierNO1CommunicationFault",
		1216:      "PSM_RectifierNO2CommunicationFault",
		1217:      "PSM_RectifierNO3CommunicationFault",
		1218:      "PSM_RectifierNO4CommunicationFault",
		1219:      "PSM_RectifierNO5CommunicationFault",
		1220:      "PSM_RectifierNO6CommunicationFault",
		1221:      "PSM_RectifierNO7CommunicationFault",
		1222:      "PSM_RectifierNO8CommunicationFault",
		1223:      "PSM_RectifierNO9CommunicationFault",
		1224:      "PSM_RectifierNO10CommunicationFault",
		1225:      "PSM_RectifierNO11CommunicationFault",
		1226:      "PSM_RectifierNO12CommunicationFault",
		1227:      "PSM_RectifierNO0Fault",
		1228:      "PSM_RectifierNO1Fault",
		1229:      "PSM_RectifierNO2Fault",
		1230:      "PSM_RectifierNO3Fault",
		1231:      "PSM_RectifierNO4Fault",
		1232:      "PSM_RectifierNO5Fault",
		1233:      "PSM_RectifierNO6Fault",
		1234:      "PSM_RectifierNO7Fault",
		1235:      "PSM_RectifierNO8Fault",
		1236:      "PSM_RectifierNO9Fault",
		1237:      "PSM_RectifierNO10Fault",
		1238:      "PSM_RectifierNO11Fault",
		1239:      "PSM_RectifierNO12Fault",
		1240:      "PSM_InsulationCommunicationFault",
		1241:      "PSM_PowerScreenCommunicationFault",
		1242:      "PSM_PowerIOFault",
		1243:      "PSM_ACInputOverFrequency",
		1244:      "PSM_ACInputUnderFrequency",
		1245:      "PSM_TypeDisaccord",
		1246:      "PSM_GroupChargingModuleOverTemp",
		1247:      "PSM_GroupChargingModuleCommunicationFault",
		1248:      "PSM_Initialization",
		1250:      "PSM_OutageFault",
		1251:      "PSM_Inversed",
		1252:      "PSM_InputPhaseImbalance",
		1253:      "PSM_ProtectionWarning",
		1254:      "PSM_ProtectionFault",
		1255:      "PSM_PowerLimit",
		1256:      "PSM_UnevenFlow",
		1257:      "PSM_CurrentLimitWarning",
		1258:      "PSM_CurrentLimitFault",
		1259:      "PSM_OneLevelVoltageOverload",
		1260:      "PSM_OneLevelOweVoltage",
		1261:      "PSM_TwoLevelOweVoltage",
		1262:      "PSM_LongTimeVoltageOverload",
		1263:      "PSM_LongTimeVoltageOwe",
		1264:      "PSM_ElectricFrequency",
		1265:      "PSM_TwoLevelVoltageOverload",
		1266:      "PSM_VoltageOweReduceFrequency",
		1277:      "PSM_VoltageOwe",
		1278:      "PSM_PMICWatchdogMessage",
		1279:      "PSM_MultipleVoltageException",
		1280:      "PSM_RCD_AC_LEAK",
		1281:      "PSM_RCD_DC_LEAK",
		1282:      "PSM_GridVoltageException",
		1283:      "PSM_CellLimit",
		3001:      "CCM_OverHumidity",
		3002:      "CCM_HumiditySensorException",
		3003:      "CCM_HumidityOverrun",
		3004:      "CCM_DCBreakerException",
		3005:      "CCM_DCBreakerActuateException",
		3006:      "CCM_CtrlSignalActuateException",
		3007:      "CCM_CtrlSignalBreakException",
		3008:      "CCM_InverterOverTemp",
		3009:      "CCM_RefrigerationEquipmentFault",
		3010:      "CCM_RadiatorOverTemp",
		3011:      "CCM_EelecReactorOverTemp",
		3012:      "CCM_PhaseError",
		3013:      "CCM_DSPException",
		3014:      "CCM_HardwareElecLeakageException",
		3015:      "CCM_HigthVoltageRelayFault",
		3016:      "CCM_VoltageException",
		3017:      "CCM_CurrentException",
		3018:      "CCM_PDPFault",
		3019:      "CCM_HMIFault",
		3020:      "CCM_PWMFault",
		3021:      "CCM_ConnectorTimeout",
		3022:      "CCM_VoltageSampling",
		3023:      "CCM_CurrentSampling",
		3024:      "CCM_VehicleDisableCharge",
		100000000: "BACKEND_RemoeteStartFail",
	}
	EvseWarningCode_value = map[string]int32{
		"Other":                                     0,
		"SYS_StorageFull":                           100,
		"SYS_4GFault":                               101,
		"SYS_SimFault":                              102,
		"SYS_DialFault":                             103,
		"SYS_ConnectError":                          104,
		"SYS_Disconnect":                            105,
		"SYS_PowerFailure":                          106,
		"SYS_MeterError":                            107,
		"SYS_CardReaderError":                       108,
		"SYS_LCDError":                              109,
		"SYS_MeterMeasureException":                 110,
		"SYS_MeterCollectsException":                111,
		"SYS_SoftFault":                             112,
		"SYS_AirInletOverTemp":                      113,
		"SYS_AirInletUnderTemp":                     114,
		"SYS_AirOutletOverTemp":                     115,
		"SYS_SlaveFault":                            116,
		"SYS_StorageFailure":                        117,
		"SYS_PersistenceMemoryInconsistency":        118,
		"SYS_ADCInit":                               119,
		"SYS_ConnectCPO":                            120,
		"SYS_Register":                              121,
		"SYS_ComBoardOffline":                       122,
		"SYS_GPSAntenna":                            123,
		"SYS_4GAntenna":                             124,
		"SYS_SNUnset":                               125,
		"SYS_ParameterUnset":                        126,
		"SYS_ComGeneral":                            127,
		"SYS_MoniterFault":                          128,
		"CCM_EmergencyFault":                        300,
		"CCM_LockFault":                             301,
		"CCM_ACBreakerFault":                        302,
		"CCM_SPDFault":                              303,
		"CCM_SmogFault":                             304,
		"CCM_DoorFault":                             305,
		"CCM_WaterLogging":                          306,
		"CCM_DCContactorFault":                      307,
		"CCM_DCFuseFault":                           308,
		"CCM_InsulationFault":                       309,
		"CCM_InsulationWarning":                     310,
		"CCM_FanFault":                              311,
		"CCM_CC1Fault":                              312,
		"CCM_OverTemp":                              313,
		"CCM_ConnectorOverTemp":                     314,
		"CCM_GunHolderFault":                        315,
		"CCM_InputUnderVol":                         316,
		"CCM_InputOverVol":                          317,
		"CCM_AssisPowerFault":                       318,
		"CCM_BleedOffOverTime":                      319,
		"CCM_SwitchFault":                           320,
		"CCM_DCOuputUnderVol":                       321,
		"CCM_DCOutputOverVol":                       322,
		"CCM_DCOutputOverCur":                       323,
		"CCM_OverCurrent":                           324,
		"CCM_ChargingPlugOut":                       325,
		"CCM_ChargingFull":                          326,
		"CCM_CommunicationFault":                    327,
		"CCM_PEFault":                               328,
		"CCM_TempSensorException":                   329,
		"CCM_PDCircuitException":                    330,
		"CCM_InputCircuitException":                 331,
		"CCM_MainOutputCircuitException":            332,
		"CCM_AuxiliaryCircuitException":             333,
		"CCM_OutputContactAdhesion":                 334,
		"CCM_OutputContactMisoperation":             335,
		"CCM_InputContactAdhesion":                  336,
		"CCM_InputContactMisoperation":              337,
		"CCM_ParallelContactAdhesion":               338,
		"CCM_ParallelContactMisoperation":           339,
		"CCM_CANCommunicationFault":                 341,
		"CCM_CAN1BusError":                          342,
		"CCM_CAN3CommunicationFault":                343,
		"CCM_SYSAuxiliaryPowerFailure":              344,
		"CCM_AuxiliaryPowerFault":                   345,
		"CCM_ChargerFault":                          346,
		"CCM_TCUCommunicationFault":                 347,
		"CCM_PowerControllerCommunicationFault":     348,
		"CCM_ACFuseFault":                           349,
		"CCM_CPFault":                               350,
		"CCM_RCDSelfTest":                           352,
		"CCM_HighTemperature":                       353,
		"CCM_LowTemperature":                        354,
		"CCM_CPBroken":                              355,
		"CCM_Pwm":                                   356,
		"CCM_OneLevelCurrentOverload":               357,
		"CCM_TwoLevelCurrentOverload":               358,
		"CCM_RelaySelfTest":                         359,
		"CCM_RelayStatus":                           360,
		"CCM_RelayControl":                          361,
		"CCM_WatchDocMCUDeadlock":                   362,
		"CCM_SupervisorKeyModuleDeadlock":           363,
		"CCM_SupervisorUnKeyModuleDeadlock":         364,
		"CCM_DipValue":                              365,
		"CCM_PmicWatchDogMessage":                   366,
		"CCM_RFIDModule":                            367,
		"CCM_BLEModule":                             368,
		"CCM_ShortCircuit":                          369,
		"CCM_CP12VMonitor":                          373,
		"CCM_ShortCircuitCharging":                  374,
		"CCM_TemperatureSensorOpenCircuit":          375,
		"CCM_TemperatureSensorDriftCircuit":         376,
		"CCM_MultipleTemperatureOverload":           377,
		"CCM_OneLevelCurrentOverloadTwice":          378,
		"CCM_RelayPreDriverHighTemperature":         379,
		"CCM_RelayPreDriverOverload":                380,
		"CCM_L2OneLevelVoltageOverload":             381,
		"CCM_L2TwoLevelVoltageOverload":             382,
		"CCM_L2LongTimeVoltageOverload":             383,
		"CCM_L2VoltageOwe":                          384,
		"CCM_L2VoltageOweReduceFrequency":           385,
		"CCM_L2LongTimeVoltageOwe":                  386,
		"CCM_L2OneLevelCurrentOverload":             387,
		"CCM_L2OneLevelCurrentOverloadTwice":        388,
		"CCM_L2TwoLevelCurrentOverload":             389,
		"CCM_L3OneLevelVoltageOverload":             390,
		"CCM_L3TwoLevelVoltageOverload":             391,
		"CCM_L3LongTimeVoltageOverload":             392,
		"CCM_L3VoltageOwe":                          393,
		"CCM_L3VoltageOweReduceFrequency":           394,
		"CCM_L3LongTimeVoltageOwe":                  395,
		"CCM_L3OneLevelCurrentOverload":             396,
		"CCM_L3OneLevelCurrentOverloadTwice":        397,
		"CCM_L3TwoLevelCurrentOverload":             398,
		"BMS_CellOverVol":                           400,
		"BMS_CellOverTemp":                          401,
		"BMS_CommunicationFault":                    402,
		"BMS_CommunicationOverTime":                 403,
		"BMS_BatteryInversed":                       404,
		"BMS_BatteryMissed":                         405,
		"BMS_BatteryOverVol":                        406,
		"BMS_OverSOC":                               407,
		"BMS_InsulationFault":                       408,
		"BMS_ContactorFault":                        409,
		"BMS_OverExternalVoltage":                   410,
		"BMS_BatteryUnderVol":                       411,
		"BMS_BatteryVoltageException":               412,
		"BMS_CellVoltageDiffFault":                  413,
		"BMS_BusError":                              416,
		"BMS_CellSamplingPointOverTemp":             417,
		"BMS_BatteryOverTemp":                       418,
		"BMS_RecvFault":                             419,
		"PSM_Fault":                                 1200,
		"PSM_ACInputFault":                          1201,
		"PSM_InputOverVol":                          1202,
		"PSM_InputUnderVol":                         1203,
		"PSM_InputLackingPhase":                     1204,
		"PSM_OutputShort":                           1205,
		"PSM_OutputOverCur":                         1206,
		"PSM_OutputOverVol":                         1207,
		"PSM_OutputUnderVol":                        1208,
		"PSM_OutputFault":                           1209,
		"PSM_OverTemp":                              1210,
		"PSM_CommunicationFault":                    1211,
		"PSM_FanFault":                              1212,
		"PSM_CloseException":                        1213,
		"PSM_RectifierNO0CommunicationFault":        1214,
		"PSM_RectifierNO1CommunicationFault":        1215,
		"PSM_RectifierNO2CommunicationFault":        1216,
		"PSM_RectifierNO3CommunicationFault":        1217,
		"PSM_RectifierNO4CommunicationFault":        1218,
		"PSM_RectifierNO5CommunicationFault":        1219,
		"PSM_RectifierNO6CommunicationFault":        1220,
		"PSM_RectifierNO7CommunicationFault":        1221,
		"PSM_RectifierNO8CommunicationFault":        1222,
		"PSM_RectifierNO9CommunicationFault":        1223,
		"PSM_RectifierNO10CommunicationFault":       1224,
		"PSM_RectifierNO11CommunicationFault":       1225,
		"PSM_RectifierNO12CommunicationFault":       1226,
		"PSM_RectifierNO0Fault":                     1227,
		"PSM_RectifierNO1Fault":                     1228,
		"PSM_RectifierNO2Fault":                     1229,
		"PSM_RectifierNO3Fault":                     1230,
		"PSM_RectifierNO4Fault":                     1231,
		"PSM_RectifierNO5Fault":                     1232,
		"PSM_RectifierNO6Fault":                     1233,
		"PSM_RectifierNO7Fault":                     1234,
		"PSM_RectifierNO8Fault":                     1235,
		"PSM_RectifierNO9Fault":                     1236,
		"PSM_RectifierNO10Fault":                    1237,
		"PSM_RectifierNO11Fault":                    1238,
		"PSM_RectifierNO12Fault":                    1239,
		"PSM_InsulationCommunicationFault":          1240,
		"PSM_PowerScreenCommunicationFault":         1241,
		"PSM_PowerIOFault":                          1242,
		"PSM_ACInputOverFrequency":                  1243,
		"PSM_ACInputUnderFrequency":                 1244,
		"PSM_TypeDisaccord":                         1245,
		"PSM_GroupChargingModuleOverTemp":           1246,
		"PSM_GroupChargingModuleCommunicationFault": 1247,
		"PSM_Initialization":                        1248,
		"PSM_OutageFault":                           1250,
		"PSM_Inversed":                              1251,
		"PSM_InputPhaseImbalance":                   1252,
		"PSM_ProtectionWarning":                     1253,
		"PSM_ProtectionFault":                       1254,
		"PSM_PowerLimit":                            1255,
		"PSM_UnevenFlow":                            1256,
		"PSM_CurrentLimitWarning":                   1257,
		"PSM_CurrentLimitFault":                     1258,
		"PSM_OneLevelVoltageOverload":               1259,
		"PSM_OneLevelOweVoltage":                    1260,
		"PSM_TwoLevelOweVoltage":                    1261,
		"PSM_LongTimeVoltageOverload":               1262,
		"PSM_LongTimeVoltageOwe":                    1263,
		"PSM_ElectricFrequency":                     1264,
		"PSM_TwoLevelVoltageOverload":               1265,
		"PSM_VoltageOweReduceFrequency":             1266,
		"PSM_VoltageOwe":                            1277,
		"PSM_PMICWatchdogMessage":                   1278,
		"PSM_MultipleVoltageException":              1279,
		"PSM_RCD_AC_LEAK":                           1280,
		"PSM_RCD_DC_LEAK":                           1281,
		"PSM_GridVoltageException":                  1282,
		"PSM_CellLimit":                             1283,
		"CCM_OverHumidity":                          3001,
		"CCM_HumiditySensorException":               3002,
		"CCM_HumidityOverrun":                       3003,
		"CCM_DCBreakerException":                    3004,
		"CCM_DCBreakerActuateException":             3005,
		"CCM_CtrlSignalActuateException":            3006,
		"CCM_CtrlSignalBreakException":              3007,
		"CCM_InverterOverTemp":                      3008,
		"CCM_RefrigerationEquipmentFault":           3009,
		"CCM_RadiatorOverTemp":                      3010,
		"CCM_EelecReactorOverTemp":                  3011,
		"CCM_PhaseError":                            3012,
		"CCM_DSPException":                          3013,
		"CCM_HardwareElecLeakageException":          3014,
		"CCM_HigthVoltageRelayFault":                3015,
		"CCM_VoltageException":                      3016,
		"CCM_CurrentException":                      3017,
		"CCM_PDPFault":                              3018,
		"CCM_HMIFault":                              3019,
		"CCM_PWMFault":                              3020,
		"CCM_ConnectorTimeout":                      3021,
		"CCM_VoltageSampling":                       3022,
		"CCM_CurrentSampling":                       3023,
		"CCM_VehicleDisableCharge":                  3024,
		"BACKEND_RemoeteStartFail":                  100000000,
	}
)

func (x EvseWarningCode) Enum() *EvseWarningCode {
	p := new(EvseWarningCode)
	*p = x
	return p
}

func (x EvseWarningCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseWarningCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[19].Descriptor()
}

func (EvseWarningCode) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[19]
}

func (x EvseWarningCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseWarningCode.Descriptor instead.
func (EvseWarningCode) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{19}
}

type EvseCtrlFunction int32

const (
	EvseCtrlFunction_ECF_UNKNOWN      EvseCtrlFunction = 0 // 未知
	EvseCtrlFunction_ECF_START_CHARGE EvseCtrlFunction = 1 // 启动充电
	EvseCtrlFunction_ECF_STOP_CHARGE  EvseCtrlFunction = 2 // 停止充电
	EvseCtrlFunction_ECF_Reboot       EvseCtrlFunction = 3 // 重启设备
	EvseCtrlFunction_ECF_Reset        EvseCtrlFunction = 4 // 回复出厂设置
)

// Enum value maps for EvseCtrlFunction.
var (
	EvseCtrlFunction_name = map[int32]string{
		0: "ECF_UNKNOWN",
		1: "ECF_START_CHARGE",
		2: "ECF_STOP_CHARGE",
		3: "ECF_Reboot",
		4: "ECF_Reset",
	}
	EvseCtrlFunction_value = map[string]int32{
		"ECF_UNKNOWN":      0,
		"ECF_START_CHARGE": 1,
		"ECF_STOP_CHARGE":  2,
		"ECF_Reboot":       3,
		"ECF_Reset":        4,
	}
)

func (x EvseCtrlFunction) Enum() *EvseCtrlFunction {
	p := new(EvseCtrlFunction)
	*p = x
	return p
}

func (x EvseCtrlFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseCtrlFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[20].Descriptor()
}

func (EvseCtrlFunction) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[20]
}

func (x EvseCtrlFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseCtrlFunction.Descriptor instead.
func (EvseCtrlFunction) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{20}
}

// SetConfigurationStatus 远程设置参数应答，设置状态定义
type SetConfigurationStatus int32

const (
	SetConfigurationStatus_CFS_Accepted       SetConfigurationStatus = 0 // 参数支持，已设置
	SetConfigurationStatus_CFS_Rejected       SetConfigurationStatus = 1 // 参数支持，但设置失败
	SetConfigurationStatus_CFS_RebootRequired SetConfigurationStatus = 2 // 参数支持，已设置，但需要重启生效
	SetConfigurationStatus_CFS_NotSupported   SetConfigurationStatus = 3 // 参数不支持
)

// Enum value maps for SetConfigurationStatus.
var (
	SetConfigurationStatus_name = map[int32]string{
		0: "CFS_Accepted",
		1: "CFS_Rejected",
		2: "CFS_RebootRequired",
		3: "CFS_NotSupported",
	}
	SetConfigurationStatus_value = map[string]int32{
		"CFS_Accepted":       0,
		"CFS_Rejected":       1,
		"CFS_RebootRequired": 2,
		"CFS_NotSupported":   3,
	}
)

func (x SetConfigurationStatus) Enum() *SetConfigurationStatus {
	p := new(SetConfigurationStatus)
	*p = x
	return p
}

func (x SetConfigurationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetConfigurationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[21].Descriptor()
}

func (SetConfigurationStatus) Type() protoreflect.EnumType {
	return &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes[21]
}

func (x SetConfigurationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetConfigurationStatus.Descriptor instead.
func (SetConfigurationStatus) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{21}
}

// 产品型号信息
type EvseModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                 // 设备型号ID
	Vendor          string          `protobuf:"bytes,2,opt,name=Vendor,proto3" json:"Vendor,omitempty"`                                                                          // 设备厂商
	Model           string          `protobuf:"bytes,3,opt,name=Model,proto3" json:"Model,omitempty"`                                                                            // 型号
	Product         string          `protobuf:"bytes,4,opt,name=Product,proto3" json:"Product,omitempty"`                                                                        // 产品系列
	Standard        EvseStandard    `protobuf:"varint,5,opt,name=standard,proto3,enum=evsepb.EvseStandard" json:"standard,omitempty"`                                            // 设备标准
	Phase           EvsePhase       `protobuf:"varint,6,opt,name=phase,proto3,enum=evsepb.EvsePhase" json:"phase,omitempty"`                                                     // 相
	RatedVoltage    int32           `protobuf:"varint,7,opt,name=rated_voltage,json=ratedVoltage,proto3" json:"rated_voltage,omitempty"`                                         // 额定电压 (单位: V)
	RatedCurrent    int32           `protobuf:"varint,8,opt,name=rated_current,json=ratedCurrent,proto3" json:"rated_current,omitempty"`                                         // 额定电流 (单位: A)
	RatedPower      int32           `protobuf:"varint,9,opt,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`                                               // 额定功率 (单位: W)
	UseVehicleType  UseVehicleType  `protobuf:"varint,10,opt,name=use_vehicle_type,json=useVehicleType,proto3,enum=evsepb.UseVehicleType" json:"use_vehicle_type,omitempty"`     // 使用车型
	EvseCurrentType EvseCurrentType `protobuf:"varint,11,opt,name=evse_current_type,json=evseCurrentType,proto3,enum=evsepb.EvseCurrentType" json:"evse_current_type,omitempty"` // 设备电流类型(交/直流)
	LinkEvseId      uint64          `protobuf:"varint,12,opt,name=link_evse_id,json=linkEvseId,proto3" json:"link_evse_id,omitempty"`                                            //关联设备ID
}

func (x *EvseModel) Reset() {
	*x = EvseModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseModel) ProtoMessage() {}

func (x *EvseModel) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseModel.ProtoReflect.Descriptor instead.
func (*EvseModel) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{0}
}

func (x *EvseModel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EvseModel) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *EvseModel) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EvseModel) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *EvseModel) GetStandard() EvseStandard {
	if x != nil {
		return x.Standard
	}
	return EvseStandard_ES_UNKNOWN
}

func (x *EvseModel) GetPhase() EvsePhase {
	if x != nil {
		return x.Phase
	}
	return EvsePhase_EP_UNKNOWN
}

func (x *EvseModel) GetRatedVoltage() int32 {
	if x != nil {
		return x.RatedVoltage
	}
	return 0
}

func (x *EvseModel) GetRatedCurrent() int32 {
	if x != nil {
		return x.RatedCurrent
	}
	return 0
}

func (x *EvseModel) GetRatedPower() int32 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

func (x *EvseModel) GetUseVehicleType() UseVehicleType {
	if x != nil {
		return x.UseVehicleType
	}
	return UseVehicleType_UVT_UNKNOWN
}

func (x *EvseModel) GetEvseCurrentType() EvseCurrentType {
	if x != nil {
		return x.EvseCurrentType
	}
	return EvseCurrentType_ECT_UNKNOWN
}

func (x *EvseModel) GetLinkEvseId() uint64 {
	if x != nil {
		return x.LinkEvseId
	}
	return 0
}

// EvseConfigKV 获取设备参数，参数和参数值信息定义
type EvseConfigKV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`            // 参数名
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`        // 参数值
	Readonly bool   `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"` // 只读。若等于1，表明参数不能改写。
}

func (x *EvseConfigKV) Reset() {
	*x = EvseConfigKV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseConfigKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseConfigKV) ProtoMessage() {}

func (x *EvseConfigKV) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseConfigKV.ProtoReflect.Descriptor instead.
func (*EvseConfigKV) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP(), []int{1}
}

func (x *EvseConfigKV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EvseConfigKV) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EvseConfigKV) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

var File_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto protoreflect.FileDescriptor

var file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDesc = []byte{
	0x0a, 0x31, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73,
	0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x22, 0xd2, 0x03, 0x0a, 0x09,
	0x45, 0x76, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x65, 0x76, 0x73,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65,
	0x76, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x76, 0x73, 0x65, 0x49, 0x64,
	0x22, 0x52, 0x0a, 0x0c, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x56,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x2a, 0x51, 0x0a, 0x09, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x53, 0x5f, 0x4f, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xd7, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x53,
	0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x53, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x53, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x45, 0x56, 0x53, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x53, 0x5f,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x56, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x53, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x5f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x09,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x53, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10,
	0x0a, 0x2a, 0x91, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x50, 0x56, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x50, 0x56,
	0x5f, 0x47, 0x4f, 0x49, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x50, 0x56, 0x5f,
	0x53, 0x49, 0x4e, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x50,
	0x56, 0x5f, 0x53, 0x5a, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x50,
	0x56, 0x5f, 0x59, 0x4b, 0x43, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x50, 0x56, 0x5f, 0x48,
	0x4b, 0x43, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x50, 0x56, 0x5f, 0x4f, 0x43, 0x50, 0x50,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x56, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f,
	0x4f, 0x54, 0x48, 0x10, 0x07, 0x2a, 0x50, 0x0a, 0x0c, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x5f, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x5f, 0x41, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x5f, 0x45, 0x55, 0x52,
	0x4f, 0x50, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x2a, 0x35, 0x0a, 0x09, 0x45, 0x76, 0x73, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x50, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x50, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03, 0x2a, 0x44,
	0x0a, 0x11, 0x45, 0x76, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4f, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x56, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x56, 0x54, 0x5f, 0x43,
	0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x56, 0x54, 0x5f, 0x42, 0x49, 0x4b,
	0x45, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0f, 0x45, 0x76, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x43, 0x54, 0x5f, 0x41,
	0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x43, 0x10, 0x02, 0x2a,
	0x80, 0x04, 0x0a, 0x0e, 0x45, 0x76, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4f, 0x53, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4f,
	0x53, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x4f, 0x53, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4f, 0x53, 0x5f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4f, 0x53, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f, 0x53, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x4f, 0x53, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4f, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x1f, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4f,
	0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x20, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x4f, 0x53, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10,
	0x32, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4f, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x69, 0x66, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x10, 0x33, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4f, 0x53, 0x5f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x34, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4f, 0x53,
	0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x35, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4f, 0x53, 0x5f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4f, 0x53,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x46,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x4f, 0x53, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x47, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x4f, 0x53, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4f, 0x53, 0x5f, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x10, 0x5b, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4f, 0x53, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x10, 0x64, 0x2a, 0x4a, 0x0a, 0x14, 0x45, 0x76, 0x73, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4f,
	0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x4f,
	0x53, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x32, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x4f, 0x4f, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x64, 0x2a, 0x61,
	0x0a, 0x13, 0x45, 0x76, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x45,
	0x41, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x50, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x4c, 0x45, 0x59, 0x10,
	0x04, 0x2a, 0xf9, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4d, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4d,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4d,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4d, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x56, 0x49,
	0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x56, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4d, 0x5f, 0x42, 0x4c, 0x55,
	0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x5f, 0x4d,
	0x41, 0x43, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4d, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0a, 0x2a, 0x98, 0x01,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4d, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x42, 0x59, 0x5f,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x05, 0x2a, 0x93, 0x05, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x52, 0x5f, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x52, 0x5f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52, 0x5f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x52,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x52, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x52, 0x5f, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x45, 0x56,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x52, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x52, 0x5f, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x52, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x52, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52, 0x5f, 0x42, 0x4d, 0x53, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x52, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x52, 0x5f, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x5f, 0x53, 0x6f, 0x63, 0x46,
	0x75, 0x6c, 0x6c, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x4e, 0x6f, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x12, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10,
	0x13, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x52, 0x5f, 0x4e, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52, 0x5f,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x52,
	0x5f, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x4f, 0x43, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x52, 0x5f, 0x43, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x52, 0x5f, 0x4c, 0x65, 0x61, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x52, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x66, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x6f,
	0x70, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x66, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52,
	0x5f, 0x45, 0x56, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x10, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x52, 0x5f, 0x4e, 0x6f, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x10, 0x68, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x52, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x43, 0x43, 0x31, 0x4e, 0x6f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x6a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x44,
	0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x6b, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x52, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xff, 0xc1, 0xd7, 0x2f, 0x2a, 0xe2,
	0x02, 0x0a, 0x09, 0x4f, 0x54, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x57, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x57, 0x5f,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x57, 0x5f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x57, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x57, 0x5f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x57, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10,
	0x0a, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x57, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x57, 0x5f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x57, 0x5f,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xad, 0x4d, 0x12, 0x21,
	0x0a, 0x1c, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xae,
	0x4d, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xaf, 0x4d, 0x12, 0x16, 0x0a, 0x11, 0x46,
	0x57, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0xb0, 0x4d, 0x2a, 0x71, 0x0a, 0x0d, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x0c, 0x45, 0x76, 0x73, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x46, 0x5f, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x46, 0x5f, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x72, 0x63, 0x65, 0x10,
	0x01, 0x2a, 0x88, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6e, 0x76, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x64, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x4f, 0x43, 0x10, 0x6a, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x41, 0x10, 0x88, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x10, 0x89, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x10,
	0x8a, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x10, 0x8b,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x8c, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x10, 0x8d, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x90, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x10, 0x91, 0x01, 0x12, 0x0e, 0x0a, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x93, 0x01, 0x2a, 0x7d, 0x0a, 0x10,
	0x45, 0x76, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x4c, 0x5f, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x4c, 0x5f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x57, 0x4c, 0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x4c, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x4c, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x57,
	0x4c, 0x5f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x10, 0x64, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x65, 0x2a, 0xef, 0x34, 0x0a, 0x0f,
	0x45, 0x76, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59,
	0x53, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x64, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x34, 0x47, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x69, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x66, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x68, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x59, 0x53, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x69, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x6a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x53,
	0x5f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x4c, 0x43, 0x44, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x6f, 0x66, 0x74, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x53, 0x5f, 0x41, 0x69,
	0x72, 0x49, 0x6e, 0x6c, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x71,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x5f, 0x41, 0x69, 0x72, 0x49, 0x6e, 0x6c, 0x65, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x59, 0x53, 0x5f, 0x41, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x10, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x6c,
	0x61, 0x76, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59,
	0x53, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x75, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x76, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59,
	0x53, 0x5f, 0x41, 0x44, 0x43, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x77, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x59, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x50, 0x4f, 0x10, 0x78, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10,
	0x79, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x6f, 0x6d, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x7a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59,
	0x53, 0x5f, 0x47, 0x50, 0x53, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x10, 0x7b, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x59, 0x53, 0x5f, 0x34, 0x47, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x10,
	0x7c, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x4e, 0x55, 0x6e, 0x73, 0x65, 0x74,
	0x10, 0x7d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x7e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59,
	0x53, 0x5f, 0x43, 0x6f, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x7f, 0x12, 0x15,
	0x0a, 0x10, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x65, 0x72, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x80, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x43, 0x4d, 0x5f, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xac, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xad, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x43, 0x4d, 0x5f, 0x41, 0x43, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xae, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43,
	0x43, 0x4d, 0x5f, 0x53, 0x50, 0x44, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xaf, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x43, 0x43, 0x4d, 0x5f, 0x53, 0x6d, 0x6f, 0x67, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xb0, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x6f, 0x6f, 0x72, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0xb1, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x10, 0xb2, 0x02, 0x12, 0x19, 0x0a,
	0x14, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xb3, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x43, 0x4d, 0x5f,
	0x44, 0x43, 0x46, 0x75, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xb4, 0x02, 0x12, 0x18,
	0x0a, 0x13, 0x43, 0x43, 0x4d, 0x5f, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xb5, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x43, 0x4d, 0x5f,
	0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0xb6, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x43, 0x4d, 0x5f, 0x46, 0x61, 0x6e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0xb7, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x43, 0x4d, 0x5f, 0x43,
	0x43, 0x31, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xb8, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x43,
	0x4d, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xb9, 0x02, 0x12, 0x1a, 0x0a,
	0x15, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xba, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x43, 0x4d,
	0x5f, 0x47, 0x75, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xbb, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x43, 0x4d, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0xbc, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43,
	0x4d, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0xbd,
	0x02, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x43, 0x4d, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xbe, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x43,
	0x43, 0x4d, 0x5f, 0x42, 0x6c, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x10, 0xbf, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x43, 0x4d, 0x5f, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc0, 0x02, 0x12, 0x18, 0x0a, 0x13,
	0x43, 0x43, 0x4d, 0x5f, 0x44, 0x43, 0x4f, 0x75, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x10, 0xc1, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x43,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0xc2, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x10, 0xc3, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x43,
	0x4d, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0xc4, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x4f, 0x75, 0x74, 0x10, 0xc5, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43,
	0x4d, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xc6,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc7, 0x02, 0x12, 0x10,
	0x0a, 0x0b, 0x43, 0x43, 0x4d, 0x5f, 0x50, 0x45, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc8, 0x02,
	0x12, 0x1c, 0x0a, 0x17, 0x43, 0x43, 0x4d, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc9, 0x02, 0x12, 0x1b,
	0x0a, 0x16, 0x43, 0x43, 0x4d, 0x5f, 0x50, 0x44, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xca, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43,
	0x43, 0x4d, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xcb, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x43,
	0x43, 0x4d, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xcc, 0x02,
	0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xcd, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x43, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x68, 0x65, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0xce, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xcf, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x43, 0x4d, 0x5f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x68, 0x65,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0xd0, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x43, 0x4d, 0x5f, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd1, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x43,
	0x4d, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x68, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xd2, 0x02, 0x12, 0x24, 0x0a, 0x1f,
	0x43, 0x43, 0x4d, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xd3, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xd5, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x41, 0x4e, 0x31, 0x42, 0x75,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd6, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x43, 0x4d,
	0x5f, 0x43, 0x41, 0x4e, 0x33, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd7, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x43,
	0x4d, 0x5f, 0x53, 0x59, 0x53, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xd8, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x43, 0x43, 0x4d, 0x5f, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd9, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43,
	0x43, 0x4d, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xda, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x43, 0x4d, 0x5f, 0x54, 0x43, 0x55, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xdb, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x43, 0x43, 0x4d, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xdc, 0x02, 0x12, 0x14,
	0x0a, 0x0f, 0x43, 0x43, 0x4d, 0x5f, 0x41, 0x43, 0x46, 0x75, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0xdd, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x50, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0xde, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x43, 0x4d, 0x5f, 0x52, 0x43,
	0x44, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x10, 0xe0, 0x02, 0x12, 0x18, 0x0a, 0x13,
	0x43, 0x43, 0x4d, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x10, 0xe1, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xe2, 0x02, 0x12,
	0x11, 0x0a, 0x0c, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x50, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x10,
	0xe3, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x43, 0x4d, 0x5f, 0x50, 0x77, 0x6d, 0x10, 0xe4, 0x02,
	0x12, 0x20, 0x0a, 0x1b, 0x43, 0x43, 0x4d, 0x5f, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10,
	0xe5, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x43, 0x4d, 0x5f, 0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x10, 0xe6, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74, 0x10, 0xe7, 0x02, 0x12, 0x14, 0x0a, 0x0f,
	0x43, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0xe8, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0xe9, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x43, 0x4d,
	0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x4d, 0x43, 0x55, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x10, 0xea, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x43, 0x4d, 0x5f, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0xeb, 0x02, 0x12, 0x26, 0x0a,
	0x21, 0x43, 0x43, 0x4d, 0x5f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x55,
	0x6e, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x10, 0xec, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x69, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0xed, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x43, 0x4d, 0x5f,
	0x50, 0x6d, 0x69, 0x63, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0xee, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x43, 0x4d, 0x5f, 0x52, 0x46,
	0x49, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x10, 0xef, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43,
	0x43, 0x4d, 0x5f, 0x42, 0x4c, 0x45, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x10, 0xf0, 0x02, 0x12,
	0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x10, 0xf1, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x50,
	0x31, 0x32, 0x56, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x10, 0xf5, 0x02, 0x12, 0x1d, 0x0a,
	0x18, 0x43, 0x43, 0x4d, 0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0xf6, 0x02, 0x12, 0x25, 0x0a, 0x20,
	0x43, 0x43, 0x4d, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x10, 0xf7, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x43, 0x4d, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x72, 0x69, 0x66,
	0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0xf8, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x43,
	0x43, 0x4d, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xf9,
	0x02, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x43, 0x4d, 0x5f, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x77, 0x69, 0x63, 0x65, 0x10, 0xfa, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x43, 0x4d, 0x5f,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x69,
	0x67, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xfb, 0x02,
	0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xfc,
	0x02, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x32, 0x4f, 0x6e, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x10, 0xfd, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x32, 0x54,
	0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xfe, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d,
	0x5f, 0x4c, 0x32, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xff, 0x02, 0x12, 0x15, 0x0a,
	0x10, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x32, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77,
	0x65, 0x10, 0x80, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x32, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x81, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x43,
	0x4d, 0x5f, 0x4c, 0x32, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x4f, 0x77, 0x65, 0x10, 0x82, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d,
	0x5f, 0x4c, 0x32, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x83, 0x03, 0x12, 0x27, 0x0a,
	0x22, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x32, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x77,
	0x69, 0x63, 0x65, 0x10, 0x84, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x32,
	0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x85, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43,
	0x4d, 0x5f, 0x4c, 0x33, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x86, 0x03, 0x12, 0x22,
	0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33, 0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10,
	0x87, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33, 0x4c, 0x6f, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x10, 0x88, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x65, 0x10, 0x89, 0x03, 0x12, 0x24, 0x0a,
	0x1f, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x10, 0x8a, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33, 0x4c, 0x6f, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x65, 0x10,
	0x8b, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33, 0x4f, 0x6e, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x10, 0x8c, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33,
	0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x77, 0x69, 0x63, 0x65, 0x10, 0x8d, 0x03, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x4c, 0x33, 0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x10, 0x8e, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f,
	0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0x90, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x4d, 0x53,
	0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x91, 0x03,
	0x12, 0x1b, 0x0a, 0x16, 0x42, 0x4d, 0x53, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x92, 0x03, 0x12, 0x1e, 0x0a,
	0x19, 0x42, 0x4d, 0x53, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x93, 0x03, 0x12, 0x18, 0x0a,
	0x13, 0x42, 0x4d, 0x53, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x64, 0x10, 0x94, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x5f, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x10, 0x95, 0x03, 0x12,
	0x17, 0x0a, 0x12, 0x42, 0x4d, 0x53, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0x96, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x4d, 0x53, 0x5f,
	0x4f, 0x76, 0x65, 0x72, 0x53, 0x4f, 0x43, 0x10, 0x97, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x4d,
	0x53, 0x5f, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x98, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x4d, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x99, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x42, 0x4d, 0x53, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x9a, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x42,
	0x4d, 0x53, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x10, 0x9b, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x4d, 0x53, 0x5f, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x9c, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x4d, 0x53, 0x5f, 0x43,
	0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x9d, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x5f, 0x42, 0x75,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa0, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x4d, 0x53,
	0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xa1, 0x03, 0x12, 0x18, 0x0a,
	0x13, 0x42, 0x4d, 0x53, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x10, 0xa2, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x5f, 0x52,
	0x65, 0x63, 0x76, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xa3, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x50,
	0x53, 0x4d, 0x5f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xb0, 0x09, 0x12, 0x15, 0x0a, 0x10, 0x50,
	0x53, 0x4d, 0x5f, 0x41, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xb1, 0x09, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x53, 0x4d, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0xb2, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x53, 0x4d,
	0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0xb3,
	0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0xb4, 0x09, 0x12, 0x14, 0x0a,
	0x0f, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x10, 0xb5, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x10, 0xb6, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x50,
	0x53, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x10, 0xb7, 0x09, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x10, 0xb8, 0x09, 0x12, 0x14, 0x0a, 0x0f,
	0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xb9, 0x09, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x10, 0xba, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x53, 0x4d, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xbb, 0x09, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x53, 0x4d, 0x5f, 0x46, 0x61, 0x6e, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0xbc, 0x09, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x53, 0x4d, 0x5f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xbd, 0x09, 0x12, 0x27,
	0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e,
	0x4f, 0x30, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0xbe, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52,
	0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xbf, 0x09,
	0x12, 0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4e, 0x4f, 0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc0, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d,
	0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x33, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xc1, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4e, 0x4f, 0x34, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc2, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x50,
	0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x35, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0xc3, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x36, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc4, 0x09, 0x12, 0x27, 0x0a,
	0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f,
	0x37, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0xc5, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x38, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc6, 0x09, 0x12,
	0x27, 0x0a, 0x22, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4e, 0x4f, 0x39, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc7, 0x09, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x53, 0x4d, 0x5f,
	0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31, 0x30, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xc8, 0x09, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31, 0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc9, 0x09, 0x12, 0x28, 0x0a, 0x23,
	0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31,
	0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0xca, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x30, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xcb, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xcc, 0x09, 0x12, 0x1a,
	0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e,
	0x4f, 0x32, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xcd, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53,
	0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x33, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0xce, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x34, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xcf, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4e, 0x4f, 0x35, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd0, 0x09, 0x12, 0x1a,
	0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e,
	0x4f, 0x36, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd1, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53,
	0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x37, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0xd2, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65,
	0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x38, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xd3, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4e, 0x4f, 0x39, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd4, 0x09, 0x12, 0x1b,
	0x0a, 0x16, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e,
	0x4f, 0x31, 0x30, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd5, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x50,
	0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31, 0x31,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd6, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x53, 0x4d, 0x5f,
	0x52, 0x65, 0x63, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x4f, 0x31, 0x32, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0xd7, 0x09, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x53, 0x4d, 0x5f, 0x49, 0x6e, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xd8, 0x09, 0x12, 0x26, 0x0a, 0x21,
	0x50, 0x53, 0x4d, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0xd9, 0x09, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x53, 0x4d, 0x5f, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x4f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xda, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x50,
	0x53, 0x4d, 0x5f, 0x41, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0xdb, 0x09, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x53,
	0x4d, 0x5f, 0x41, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0xdc, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x53,
	0x4d, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x10,
	0xdd, 0x09, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x53, 0x4d, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xde, 0x09, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x53, 0x4d, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xdf, 0x09, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x53, 0x4d, 0x5f,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe0,
	0x09, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0xe2, 0x09, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x53, 0x4d, 0x5f, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x10, 0xe3, 0x09, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x53,
	0x4d, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xe4, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0xe5, 0x09, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x53, 0x4d, 0x5f, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xe6, 0x09, 0x12, 0x13,
	0x0a, 0x0e, 0x50, 0x53, 0x4d, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x10, 0xe7, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x53, 0x4d, 0x5f, 0x55, 0x6e, 0x65, 0x76, 0x65,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x10, 0xe8, 0x09, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x53, 0x4d, 0x5f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0xe9, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x53, 0x4d, 0x5f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0xea, 0x09, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x10, 0xeb, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x53, 0x4d, 0x5f, 0x4f, 0x6e, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4f, 0x77, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0xec,
	0x09, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x53, 0x4d, 0x5f, 0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4f, 0x77, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0xed, 0x09, 0x12, 0x20,
	0x0a, 0x1b, 0x50, 0x53, 0x4d, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xee, 0x09,
	0x12, 0x1b, 0x0a, 0x16, 0x50, 0x53, 0x4d, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x65, 0x10, 0xef, 0x09, 0x12, 0x1a, 0x0a,
	0x15, 0x50, 0x53, 0x4d, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0xf0, 0x09, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x53, 0x4d,
	0x5f, 0x54, 0x77, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xf1, 0x09, 0x12, 0x22, 0x0a, 0x1d, 0x50,
	0x53, 0x4d, 0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x65, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0xf2, 0x09, 0x12,
	0x13, 0x0a, 0x0e, 0x50, 0x53, 0x4d, 0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77,
	0x65, 0x10, 0xfd, 0x09, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x53, 0x4d, 0x5f, 0x50, 0x4d, 0x49, 0x43,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0xfe, 0x09, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x53, 0x4d, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xff, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x53, 0x4d, 0x5f, 0x52, 0x43, 0x44,
	0x5f, 0x41, 0x43, 0x5f, 0x4c, 0x45, 0x41, 0x4b, 0x10, 0x80, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x50,
	0x53, 0x4d, 0x5f, 0x52, 0x43, 0x44, 0x5f, 0x44, 0x43, 0x5f, 0x4c, 0x45, 0x41, 0x4b, 0x10, 0x81,
	0x0a, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x53, 0x4d, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x82, 0x0a,
	0x12, 0x12, 0x0a, 0x0d, 0x50, 0x53, 0x4d, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x10, 0x83, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x4f, 0x76, 0x65, 0x72,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x10, 0xb9, 0x17, 0x12, 0x20, 0x0a, 0x1b, 0x43,
	0x43, 0x4d, 0x5f, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xba, 0x17, 0x12, 0x18, 0x0a,
	0x13, 0x43, 0x43, 0x4d, 0x5f, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x10, 0xbb, 0x17, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x43, 0x4d, 0x5f, 0x44,
	0x43, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xbc, 0x17, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x43, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xbd, 0x17, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x43, 0x4d, 0x5f,
	0x43, 0x74, 0x72, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xbe, 0x17, 0x12, 0x21, 0x0a,
	0x1c, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x74, 0x72, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xbf, 0x17,
	0x12, 0x19, 0x0a, 0x14, 0x43, 0x43, 0x4d, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xc0, 0x17, 0x12, 0x24, 0x0a, 0x1f, 0x43,
	0x43, 0x4d, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x69, 0x67, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc1,
	0x17, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x43, 0x4d, 0x5f, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xc2, 0x17, 0x12, 0x1d, 0x0a, 0x18,
	0x43, 0x43, 0x4d, 0x5f, 0x45, 0x65, 0x6c, 0x65, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0xc3, 0x17, 0x12, 0x13, 0x0a, 0x0e, 0x43,
	0x43, 0x4d, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xc4, 0x17,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x5f, 0x44, 0x53, 0x50, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc5, 0x17, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x43, 0x4d, 0x5f, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x63, 0x4c, 0x65, 0x61, 0x6b, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc6, 0x17, 0x12, 0x1f,
	0x0a, 0x1a, 0x43, 0x43, 0x4d, 0x5f, 0x48, 0x69, 0x67, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xc7, 0x17, 0x12,
	0x19, 0x0a, 0x14, 0x43, 0x43, 0x4d, 0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc8, 0x17, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x43,
	0x4d, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xc9, 0x17, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x43, 0x4d, 0x5f, 0x50, 0x44, 0x50,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xca, 0x17, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x43, 0x4d, 0x5f,
	0x48, 0x4d, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xcb, 0x17, 0x12, 0x11, 0x0a, 0x0c, 0x43,
	0x43, 0x4d, 0x5f, 0x50, 0x57, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0xcc, 0x17, 0x12, 0x19,
	0x0a, 0x14, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0xcd, 0x17, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x43, 0x4d,
	0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0xce, 0x17, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x43, 0x4d, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0xcf, 0x17, 0x12, 0x1d, 0x0a,
	0x18, 0x43, 0x43, 0x4d, 0x5f, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0xd0, 0x17, 0x12, 0x1f, 0x0a, 0x18,
	0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x80, 0xc2, 0xd7, 0x2f, 0x2a, 0x6d, 0x0a,
	0x10, 0x45, 0x76, 0x73, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x46, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x46, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x43, 0x46, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x43, 0x46, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x46, 0x53, 0x5f, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x46, 0x53, 0x5f,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x46,
	0x53, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x46, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescOnce sync.Once
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescData = file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDesc
)

func file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescGZIP() []byte {
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescOnce.Do(func() {
		file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescData)
	})
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDescData
}

var file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_goTypes = []interface{}{
	(EvseState)(0),              // 0: evsepb.EvseState
	(ConnectorState)(0),         // 1: evsepb.ConnectorState
	(EvseProtocolVendor)(0),     // 2: evsepb.EvseProtocolVendor
	(EvseStandard)(0),           // 3: evsepb.EvseStandard
	(EvsePhase)(0),              // 4: evsepb.EvsePhase
	(EvseOperationType)(0),      // 5: evsepb.EvseOperationType
	(UseVehicleType)(0),         // 6: evsepb.UseVehicleType
	(EvseCurrentType)(0),        // 7: evsepb.EvseCurrentType
	(EvseOrderState)(0),         // 8: evsepb.EvseOrderState
	(EvseOccupyOrderState)(0),   // 9: evsepb.EvseOccupyOrderState
	(EvseOrderSectionTag)(0),    // 10: evsepb.EvseOrderSectionTag
	(AuthorizationMode)(0),      // 11: evsepb.AuthorizationMode
	(ServiceMode)(0),            // 12: evsepb.ServiceMode
	(StopReason)(0),             // 13: evsepb.StopReason
	(OTAStatus)(0),              // 14: evsepb.OTAStatus
	(OTAConfStatus)(0),          // 15: evsepb.OTAConfStatus
	(EvseFunction)(0),           // 16: evsepb.EvseFunction
	(Measurand)(0),              // 17: evsepb.Measurand
	(EvseWarningLevel)(0),       // 18: evsepb.EvseWarningLevel
	(EvseWarningCode)(0),        // 19: evsepb.EvseWarningCode
	(EvseCtrlFunction)(0),       // 20: evsepb.EvseCtrlFunction
	(SetConfigurationStatus)(0), // 21: evsepb.SetConfigurationStatus
	(*EvseModel)(nil),           // 22: evsepb.EvseModel
	(*EvseConfigKV)(nil),        // 23: evsepb.EvseConfigKV
}
var file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_depIdxs = []int32{
	3, // 0: evsepb.EvseModel.standard:type_name -> evsepb.EvseStandard
	4, // 1: evsepb.EvseModel.phase:type_name -> evsepb.EvsePhase
	6, // 2: evsepb.EvseModel.use_vehicle_type:type_name -> evsepb.UseVehicleType
	7, // 3: evsepb.EvseModel.evse_current_type:type_name -> evsepb.EvseCurrentType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_init() }
func file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_init() {
	if File_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseConfigKV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_goTypes,
		DependencyIndexes: file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_depIdxs,
		EnumInfos:         file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_enumTypes,
		MessageInfos:      file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_msgTypes,
	}.Build()
	File_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto = out.File
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_rawDesc = nil
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_goTypes = nil
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_depIdxs = nil
}
