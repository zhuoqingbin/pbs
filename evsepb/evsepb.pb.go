// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: github.com/zhuoqingbin/pbs/evsepb/evsepb.proto

package evsepb

import (
	context "context"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EvseCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 二选一
	EvseId      uint64           `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`
	Sn          string           `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	ConnectorNo uint32           `protobuf:"varint,3,opt,name=connector_no,json=connectorNo,proto3" json:"connector_no,omitempty"`
	Function    EvseCtrlFunction `protobuf:"varint,4,opt,name=function,proto3,enum=evsepb.EvseCtrlFunction" json:"function,omitempty"`
}

func (x *EvseCtrlReq) Reset() {
	*x = EvseCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseCtrlReq) ProtoMessage() {}

func (x *EvseCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseCtrlReq.ProtoReflect.Descriptor instead.
func (*EvseCtrlReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{0}
}

func (x *EvseCtrlReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *EvseCtrlReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *EvseCtrlReq) GetConnectorNo() uint32 {
	if x != nil {
		return x.ConnectorNo
	}
	return 0
}

func (x *EvseCtrlReq) GetFunction() EvseCtrlFunction {
	if x != nil {
		return x.Function
	}
	return EvseCtrlFunction_ECF_UNKNOWN
}

type EvseCtrlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvseCtrlReply) Reset() {
	*x = EvseCtrlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseCtrlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseCtrlReply) ProtoMessage() {}

func (x *EvseCtrlReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseCtrlReply.ProtoReflect.Descriptor instead.
func (*EvseCtrlReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{1}
}

type EvseStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apdu *APDU `protobuf:"bytes,1,opt,name=apdu,proto3" json:"apdu,omitempty"`
}

func (x *EvseStreamReq) Reset() {
	*x = EvseStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseStreamReq) ProtoMessage() {}

func (x *EvseStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseStreamReq.ProtoReflect.Descriptor instead.
func (*EvseStreamReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{2}
}

func (x *EvseStreamReq) GetApdu() *APDU {
	if x != nil {
		return x.Apdu
	}
	return nil
}

type EvseStreamReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVendor EvseProtocolVendor `protobuf:"varint,1,opt,name=protocol_vendor,json=protocolVendor,proto3,enum=evsepb.EvseProtocolVendor" json:"protocol_vendor,omitempty"`
	Apdus          []*APDU            `protobuf:"bytes,2,rep,name=apdus,proto3" json:"apdus,omitempty"`
}

func (x *EvseStreamReply) Reset() {
	*x = EvseStreamReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseStreamReply) ProtoMessage() {}

func (x *EvseStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseStreamReply.ProtoReflect.Descriptor instead.
func (*EvseStreamReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{3}
}

func (x *EvseStreamReply) GetProtocolVendor() EvseProtocolVendor {
	if x != nil {
		return x.ProtocolVendor
	}
	return EvseProtocolVendor_EPV_UNKNOWN
}

func (x *EvseStreamReply) GetApdus() []*APDU {
	if x != nil {
		return x.Apdus
	}
	return nil
}

type GetConnectorByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConnectorByIDReq) Reset() {
	*x = GetConnectorByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorByIDReq) ProtoMessage() {}

func (x *GetConnectorByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorByIDReq.ProtoReflect.Descriptor instead.
func (*GetConnectorByIDReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{4}
}

func (x *GetConnectorByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetConnectorByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse      *Evse      `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
	Connector *Connector `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *GetConnectorByIDReply) Reset() {
	*x = GetConnectorByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorByIDReply) ProtoMessage() {}

func (x *GetConnectorByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorByIDReply.ProtoReflect.Descriptor instead.
func (*GetConnectorByIDReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{5}
}

func (x *GetConnectorByIDReply) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *GetConnectorByIDReply) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

type GetConnectorByNOReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2选一必须要传
	EvseId uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`
	Sn     string `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Cno    int32  `protobuf:"varint,3,opt,name=cno,proto3" json:"cno,omitempty"`
}

func (x *GetConnectorByNOReq) Reset() {
	*x = GetConnectorByNOReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorByNOReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorByNOReq) ProtoMessage() {}

func (x *GetConnectorByNOReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorByNOReq.ProtoReflect.Descriptor instead.
func (*GetConnectorByNOReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{6}
}

func (x *GetConnectorByNOReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *GetConnectorByNOReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *GetConnectorByNOReq) GetCno() int32 {
	if x != nil {
		return x.Cno
	}
	return 0
}

type GetConnectorByNOReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse      *Evse      `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
	Connector *Connector `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *GetConnectorByNOReply) Reset() {
	*x = GetConnectorByNOReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectorByNOReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorByNOReply) ProtoMessage() {}

func (x *GetConnectorByNOReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorByNOReply.ProtoReflect.Descriptor instead.
func (*GetConnectorByNOReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{7}
}

func (x *GetConnectorByNOReply) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *GetConnectorByNOReply) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

type GetEvseByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cno int32  `protobuf:"varint,2,opt,name=cno,proto3" json:"cno,omitempty"` // 设备编号, 编号是0时，查询全部枪头
}

func (x *GetEvseByIDReq) Reset() {
	*x = GetEvseByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvseByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvseByIDReq) ProtoMessage() {}

func (x *GetEvseByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvseByIDReq.ProtoReflect.Descriptor instead.
func (*GetEvseByIDReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{8}
}

func (x *GetEvseByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetEvseByIDReq) GetCno() int32 {
	if x != nil {
		return x.Cno
	}
	return 0
}

type GetEvseByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse       *Evse        `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
	Connectors []*Connector `protobuf:"bytes,2,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *GetEvseByIDReply) Reset() {
	*x = GetEvseByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvseByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvseByIDReply) ProtoMessage() {}

func (x *GetEvseByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvseByIDReply.ProtoReflect.Descriptor instead.
func (*GetEvseByIDReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{9}
}

func (x *GetEvseByIDReply) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *GetEvseByIDReply) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

type GetEvseBySNReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn  string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Cno int32  `protobuf:"varint,2,opt,name=cno,proto3" json:"cno,omitempty"` // 设备编号, 编号是0时，查询全部枪头
}

func (x *GetEvseBySNReq) Reset() {
	*x = GetEvseBySNReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvseBySNReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvseBySNReq) ProtoMessage() {}

func (x *GetEvseBySNReq) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvseBySNReq.ProtoReflect.Descriptor instead.
func (*GetEvseBySNReq) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{10}
}

func (x *GetEvseBySNReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *GetEvseBySNReq) GetCno() int32 {
	if x != nil {
		return x.Cno
	}
	return 0
}

type GetEvseBySNReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse       *Evse        `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
	Connectors []*Connector `protobuf:"bytes,2,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *GetEvseBySNReply) Reset() {
	*x = GetEvseBySNReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvseBySNReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvseBySNReply) ProtoMessage() {}

func (x *GetEvseBySNReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvseBySNReply.ProtoReflect.Descriptor instead.
func (*GetEvseBySNReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{11}
}

func (x *GetEvseBySNReply) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *GetEvseBySNReply) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

type UpsertEvseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse *Evse `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
}

func (x *UpsertEvseReply) Reset() {
	*x = UpsertEvseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertEvseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEvseReply) ProtoMessage() {}

func (x *UpsertEvseReply) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEvseReply.ProtoReflect.Descriptor instead.
func (*UpsertEvseReply) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertEvseReply) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

type Evse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                         // ID
	Sn                   string             `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`                                                                                          // 序列号
	OperatorId           uint64             `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                                                       // 运营商ID
	StationId            uint64             `protobuf:"varint,4,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`                                                          // 所属站点ID
	Iccid                string             `protobuf:"bytes,5,opt,name=iccid,proto3" json:"iccid,omitempty"`                                                                                    // sim卡识别号
	Mac                  string             `protobuf:"bytes,6,opt,name=mac,proto3" json:"mac,omitempty"`                                                                                        // mac地址，一般是蓝牙使用
	ConnectorNumber      int32              `protobuf:"varint,7,opt,name=connector_number,json=connectorNumber,proto3" json:"connector_number,omitempty"`                                        // 枪头数量
	State                EvseState          `protobuf:"varint,8,opt,name=state,proto3,enum=evsepb.EvseState" json:"state,omitempty"`                                                             // 状态
	FirmwareVersion      string             `protobuf:"bytes,9,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`                                         // 固件版本号
	ProtocolVersion      string             `protobuf:"bytes,10,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`                                        // 通讯版本号
	ProtocolVendor       EvseProtocolVendor `protobuf:"varint,11,opt,name=protocol_vendor,json=protocolVendor,proto3,enum=evsepb.EvseProtocolVendor" json:"protocol_vendor,omitempty"`           // 协议厂家
	Banned               bool               `protobuf:"varint,12,opt,name=banned,proto3" json:"banned,omitempty"`                                                                                // 是否屏蔽
	LastActivityTime     uint32             `protobuf:"varint,13,opt,name=last_activity_time,json=lastActivityTime,proto3" json:"last_activity_time,omitempty"`                                  // 最后一次保活时间
	LastDisconnectReason string             `protobuf:"bytes,14,opt,name=last_disconnect_reason,json=lastDisconnectReason,proto3" json:"last_disconnect_reason,omitempty"`                       // 上次链接断开原因
	AlarmNums            int32              `protobuf:"varint,15,opt,name=alarm_nums,json=alarmNums,proto3" json:"alarm_nums,omitempty"`                                                         // 告警总数
	EvseOperationType    EvseOperationType  `protobuf:"varint,16,opt,name=evse_operation_type,json=evseOperationType,proto3,enum=evsepb.EvseOperationType" json:"evse_operation_type,omitempty"` // 设备运营类型
	CurrentLimit         int32              `protobuf:"varint,17,opt,name=current_limit,json=currentLimit,proto3" json:"current_limit,omitempty"`                                                // 电流限制
	// 设备型号信息
	EvseModel *EvseModel `protobuf:"bytes,18,opt,name=evse_model,json=evseModel,proto3" json:"evse_model,omitempty"`
	// 支持的功能列表开关
	Functions []EvseFunction `protobuf:"varint,19,rep,packed,name=functions,proto3,enum=evsepb.EvseFunction" json:"functions,omitempty"` // 功能开关
}

func (x *Evse) Reset() {
	*x = Evse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evse) ProtoMessage() {}

func (x *Evse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evse.ProtoReflect.Descriptor instead.
func (*Evse) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{13}
}

func (x *Evse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Evse) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *Evse) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Evse) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *Evse) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Evse) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Evse) GetConnectorNumber() int32 {
	if x != nil {
		return x.ConnectorNumber
	}
	return 0
}

func (x *Evse) GetState() EvseState {
	if x != nil {
		return x.State
	}
	return EvseState_ES_NONACTIVATED
}

func (x *Evse) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Evse) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *Evse) GetProtocolVendor() EvseProtocolVendor {
	if x != nil {
		return x.ProtocolVendor
	}
	return EvseProtocolVendor_EPV_UNKNOWN
}

func (x *Evse) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *Evse) GetLastActivityTime() uint32 {
	if x != nil {
		return x.LastActivityTime
	}
	return 0
}

func (x *Evse) GetLastDisconnectReason() string {
	if x != nil {
		return x.LastDisconnectReason
	}
	return ""
}

func (x *Evse) GetAlarmNums() int32 {
	if x != nil {
		return x.AlarmNums
	}
	return 0
}

func (x *Evse) GetEvseOperationType() EvseOperationType {
	if x != nil {
		return x.EvseOperationType
	}
	return EvseOperationType_EOT_UNKNOWN
}

func (x *Evse) GetCurrentLimit() int32 {
	if x != nil {
		return x.CurrentLimit
	}
	return 0
}

func (x *Evse) GetEvseModel() *EvseModel {
	if x != nil {
		return x.EvseModel
	}
	return nil
}

func (x *Evse) GetFunctions() []EvseFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // ID
	EvseId      uint64         `protobuf:"varint,2,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`                  // 设备ID
	ConnectorNo int32          `protobuf:"varint,3,opt,name=connector_no,json=connectorNo,proto3" json:"connector_no,omitempty"`   // 枪头编号
	Desc        string         `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`                                     // 枪头描述
	LastPriceId uint64         `protobuf:"varint,5,opt,name=last_price_id,json=lastPriceId,proto3" json:"last_price_id,omitempty"` // 上次设置计费模板的ID，如果一样，就不再下发计费模板命令了
	State       ConnectorState `protobuf:"varint,6,opt,name=state,proto3,enum=evsepb.ConnectorState" json:"state,omitempty"`       // 枪当前状态
	OrderId     uint64         `protobuf:"varint,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`               // 平台生成的设备订单号
	RecordId    string         `protobuf:"bytes,8,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`             // 设备上送的订单号
	Power       uint32         `protobuf:"varint,9,opt,name=power,proto3" json:"power,omitempty"`                                  // 功率, 单位:W 精度:0.01W
	CurrentA    uint32         `protobuf:"varint,10,opt,name=current_a,json=currentA,proto3" json:"current_a,omitempty"`           // A相电流, 单位:A 精度:0.01A
	CurrentB    uint32         `protobuf:"varint,11,opt,name=current_b,json=currentB,proto3" json:"current_b,omitempty"`           // B相电流, 单位:A 精度:0.01A
	CurrentC    uint32         `protobuf:"varint,12,opt,name=current_c,json=currentC,proto3" json:"current_c,omitempty"`           // C相电流, 单位:A 精度:0.01A
	VoltageA    uint32         `protobuf:"varint,13,opt,name=voltage_a,json=voltageA,proto3" json:"voltage_a,omitempty"`           // A相电压, 单位:V 精度:0.01V
	VoltageB    uint32         `protobuf:"varint,14,opt,name=voltage_b,json=voltageB,proto3" json:"voltage_b,omitempty"`           // B相电压, 单位:V 精度:0.01V
	VoltageC    uint32         `protobuf:"varint,15,opt,name=voltage_c,json=voltageC,proto3" json:"voltage_c,omitempty"`           // C相电压, 单位:V 精度:0.01V
	Temperature int32          `protobuf:"varint,16,opt,name=temperature,proto3" json:"temperature,omitempty"`                     // 温度, 单位: ℃
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP(), []int{14}
}

func (x *Connector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Connector) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *Connector) GetConnectorNo() int32 {
	if x != nil {
		return x.ConnectorNo
	}
	return 0
}

func (x *Connector) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Connector) GetLastPriceId() uint64 {
	if x != nil {
		return x.LastPriceId
	}
	return 0
}

func (x *Connector) GetState() ConnectorState {
	if x != nil {
		return x.State
	}
	return ConnectorState_CS_Unavailable
}

func (x *Connector) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Connector) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *Connector) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Connector) GetCurrentA() uint32 {
	if x != nil {
		return x.CurrentA
	}
	return 0
}

func (x *Connector) GetCurrentB() uint32 {
	if x != nil {
		return x.CurrentB
	}
	return 0
}

func (x *Connector) GetCurrentC() uint32 {
	if x != nil {
		return x.CurrentC
	}
	return 0
}

func (x *Connector) GetVoltageA() uint32 {
	if x != nil {
		return x.VoltageA
	}
	return 0
}

func (x *Connector) GetVoltageB() uint32 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *Connector) GetVoltageC() uint32 {
	if x != nil {
		return x.VoltageC
	}
	return 0
}

func (x *Connector) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

var File_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto protoreflect.FileDescriptor

var file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDesc = []byte{
	0x0a, 0x32, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73,
	0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x1a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x63,
	0x2f, 0x70, 0x62, 0x73, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2f, 0x65,
	0x76, 0x73, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97,
	0x01, 0x0a, 0x0b, 0x45, 0x76, 0x73, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x76, 0x73, 0x65,
	0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31, 0x0a, 0x0d, 0x45, 0x76, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x61, 0x70,
	0x64, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70,
	0x62, 0x2e, 0x41, 0x50, 0x44, 0x55, 0x52, 0x04, 0x61, 0x70, 0x64, 0x75, 0x22, 0x7a, 0x0a, 0x0f,
	0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x61, 0x70, 0x64, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x41, 0x50, 0x44,
	0x55, 0x52, 0x05, 0x61, 0x70, 0x64, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x79, 0x4e, 0x4f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x18, 0x0a, 0x03, 0x63, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x03, 0x63, 0x6e, 0x6f, 0x22, 0x6a, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x4e,
	0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x63, 0x6e, 0x6f, 0x22, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62,
	0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x3a,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x53, 0x4e, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x6f, 0x22, 0x67, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x53, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x76, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x22, 0xf6, 0x05, 0x0a, 0x04, 0x45, 0x76, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x65,
	0x76, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x65, 0x76, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x65,
	0x76, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x09, 0x65, 0x76, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a,
	0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xdb, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32,
	0xda, 0x03, 0x0a, 0x0b, 0x45, 0x76, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x76, 0x73, 0x65, 0x12, 0x0c, 0x2e,
	0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x1a, 0x17, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x76, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x42,
	0x79, 0x53, 0x4e, 0x12, 0x16, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x53, 0x4e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x4e, 0x4f, 0x12, 0x1b, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x79, 0x4e, 0x4f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x4e,
	0x4f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x45, 0x76, 0x73, 0x65, 0x43, 0x74, 0x72, 0x6c,
	0x12, 0x13, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x43, 0x74,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x73, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x27, 0x5a, 0x25,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x74,
	0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x63, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x65,
	0x76, 0x73, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescOnce sync.Once
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescData = file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDesc
)

func file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescGZIP() []byte {
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescOnce.Do(func() {
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescData)
	})
	return file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDescData
}

var file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_goTypes = []interface{}{
	(*EvseCtrlReq)(nil),           // 0: evsepb.EvseCtrlReq
	(*EvseCtrlReply)(nil),         // 1: evsepb.EvseCtrlReply
	(*EvseStreamReq)(nil),         // 2: evsepb.EvseStreamReq
	(*EvseStreamReply)(nil),       // 3: evsepb.EvseStreamReply
	(*GetConnectorByIDReq)(nil),   // 4: evsepb.GetConnectorByIDReq
	(*GetConnectorByIDReply)(nil), // 5: evsepb.GetConnectorByIDReply
	(*GetConnectorByNOReq)(nil),   // 6: evsepb.GetConnectorByNOReq
	(*GetConnectorByNOReply)(nil), // 7: evsepb.GetConnectorByNOReply
	(*GetEvseByIDReq)(nil),        // 8: evsepb.GetEvseByIDReq
	(*GetEvseByIDReply)(nil),      // 9: evsepb.GetEvseByIDReply
	(*GetEvseBySNReq)(nil),        // 10: evsepb.GetEvseBySNReq
	(*GetEvseBySNReply)(nil),      // 11: evsepb.GetEvseBySNReply
	(*UpsertEvseReply)(nil),       // 12: evsepb.UpsertEvseReply
	(*Evse)(nil),                  // 13: evsepb.Evse
	(*Connector)(nil),             // 14: evsepb.Connector
	(EvseCtrlFunction)(0),         // 15: evsepb.EvseCtrlFunction
	(*APDU)(nil),                  // 16: evsepb.APDU
	(EvseProtocolVendor)(0),       // 17: evsepb.EvseProtocolVendor
	(EvseState)(0),                // 18: evsepb.EvseState
	(EvseOperationType)(0),        // 19: evsepb.EvseOperationType
	(*EvseModel)(nil),             // 20: evsepb.EvseModel
	(EvseFunction)(0),             // 21: evsepb.EvseFunction
	(ConnectorState)(0),           // 22: evsepb.ConnectorState
}
var file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_depIdxs = []int32{
	15, // 0: evsepb.EvseCtrlReq.function:type_name -> evsepb.EvseCtrlFunction
	16, // 1: evsepb.EvseStreamReq.apdu:type_name -> evsepb.APDU
	17, // 2: evsepb.EvseStreamReply.protocol_vendor:type_name -> evsepb.EvseProtocolVendor
	16, // 3: evsepb.EvseStreamReply.apdus:type_name -> evsepb.APDU
	13, // 4: evsepb.GetConnectorByIDReply.evse:type_name -> evsepb.Evse
	14, // 5: evsepb.GetConnectorByIDReply.connector:type_name -> evsepb.Connector
	13, // 6: evsepb.GetConnectorByNOReply.evse:type_name -> evsepb.Evse
	14, // 7: evsepb.GetConnectorByNOReply.connector:type_name -> evsepb.Connector
	13, // 8: evsepb.GetEvseByIDReply.evse:type_name -> evsepb.Evse
	14, // 9: evsepb.GetEvseByIDReply.connectors:type_name -> evsepb.Connector
	13, // 10: evsepb.GetEvseBySNReply.evse:type_name -> evsepb.Evse
	14, // 11: evsepb.GetEvseBySNReply.connectors:type_name -> evsepb.Connector
	13, // 12: evsepb.UpsertEvseReply.evse:type_name -> evsepb.Evse
	18, // 13: evsepb.Evse.state:type_name -> evsepb.EvseState
	17, // 14: evsepb.Evse.protocol_vendor:type_name -> evsepb.EvseProtocolVendor
	19, // 15: evsepb.Evse.evse_operation_type:type_name -> evsepb.EvseOperationType
	20, // 16: evsepb.Evse.evse_model:type_name -> evsepb.EvseModel
	21, // 17: evsepb.Evse.functions:type_name -> evsepb.EvseFunction
	22, // 18: evsepb.Connector.state:type_name -> evsepb.ConnectorState
	13, // 19: evsepb.EvseService.UpsertEvse:input_type -> evsepb.Evse
	10, // 20: evsepb.EvseService.GetEvseBySN:input_type -> evsepb.GetEvseBySNReq
	8,  // 21: evsepb.EvseService.GetEvseByID:input_type -> evsepb.GetEvseByIDReq
	4,  // 22: evsepb.EvseService.GetConnectorByID:input_type -> evsepb.GetConnectorByIDReq
	6,  // 23: evsepb.EvseService.GetConnectorByNO:input_type -> evsepb.GetConnectorByNOReq
	2,  // 24: evsepb.EvseService.EvseStream:input_type -> evsepb.EvseStreamReq
	0,  // 25: evsepb.EvseService.EvseCtrl:input_type -> evsepb.EvseCtrlReq
	12, // 26: evsepb.EvseService.UpsertEvse:output_type -> evsepb.UpsertEvseReply
	11, // 27: evsepb.EvseService.GetEvseBySN:output_type -> evsepb.GetEvseBySNReply
	9,  // 28: evsepb.EvseService.GetEvseByID:output_type -> evsepb.GetEvseByIDReply
	5,  // 29: evsepb.EvseService.GetConnectorByID:output_type -> evsepb.GetConnectorByIDReply
	7,  // 30: evsepb.EvseService.GetConnectorByNO:output_type -> evsepb.GetConnectorByNOReply
	3,  // 31: evsepb.EvseService.EvseStream:output_type -> evsepb.EvseStreamReply
	1,  // 32: evsepb.EvseService.EvseCtrl:output_type -> evsepb.EvseCtrlReply
	26, // [26:33] is the sub-list for method output_type
	19, // [19:26] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_init() }
func file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_init() {
	if File_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto != nil {
		return
	}
	file_gitlab_goiot_net_chargingc_pbs_evsepb_types_proto_init()
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evse_ctrl_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseCtrlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseStreamReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorByNOReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectorByNOReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvseByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvseByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvseBySNReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvseBySNReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertEvseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_goTypes,
		DependencyIndexes: file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_depIdxs,
		MessageInfos:      file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_msgTypes,
	}.Build()
	File_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto = out.File
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_rawDesc = nil
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_goTypes = nil
	file_gitlab_goiot_net_chargingc_pbs_evsepb_evsepb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EvseServiceClient is the client API for EvseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvseServiceClient interface {
	// UpsertEvse 添加设备
	UpsertEvse(ctx context.Context, in *Evse, opts ...grpc.CallOption) (*UpsertEvseReply, error)
	// GetEvseBySN
	GetEvseBySN(ctx context.Context, in *GetEvseBySNReq, opts ...grpc.CallOption) (*GetEvseBySNReply, error)
	// GetEvseByID
	GetEvseByID(ctx context.Context, in *GetEvseByIDReq, opts ...grpc.CallOption) (*GetEvseByIDReply, error)
	// GetConnectorByID
	GetConnectorByID(ctx context.Context, in *GetConnectorByIDReq, opts ...grpc.CallOption) (*GetConnectorByIDReply, error)
	// GetConnectorByNO
	GetConnectorByNO(ctx context.Context, in *GetConnectorByNOReq, opts ...grpc.CallOption) (*GetConnectorByNOReply, error)
	// 设备数据交互
	//
	// EvseStream 设备请求数据流处理
	EvseStream(ctx context.Context, in *EvseStreamReq, opts ...grpc.CallOption) (*EvseStreamReply, error)
	// EvseCtrl 设备控制请求
	EvseCtrl(ctx context.Context, in *EvseCtrlReq, opts ...grpc.CallOption) (*EvseCtrlReply, error)
}

type evseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvseServiceClient(cc grpc.ClientConnInterface) EvseServiceClient {
	return &evseServiceClient{cc}
}

func (c *evseServiceClient) UpsertEvse(ctx context.Context, in *Evse, opts ...grpc.CallOption) (*UpsertEvseReply, error) {
	out := new(UpsertEvseReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/UpsertEvse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) GetEvseBySN(ctx context.Context, in *GetEvseBySNReq, opts ...grpc.CallOption) (*GetEvseBySNReply, error) {
	out := new(GetEvseBySNReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/GetEvseBySN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) GetEvseByID(ctx context.Context, in *GetEvseByIDReq, opts ...grpc.CallOption) (*GetEvseByIDReply, error) {
	out := new(GetEvseByIDReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/GetEvseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) GetConnectorByID(ctx context.Context, in *GetConnectorByIDReq, opts ...grpc.CallOption) (*GetConnectorByIDReply, error) {
	out := new(GetConnectorByIDReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/GetConnectorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) GetConnectorByNO(ctx context.Context, in *GetConnectorByNOReq, opts ...grpc.CallOption) (*GetConnectorByNOReply, error) {
	out := new(GetConnectorByNOReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/GetConnectorByNO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) EvseStream(ctx context.Context, in *EvseStreamReq, opts ...grpc.CallOption) (*EvseStreamReply, error) {
	out := new(EvseStreamReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/EvseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) EvseCtrl(ctx context.Context, in *EvseCtrlReq, opts ...grpc.CallOption) (*EvseCtrlReply, error) {
	out := new(EvseCtrlReply)
	err := c.cc.Invoke(ctx, "/evsepb.EvseService/EvseCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvseServiceServer is the server API for EvseService service.
type EvseServiceServer interface {
	// UpsertEvse 添加设备
	UpsertEvse(context.Context, *Evse) (*UpsertEvseReply, error)
	// GetEvseBySN
	GetEvseBySN(context.Context, *GetEvseBySNReq) (*GetEvseBySNReply, error)
	// GetEvseByID
	GetEvseByID(context.Context, *GetEvseByIDReq) (*GetEvseByIDReply, error)
	// GetConnectorByID
	GetConnectorByID(context.Context, *GetConnectorByIDReq) (*GetConnectorByIDReply, error)
	// GetConnectorByNO
	GetConnectorByNO(context.Context, *GetConnectorByNOReq) (*GetConnectorByNOReply, error)
	// 设备数据交互
	//
	// EvseStream 设备请求数据流处理
	EvseStream(context.Context, *EvseStreamReq) (*EvseStreamReply, error)
	// EvseCtrl 设备控制请求
	EvseCtrl(context.Context, *EvseCtrlReq) (*EvseCtrlReply, error)
}

// UnimplementedEvseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEvseServiceServer struct {
}

func (*UnimplementedEvseServiceServer) UpsertEvse(context.Context, *Evse) (*UpsertEvseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEvse not implemented")
}
func (*UnimplementedEvseServiceServer) GetEvseBySN(context.Context, *GetEvseBySNReq) (*GetEvseBySNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvseBySN not implemented")
}
func (*UnimplementedEvseServiceServer) GetEvseByID(context.Context, *GetEvseByIDReq) (*GetEvseByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvseByID not implemented")
}
func (*UnimplementedEvseServiceServer) GetConnectorByID(context.Context, *GetConnectorByIDReq) (*GetConnectorByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorByID not implemented")
}
func (*UnimplementedEvseServiceServer) GetConnectorByNO(context.Context, *GetConnectorByNOReq) (*GetConnectorByNOReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorByNO not implemented")
}
func (*UnimplementedEvseServiceServer) EvseStream(context.Context, *EvseStreamReq) (*EvseStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseStream not implemented")
}
func (*UnimplementedEvseServiceServer) EvseCtrl(context.Context, *EvseCtrlReq) (*EvseCtrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseCtrl not implemented")
}

func RegisterEvseServiceServer(s *grpc.Server, srv EvseServiceServer) {
	s.RegisterService(&_EvseService_serviceDesc, srv)
}

func _EvseService_UpsertEvse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Evse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).UpsertEvse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/UpsertEvse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).UpsertEvse(ctx, req.(*Evse))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_GetEvseBySN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvseBySNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).GetEvseBySN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/GetEvseBySN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).GetEvseBySN(ctx, req.(*GetEvseBySNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_GetEvseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvseByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).GetEvseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/GetEvseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).GetEvseByID(ctx, req.(*GetEvseByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_GetConnectorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).GetConnectorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/GetConnectorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).GetConnectorByID(ctx, req.(*GetConnectorByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_GetConnectorByNO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorByNOReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).GetConnectorByNO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/GetConnectorByNO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).GetConnectorByNO(ctx, req.(*GetConnectorByNOReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_EvseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).EvseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/EvseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).EvseStream(ctx, req.(*EvseStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_EvseCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseCtrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).EvseCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evsepb.EvseService/EvseCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).EvseCtrl(ctx, req.(*EvseCtrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evsepb.EvseService",
	HandlerType: (*EvseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertEvse",
			Handler:    _EvseService_UpsertEvse_Handler,
		},
		{
			MethodName: "GetEvseBySN",
			Handler:    _EvseService_GetEvseBySN_Handler,
		},
		{
			MethodName: "GetEvseByID",
			Handler:    _EvseService_GetEvseByID_Handler,
		},
		{
			MethodName: "GetConnectorByID",
			Handler:    _EvseService_GetConnectorByID_Handler,
		},
		{
			MethodName: "GetConnectorByNO",
			Handler:    _EvseService_GetConnectorByNO_Handler,
		},
		{
			MethodName: "EvseStream",
			Handler:    _EvseService_EvseStream_Handler,
		},
		{
			MethodName: "EvseCtrl",
			Handler:    _EvseService_EvseCtrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/zhuoqingbin/pbs/evsepb/evsepb.proto",
}
